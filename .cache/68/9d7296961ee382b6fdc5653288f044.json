{"id":"ONBM","dependencies":[{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/package.json","includedInParent":true,"mtime":1609564004117},{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-backend-webgl/package.json","includedInParent":true,"mtime":499162500000}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.DepthwiseConv2DProgram=void 0;class t{constructor(t,n=!1,o=null,e=!1){this.variableNames=[\"x\",\"W\"],this.outputShape=t.outShape;const i=t.inHeight,s=t.inWidth,r=t.padInfo.top,a=t.padInfo.left,d=t.strideHeight,l=t.strideWidth,C=t.dilationHeight,c=t.dilationWidth,h=t.filterHeight,u=t.filterWidth,x=t.outChannels/t.inChannels;let v=\"\",p=\"\";o&&(v=e?`float activation(float a) {\\n          float b = getPreluActivationWeightsAtOutCoords();\\n          ${o}\\n        }`:`\\n          float activation(float x) {\\n            ${o}\\n          }\\n        `,p=\"result = activation(result);\");const f=n?\"result += getBiasAtOutCoords();\":\"\";n&&this.variableNames.push(\"bias\"),e&&this.variableNames.push(\"preluActivationWeights\"),this.userCode=`\\n      ${v}\\n\\n      const ivec2 strides = ivec2(${d}, ${l});\\n      const ivec2 pads = ivec2(${r}, ${a});\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int batch = coords.x;\\n        ivec2 xRCCorner = coords.yz * strides - pads;\\n        int d2 = coords.w;\\n        int d1 = d2 / ${x};\\n        int q = d2 - d1 * ${x};\\n\\n        int xRCorner = xRCCorner.x;\\n        int xCCorner = xRCCorner.y;\\n\\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\\n        // ? = to be determined. : = across all values in that axis.\\n        float dotProd = 0.0;\\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\\n        for (int wR = 0; wR < ${h}; wR++) {\\n          int xR = xRCorner + wR * ${C};\\n\\n          if (xR < 0 || xR >= ${i}) {\\n            continue;\\n          }\\n\\n          for (int wC = 0; wC < ${u}; wC++) {\\n            int xC = xCCorner + wC * ${c};\\n\\n            if (xC < 0 || xC >= ${s}) {\\n              continue;\\n            }\\n\\n            float xVal = getX(batch, xR, xC, d1);\\n            float wVal = getW(wR, wC, d1, q);\\n            dotProd += xVal * wVal;\\n          }\\n        }\\n\\n        float result = dotProd;\\n        ${f}\\n        ${p}\\n        setOutput(result);\\n      }\\n    `}}exports.DepthwiseConv2DProgram=t;"},"sourceMaps":null,"error":null,"hash":"6b81be64c1f0b8806bf8a087230beabe","cacheData":{"env":{}}}