{"id":"NIhf","dependencies":[{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-backend-webgl/dist/complex_abs_gpu.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-backend-webgl/src/complex_abs_gpu.ts","includedInParent":true,"mtime":499162500000},{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/package.json","includedInParent":true,"mtime":1609563562293},{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-backend-webgl/package.json","includedInParent":true,"mtime":499162500000}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.ComplexAbsProgram=void 0;class e{constructor(e){this.variableNames=[\"real\",\"imag\"],this.outputShape=e,this.userCode=\"\\n      void main() {\\n        float re = abs(getRealAtOutCoords());\\n        float im = abs(getImagAtOutCoords());\\n        float mx = max(re, im);\\n\\n        // sadly the length function in glsl is not underflow-safe\\n        // (at least not on Intel GPUs). So the safe solution is\\n        // to ensure underflow-safety in all cases.\\n        setOutput(\\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\\n        );\\n      }\\n    \"}}exports.ComplexAbsProgram=e;"},"sourceMaps":{"js":{"mappings":[{"source":"../src/complex_abs_gpu.ts","name":null,"original":{"line":20,"column":30},"generated":{"line":1,"column":0}},{"source":"../src/complex_abs_gpu.ts","name":null,"original":{"line":20,"column":30},"generated":{"line":1,"column":13}},{"source":"../src/complex_abs_gpu.ts","name":null,"original":{"line":20,"column":30},"generated":{"line":1,"column":20}},{"source":"../src/complex_abs_gpu.ts","name":null,"original":{"line":20,"column":30},"generated":{"line":1,"column":35}},{"source":"../src/complex_abs_gpu.ts","name":null,"original":{"line":20,"column":30},"generated":{"line":1,"column":43}},{"source":"../src/complex_abs_gpu.ts","name":null,"original":{"line":20,"column":30},"generated":{"line":1,"column":56}},{"source":"../src/complex_abs_gpu.ts","name":null,"original":{"line":20,"column":30},"generated":{"line":1,"column":57}},{"source":"../src/complex_abs_gpu.ts","name":null,"original":{"line":20,"column":30},"generated":{"line":1,"column":64}},{"source":"../src/complex_abs_gpu.ts","name":null,"original":{"line":20,"column":30},"generated":{"line":1,"column":68}},{"source":"../src/complex_abs_gpu.ts","name":null,"original":{"line":20,"column":30},"generated":{"line":1,"column":76}},{"source":"../src/complex_abs_gpu.ts","name":null,"original":{"line":20,"column":30},"generated":{"line":1,"column":99}},{"source":"../src/complex_abs_gpu.ts","name":null,"original":{"line":20,"column":6},"generated":{"line":1,"column":101}},{"source":"../src/complex_abs_gpu.ts","name":null,"original":{"line":20,"column":13},"generated":{"line":1,"column":107}},{"source":"../src/complex_abs_gpu.ts","name":null,"original":{"line":25,"column":2},"generated":{"line":1,"column":109}},{"source":"../src/complex_abs_gpu.ts","name":null,"original":{"line":25,"column":14},"generated":{"line":1,"column":121}},{"source":"../src/complex_abs_gpu.ts","name":null,"original":{"line":21,"column":2},"generated":{"line":1,"column":124}},{"source":"../src/complex_abs_gpu.ts","name":null,"original":{"line":21,"column":2},"generated":{"line":1,"column":129}},{"source":"../src/complex_abs_gpu.ts","name":null,"original":{"line":21,"column":18},"generated":{"line":1,"column":143}},{"source":"../src/complex_abs_gpu.ts","name":null,"original":{"line":21,"column":19},"generated":{"line":1,"column":144}},{"source":"../src/complex_abs_gpu.ts","name":null,"original":{"line":21,"column":27},"generated":{"line":1,"column":151}},{"source":"../src/complex_abs_gpu.ts","name":null,"original":{"line":26,"column":9},"generated":{"line":1,"column":159}},{"source":"../src/complex_abs_gpu.ts","name":null,"original":{"line":26,"column":9},"generated":{"line":1,"column":164}},{"source":"../src/complex_abs_gpu.ts","name":null,"original":{"line":26,"column":23},"generated":{"line":1,"column":176}},{"source":"../src/complex_abs_gpu.ts","name":null,"original":{"line":27,"column":9},"generated":{"line":1,"column":178}},{"source":"../src/complex_abs_gpu.ts","name":null,"original":{"line":27,"column":9},"generated":{"line":1,"column":183}},{"source":"../src/complex_abs_gpu.ts","name":null,"original":{"line":27,"column":20},"generated":{"line":1,"column":192}},{"source":"../src/complex_abs_gpu.ts","name":null,"original":{"line":20,"column":30},"generated":{"line":1,"column":646}},{"source":"../src/complex_abs_gpu.ts","name":null,"original":{"line":20,"column":30},"generated":{"line":1,"column":654}},{"source":"../src/complex_abs_gpu.ts","name":null,"original":{"line":20,"column":30},"generated":{"line":1,"column":672}}],"sources":{"../src/complex_abs_gpu.ts":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ComplexAbsProgram implements GPGPUProgram {\n  variableNames = ['real', 'imag'];\n  userCode: string;\n  outputShape: number[];\n\n  constructor(shape: number[]) {\n    this.outputShape = shape;\n    this.userCode = `\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    `;\n  }\n}\n"},"lineCount":null}},"error":null,"hash":"82420a785a2ebfe49bb53c9d60929941","cacheData":{"env":{}}}