{"id":"uID4","dependencies":[{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/package.json","includedInParent":true,"mtime":1609563696417},{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-core/package.json","includedInParent":true,"mtime":499162500000}],"generated":{"js":"\"use strict\";function t(t){let r=t.length,e=0,n=0;for(;r>0;)n=Math.random()*r|0,e=t[--r],t[r]=t[n],t[n]=e}function r(t,r,e){return Math.max(t,Math.min(r,e))}function e(t){return t%2==0?t:t+1}function n(t){let r=0;for(let e=0;e<t.length;e++)r+=t[e];return r}function o(t,r){const e=Math.random();return r*e+(1-e)*t}function i(t,r){let e=0;for(let n=0;n<t.length;n++){const o=Number(t[n])-Number(r[n]);e+=o*o}return e}function s(t,r){if(!t)throw new Error(\"string\"==typeof r?r:r())}function u(t,r,e=\"\"){s(p(t,r),()=>e+` Shapes ${t} and ${r} must match`)}function a(t){s(null!=t,()=>\"The input to the tensor constructor must be a non-null value.\")}function l(t,r=[],e=!1){if(null==r&&(r=[]),Array.isArray(t)||v(t)&&!e)for(let n=0;n<t.length;++n)l(t[n],r,e);else r.push(t);return r}function f(t){if(0===t.length)return 1;let r=t[0];for(let e=1;e<t.length;e++)r*=t[e];return r}function c(t){return 0===t.length}function p(t,r){if(t===r)return!0;if(null==t||null==r)return!1;if(t.length!==r.length)return!1;for(let e=0;e<t.length;e++)if(t[e]!==r[e])return!1;return!0}function h(t){return t%1==0}function y(t){if(null!=Math.tanh)return Math.tanh(t);if(t===1/0)return 1;if(t===-1/0)return-1;{const r=Math.exp(2*t);return(r-1)/(r+1)}}function x(t){const r=Math.ceil(Math.sqrt(t));return[r,Math.ceil(t/r)]}function m(r){const e=new Uint32Array(r);for(let t=0;t<r;++t)e[t]=t;return t(e),e}function g(t,r){return r<=t.length?t:t+\" \".repeat(r-t.length)}function w(t,r=(t=>0),e){return new Promise((n,o)=>{let i=0;const s=()=>{if(t())return void n();const u=r(++i);null!=e&&i>=e?o():setTimeout(s,u)};s()})}function d(t,r){let e=1,n=-1;for(let i=0;i<t.length;++i)if(t[i]>=0)e*=t[i];else if(-1===t[i]){if(-1!==n)throw Error(\"Shapes can only have 1 implicit size. \"+`Found -1 at dim ${n} and dim ${i}`);n=i}else if(t[i]<0)throw Error(`Shapes can not be < 0. Found ${t[i]} at dim ${i}`);if(-1===n){if(r>0&&r!==e)throw Error(`Size(${r}) must match the product of shape ${t}`);return t}if(0===e)throw Error(`Cannot infer the missing size in [${t}] when `+\"there are 0 elements\");if(r%e!=0)throw Error(\"The implicit shape can't be a fractional number. \"+`Got ${r} / ${e}`);const o=t.slice();return o[n]=r/e,o}function A(t,r){const e=r.length;return s((t=null==t?r.map((t,r)=>r):[].concat(t)).every(t=>t>=-e&&t<e),()=>`All values in axis param must be in range [-${e}, ${e}) but `+`got axis ${t}`),s(t.every(t=>h(t)),()=>\"All values in axis param must be integers but \"+`got axis ${t}`),t.map(t=>t<0?e+t:t)}function b(t,r){const e=[],n=[],o=null!=r&&Array.isArray(r)&&0===r.length,i=null==r||o?null:A(r,t).sort();let s=0;for(let u=0;u<t.length;++u){if(null!=i){if(i[s]===u&&1!==t[u])throw new Error(`Can't squeeze axis ${u} since its dim '${t[u]}' is not 1`);(null==i[s]||i[s]>u)&&1===t[u]&&(e.push(t[u]),n.push(u)),i[s]<=u&&s++}1!==t[u]&&(e.push(t[u]),n.push(u))}return{newShape:e,keptDims:n}}function $(t,r){let e=null;if(null==t||\"float32\"===t)e=new Float32Array(r);else if(\"int32\"===t)e=new Int32Array(r);else{if(\"bool\"!==t)throw new Error(`Unknown data type ${t}`);e=new Uint8Array(r)}return e}function E(t,r){let e=null;if(null==t||\"float32\"===t)e=new Float32Array(r);else if(\"int32\"===t)e=new Int32Array(r);else if(\"bool\"===t)e=new Uint8Array(r);else{if(\"string\"!==t)throw new Error(`Unknown data type ${t}`);e=new Array(r)}return e}function S(t,r){for(let e=0;e<t.length;e++){const n=t[e];if(isNaN(n)||!isFinite(n))throw Error(`A tensor of type ${r} being uploaded contains ${n}.`)}}function F(t){return\"bool\"===t||\"complex64\"===t||\"float32\"===t||\"int32\"===t||\"string\"===t}function T(t,r){return\"complex64\"!==r&&((\"float32\"!==r||\"complex64\"===t)&&((\"int32\"!==r||\"float32\"===t||\"complex64\"===t)&&(\"bool\"!==r||\"bool\"!==t)))}function v(t){return t instanceof Float32Array||t instanceof Int32Array||t instanceof Uint8Array}function M(t){if(\"float32\"===t||\"int32\"===t)return 4;if(\"complex64\"===t)return 8;if(\"bool\"===t)return 1;throw new Error(`Unknown dtype ${t}`)}function U(t){if(null==t)return 0;let r=0;return t.forEach(t=>r+=t.length),r}function I(t){return\"string\"==typeof t||t instanceof String}function N(t){return\"boolean\"==typeof t}function k(t){return\"number\"==typeof t}function z(t){return Array.isArray(t)?z(t[0]):t instanceof Float32Array?\"float32\":t instanceof Int32Array||t instanceof Uint8Array?\"int32\":k(t)?\"float32\":I(t)?\"string\":N(t)?\"bool\":\"float32\"}function D(t){return!!(t&&t.constructor&&t.call&&t.apply)}function q(t,r){for(let e=r;e<t;++e)if(t%e==0)return e;return t}function P(t){const r=t.length;if(r<2)return[];const e=new Array(r-1);e[r-2]=t[r-1];for(let n=r-3;n>=0;--n)e[n]=e[n+1]*t[n+1];return e}function C(t,r,e){const n=new Array;if(1===r.length){const o=r[0];for(let r=0;r<o;r++)n[r]=e[t+r]}else{const o=r[0],i=r.slice(1),s=i.reduce((t,r)=>t*r);for(let r=0;r<o;r++)n[r]=C(t+r*s,i,e)}return n}function L(t,r){if(0===t.length)return r[0];const e=t.reduce((t,r)=>t*r);if(0===e)return[];if(e!==r.length)throw new Error(`[${t}] does not match the input size ${r.length}.`);return C(0,t,r)}function O(t,r){const e=Z(t,r);for(let n=0;n<e.length;n++)e[n]=1;return e}function Z(t,r){if(null==r||\"float32\"===r||\"complex64\"===r)return new Float32Array(t);if(\"int32\"===r)return new Int32Array(t);if(\"bool\"===r)return new Uint8Array(t);throw new Error(`Unknown data type ${r}`)}function _(t,r){const e=t.reduce((t,r)=>t*r,1);if(null==r||\"float32\"===r)return L(t,new Float32Array(e));if(\"int32\"===r)return L(t,new Int32Array(e));if(\"bool\"===r)return L(t,new Uint8Array(e));throw new Error(`Unknown data type ${r}`)}function j(t){t.forEach(r=>{s(Number.isInteger(r)&&r>=0,()=>\"Tensor must have a shape comprised of positive integers but got \"+`shape [${t}].`)})}function B(t,r,e){if(0===r)return 0;if(1===r)return t[0];let n=t[t.length-1];for(let o=0;o<t.length-1;++o)n+=e[o]*t[o];return n}function G(t,r,e){if(0===r)return[];if(1===r)return[t];const n=new Array(r);for(let o=0;o<n.length-1;++o)n[o]=Math.floor(t/e[o]),t-=n[o]*e[o];return n[n.length-1]=t,n}function V(t){return t&&t.then&&\"function\"==typeof t.then}Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.shuffle=t,exports.clamp=r,exports.nearestLargerEven=e,exports.sum=n,exports.randUniform=o,exports.distSquared=i,exports.assert=s,exports.assertShapesMatch=u,exports.assertNonNull=a,exports.flatten=l,exports.sizeFromShape=f,exports.isScalarShape=c,exports.arraysEqual=p,exports.isInt=h,exports.tanh=y,exports.sizeToSquarishShape=x,exports.createShuffledIndices=m,exports.rightPad=g,exports.repeatedTry=w,exports.inferFromImplicitShape=d,exports.parseAxisParam=A,exports.squeezeShape=b,exports.getTypedArrayFromDType=$,exports.getArrayFromDType=E,exports.checkConversionForErrors=S,exports.isValidDtype=F,exports.hasEncodingLoss=T,exports.isTypedArray=v,exports.bytesPerElement=M,exports.bytesFromStringArray=U,exports.isString=I,exports.isBoolean=N,exports.isNumber=k,exports.inferDtype=z,exports.isFunction=D,exports.nearestDivisor=q,exports.computeStrides=P,exports.toNestedArray=L,exports.makeOnesTypedArray=O,exports.makeZerosTypedArray=Z,exports.makeZerosNestedTypedArray=_,exports.assertNonNegativeIntegerDimensions=j,exports.locToIndex=B,exports.indexToLoc=G,exports.isPromise=V;"},"sourceMaps":null,"error":null,"hash":"82eae01d720f7bd8a235e110013a0526","cacheData":{"env":{}}}