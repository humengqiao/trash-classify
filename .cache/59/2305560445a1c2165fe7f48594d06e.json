{"id":"tpB1","dependencies":[{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/package.json","includedInParent":true,"mtime":1609565653941},{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-converter/package.json","includedInParent":true,"mtime":499162500000},{"name":"@tensorflow/tfjs-core","loc":{"line":17,"column":27},"parent":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-converter/dist/executor/graph_executor.js","resolved":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-core/dist/index.js"},{"name":"../operations/executors/utils","loc":{"line":18,"column":107},"parent":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-converter/dist/executor/graph_executor.js","resolved":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-converter/dist/operations/executors/utils.js"},{"name":"../operations/operation_executor","loc":{"line":19,"column":26},"parent":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-converter/dist/executor/graph_executor.js","resolved":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-converter/dist/operations/operation_executor.js"},{"name":"./execution_context","loc":{"line":20,"column":33},"parent":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-converter/dist/executor/graph_executor.js","resolved":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-converter/dist/executor/execution_context.js"},{"name":"./model_analysis","loc":{"line":21,"column":80},"parent":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-converter/dist/executor/graph_executor.js","resolved":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-converter/dist/executor/model_analysis.js"}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.GraphExecutor=void 0;var t=require(\"@tensorflow/tfjs-core\"),e=require(\"../operations/executors/utils\"),s=require(\"../operations/operation_executor\"),n=require(\"./execution_context\"),o=require(\"./model_analysis\");class i{constructor(t,e){this.graph=t,this.parent=e,this.compiledMap=new Map,this._weightMap={},this.SEPERATOR=\",\",this._functions={},this._functionExecutorMap={},this._outputs=t.outputs,this._inputs=t.inputs,this._initNodes=t.initNodes,this._signature=t.signature,this._functions=t.functions,null!=t.functions&&Object.keys(t.functions).forEach(e=>{this._functionExecutorMap[e]=new i(t.functions[e],this)})}get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(t){const e=Object.keys(t).map(e=>t[e].map(t=>t.id));this._weightIds=[].concat(...e),this._weightMap=t}set resourceManager(t){this._resourceManager=t}get inputs(){return this._inputs.map(t=>({name:t.name,shape:t.attrParams.shape?t.attrParams.shape.value:void 0,dtype:t.attrParams.dtype?t.attrParams.dtype.value:void 0}))}get outputs(){return this._outputs.map(t=>({name:t.name,shape:t.attrParams.shape?t.attrParams.shape.value:void 0,dtype:t.attrParams.dtype?t.attrParams.dtype.value:void 0}))}get inputNodes(){return this._inputs.map(t=>t.signatureKey||t.name)}get outputNodes(){return this._outputs.map(t=>{const e=t.signatureKey||t.name;return t.defaultOutput?`${e}:${t.defaultOutput}`:e})}get functions(){return Object.keys(this._functions).reduce((t,e)=>(t[e]=this._functions[e].signature,t),{})}getCompilationKey(t,e){const s=t.map(t=>t.name).sort(),n=e.map(t=>t.name).sort();return s.join(this.SEPERATOR)+\"--\"+n.join(this.SEPERATOR)}compile(t,e){const s=(0,o.getExecutionSubgraph)(t,e,this.weightMap,this._initNodes),{missingInputs:n,dynamicNode:i,syncInputs:a}=s;if(null!=i)throw new Error(`This execution contains the node '${i.name}', which has `+`the dynamic op '${i.op}'. Please use `+\"model.executeAsync() instead. Alternatively, to avoid the \"+`dynamic ops, specify the inputs [${a}]`);if(n.length>0){const s=e.map(t=>t.name),o=Object.keys(t);throw new Error(`Cannot compute the outputs [${s}] from the provided inputs `+`[${o}]. Missing the following inputs: [${n}]`)}return(0,o.getNodesInTopologicalOrder)(this.graph,this.weightMap,s)}execute(o,i){o=this.mapInputs(o);const a=Object.keys(o).sort();this.checkInputs(o),this.checkInputShapeAndType(o),i=this.mapOutputs(i),this.checkOutputs(i);const r=a.map(t=>this.graph.nodes[(0,e.parseNodeName)(t)[0]]),u=i.map(t=>(0,e.parseNodeName)(t)[0]);let p=u.map(t=>this.graph.nodes[t]);0===p.length&&(p=this._outputs);const h=this.getCompilationKey(r,p);let c=this.compiledMap.get(h);null==c&&(c=this.compile(o,p),this.compiledMap.set(h,c));const d={},l={};return(0,t.tidy)(()=>{const a=new n.ExecutionContext(this.weightMap,d,l,this.functionExecutorMap),r=Object.assign({},this.weightMap);Object.keys(o).forEach(t=>{const[s,n]=(0,e.parseNodeName)(t),i=[];i[n]=o[t],r[s]=i});const p=this.getFrozenTensorIds(r),h={};for(let e=0;e<c.length;e++){const n=c[e];if(!r[n.name]){const e=(0,s.executeOp)(n,r,a,this._resourceManager);if(t.util.isPromise(e))throw new Error(`The execution of the op '${n.op}' returned a promise. `+\"Please use model.executeAsync() instead.\");r[n.name]=e,this.checkTensorForDisposal(n.name,n,r,a,p,u,h)}}return null==this.parent&&a.dispose(p),i.map(t=>(0,e.getTensor)(t,r,a))})}getFrozenTensorIds(t){const e=[].concat.apply([],Object.keys(t).map(e=>t[e]).map(t=>t.map(t=>t.id)));return new Set(e)}checkTensorForDisposal(t,s,n,o,i,a,r){\"control\"!==s.category&&-1===a.indexOf(t)&&(n[t].forEach(t=>{null!=t&&(r[t.id]=(r[t.id]||0)+s.children.length)}),s.inputs.forEach(t=>{if(\"control\"!==t.category){const s=(0,e.getTensorsForCurrentContenxt)(t.name,n,o);null!=s&&s.forEach(t=>{if(t&&!i.has(t.id)){const e=r[t.id];1===e?(t.dispose(),delete r[t.id]):null!=e&&r[t.id]--}})}}))}async executeAsync(t,e){return this._executeAsync(t,e)}async _executeAsync(t,s,o=!1,i={},a={}){o||(t=this.mapInputs(t),this.checkInputs(t),this.checkInputShapeAndType(t),s=this.mapOutputs(s),this.checkOutputs(s));const r=new n.ExecutionContext(this.weightMap,i,a,this.functionExecutorMap),u=await this.executeWithControlFlow(t,r,s,o),p=s.map(t=>(0,e.getTensor)(t,u,r)),h=p.map(t=>t.id),c=Object.keys(t).map(e=>t[e].id),d=new Set([...h,...c,...this.weightIds]);return Object.keys(u).forEach(t=>{u[t].forEach(t=>{!t||t.isDisposed||d.has(t.id)||t.dispose()})}),null==this.parent&&r.dispose(d),p}async executeFunctionAsync(t,e,s){const n=t.reduce((t,e,s)=>(t[this.inputs[s].name]=e,t),{});return this._executeAsync(n,this.outputNodes,!0,e,s)}async executeWithControlFlow(t,s,n,i){const a=Object.keys(t),r=a.map(t=>this.graph.nodes[(0,e.parseNodeName)(t)[0]]),u=n.map(t=>(0,e.parseNodeName)(t)[0]);let p=u.map(t=>this.graph.nodes[t]);0===p.length&&(p=this._outputs);const{usedNodes:h,missingInputs:c,dynamicNode:d,syncInputs:l}=(0,o.getExecutionSubgraph)(t,p,this.weightMap,this._initNodes),m=[...r,...this.graph.weights,...this._initNodes||[]].map(t=>({node:t,contexts:s.currentContext})),g=Object.assign({},this.weightMap);Object.keys(t).forEach(s=>{const[n,o]=(0,e.parseNodeName)(s),i=[];i[o]=t[s],g[n]=i});const y={},f=this.getFrozenTensorIds(g),x={};for(;m.length>0;){const t=this.processStack(r,m,s,g,x,f,u,y,h);await Promise.all(t)}null!=d||i||console.warn(\"This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.\");const w=p.filter(t=>!(0,o.isControlFlow)(t)&&!(0,e.getTensor)(t.name,g,s)).map(t=>t.name);if(w.length>0){let t=\"\";throw null!=d&&(t=\"Alternatively, to avoid the dynamic ops, use model.execute() \"+`and specify the inputs [${l}]`),new Error(`Cannot compute the outputs [${w}] from the provided `+`inputs [${a}]. Consider providing the following inputs: `+`[${c}]. ${t}`)}return g}processStack(n,o,i,a,r,u,p,h,c){const d=[];for(;o.length>0;){const n=o.pop();i.currentContext=n.contexts;let l=\"\";if(\"Enter\"===n.node.op&&(0,e.getParamValue)(\"isConstant\",n.node,a,i)&&([l]=(0,e.getNodeNameAndIndex)(n.node.name,i)),null==a[n.node.name]){const m=(0,s.executeOp)(n.node,a,i,this._resourceManager);l||([l]=(0,e.getNodeNameAndIndex)(n.node.name,i));const g=i.currentContext;t.util.isPromise(m)?d.push(m.then(t=>(a[l]=t,i.currentContext=g,this.checkTensorForDisposal(l,n.node,a,i,u,p,h),this.processChildNodes(n.node,o,i,a,r,c),t))):(a[l]=m,this.checkTensorForDisposal(l,n.node,a,i,u,p,h),this.processChildNodes(n.node,o,i,a,r,c))}else this.processChildNodes(n.node,o,i,a,r,c)}return d}processChildNodes(t,s,n,o,i,a){t.children.forEach(t=>{const[r]=(0,e.getNodeNameAndIndex)(t.name,n);!i[r]&&a.has(t.name)&&(\"Merge\"===t.op?t.inputNames.some(t=>!!(0,e.getTensor)(t,o,n))&&(i[r]=!0,s.push({contexts:n.currentContext,node:t})):t.inputNames.every(t=>!!(0,e.getTensor)(t,o,n))&&(i[r]=!0,s.push({contexts:n.currentContext,node:t})))})}dispose(){Object.keys(this.weightMap).forEach(t=>this.weightMap[t].forEach(t=>t.dispose()))}checkInputShapeAndType(s){Object.keys(s).forEach(n=>{const o=s[n],[i]=(0,e.parseNodeName)(n),a=this.graph.nodes[i];if(a.attrParams.shape&&a.attrParams.shape.value){const e=a.attrParams.shape.value,s=e.length===o.shape.length&&o.shape.every((t,s)=>-1===e[s]||e[s]===t);t.util.assert(s,()=>`The shape of dict['${a.name}'] provided in `+`model.execute(dict) must be [${e}], but was `+`[${o.shape}]`)}a.attrParams.dtype&&a.attrParams.dtype.value&&t.util.assert(o.dtype===a.attrParams.dtype.value,()=>`The dtype of dict['${a.name}'] provided in `+\"model.execute(dict) must be \"+`${a.attrParams.dtype.value}, but was ${o.dtype}`)})}mapInputs(t){const e={};for(const s in t)if(null!=this._signature&&null!=this._signature.inputs&&null!=this._signature.inputs[s]){e[this._signature.inputs[s].name]=t[s]}else e[s]=t[s];return e}checkInputs(t){const s=Object.keys(t).filter(t=>{const[s]=(0,e.parseNodeName)(t);return null==this.graph.nodes[s]});if(s.length>0)throw new Error(\"The dict provided in model.execute(dict) has \"+`keys: [${s}] that are not part of graph`)}mapOutputs(t){return t.map(t=>{if(null!=this._signature&&null!=this._signature.outputs&&null!=this._signature.outputs[t]){return this._signature.outputs[t].name}return t},{})}checkOutputs(t){t.forEach(t=>{const[s]=(0,e.parseNodeName)(t);if(!this.graph.nodes[s])throw new Error(`The output '${t}' is not found in the graph`)})}}exports.GraphExecutor=i;"},"sourceMaps":null,"error":null,"hash":"0371638be9de45b96be070cd495471f1","cacheData":{"env":{}}}