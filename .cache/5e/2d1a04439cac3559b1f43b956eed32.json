{"id":"WV0L","dependencies":[{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-backend-webgl/dist/resize_bilinear_gpu.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-backend-webgl/src/resize_bilinear_gpu.ts","includedInParent":true,"mtime":499162500000},{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/package.json","includedInParent":true,"mtime":1609563562293},{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-backend-webgl/package.json","includedInParent":true,"mtime":499162500000}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.ResizeBilinearProgram=void 0;class e{constructor(e,o,t,n){this.variableNames=[\"A\"],this.outputShape=[];const[c,r,i,s]=e;this.outputShape=[c,o,t,s];const u=[n&&o>1?r-1:r,n&&t>1?i-1:i],a=[n&&o>1?o-1:o,n&&t>1?t-1:t];this.userCode=`\\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\\n          ${u[0]/a[0]},\\n          ${u[1]/a[1]});\\n      const vec2 inputShapeRC = vec2(${r}.0, ${i}.0);\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int d = coords[3];\\n        ivec2 yRC = coords.yz;\\n\\n        // Fractional source index.\\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\\n\\n        // Compute the four integer indices.\\n        ivec2 sourceFloorRC = ivec2(sourceFracIndexRC);\\n        ivec2 sourceCeilRC = ivec2(\\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\\n\\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\\n\\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\\n\\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\\n        float newValue = top + (bottom - top) * fracRC.x;\\n\\n        setOutput(newValue);\\n      }\\n    `}}exports.ResizeBilinearProgram=e;"},"sourceMaps":{"js":{"mappings":[{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":20,"column":34},"generated":{"line":1,"column":0}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":20,"column":34},"generated":{"line":1,"column":13}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":20,"column":34},"generated":{"line":1,"column":20}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":20,"column":34},"generated":{"line":1,"column":35}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":20,"column":34},"generated":{"line":1,"column":43}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":20,"column":34},"generated":{"line":1,"column":56}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":20,"column":34},"generated":{"line":1,"column":57}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":20,"column":34},"generated":{"line":1,"column":64}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":20,"column":34},"generated":{"line":1,"column":68}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":20,"column":34},"generated":{"line":1,"column":76}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":20,"column":34},"generated":{"line":1,"column":103}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":20,"column":6},"generated":{"line":1,"column":105}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":20,"column":13},"generated":{"line":1,"column":111}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":25,"column":2},"generated":{"line":1,"column":113}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":26,"column":6},"generated":{"line":1,"column":125}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":26,"column":52},"generated":{"line":1,"column":127}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":27,"column":6},"generated":{"line":1,"column":129}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":27,"column":24},"generated":{"line":1,"column":131}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":21,"column":2},"generated":{"line":1,"column":134}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":21,"column":2},"generated":{"line":1,"column":139}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":21,"column":18},"generated":{"line":1,"column":153}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":21,"column":19},"generated":{"line":1,"column":154}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":22,"column":2},"generated":{"line":1,"column":159}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":22,"column":2},"generated":{"line":1,"column":164}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":22,"column":26},"generated":{"line":1,"column":176}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":28,"column":10},"generated":{"line":1,"column":179}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":28,"column":11},"generated":{"line":1,"column":185}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":28,"column":18},"generated":{"line":1,"column":187}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":28,"column":29},"generated":{"line":1,"column":189}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":28,"column":39},"generated":{"line":1,"column":191}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":28,"column":48},"generated":{"line":1,"column":194}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":29,"column":9},"generated":{"line":1,"column":196}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":29,"column":9},"generated":{"line":1,"column":201}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":29,"column":23},"generated":{"line":1,"column":213}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":29,"column":24},"generated":{"line":1,"column":214}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":29,"column":31},"generated":{"line":1,"column":216}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":29,"column":42},"generated":{"line":1,"column":218}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":29,"column":52},"generated":{"line":1,"column":220}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":31,"column":10},"generated":{"line":1,"column":223}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":31,"column":10},"generated":{"line":1,"column":229}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":31,"column":46},"generated":{"line":1,"column":231}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":32,"column":7},"generated":{"line":1,"column":232}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":32,"column":23},"generated":{"line":1,"column":235}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":32,"column":35},"generated":{"line":1,"column":237}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":32,"column":40},"generated":{"line":1,"column":239}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":32,"column":52},"generated":{"line":1,"column":241}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":32,"column":56},"generated":{"line":1,"column":243}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":33,"column":7},"generated":{"line":1,"column":245}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":33,"column":23},"generated":{"line":1,"column":248}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":33,"column":34},"generated":{"line":1,"column":250}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":33,"column":39},"generated":{"line":1,"column":252}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":33,"column":50},"generated":{"line":1,"column":254}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":33,"column":54},"generated":{"line":1,"column":256}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":36,"column":10},"generated":{"line":1,"column":259}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":36,"column":47},"generated":{"line":1,"column":261}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":37,"column":7},"generated":{"line":1,"column":262}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":37,"column":23},"generated":{"line":1,"column":265}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":37,"column":35},"generated":{"line":1,"column":267}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":37,"column":40},"generated":{"line":1,"column":269}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":37,"column":52},"generated":{"line":1,"column":271}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":37,"column":56},"generated":{"line":1,"column":273}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":38,"column":7},"generated":{"line":1,"column":275}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":38,"column":23},"generated":{"line":1,"column":278}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":38,"column":34},"generated":{"line":1,"column":280}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":38,"column":39},"generated":{"line":1,"column":282}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":38,"column":50},"generated":{"line":1,"column":284}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":38,"column":54},"generated":{"line":1,"column":286}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":41,"column":9},"generated":{"line":1,"column":289}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":41,"column":9},"generated":{"line":1,"column":294}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":43,"column":12},"generated":{"line":1,"column":376}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":43,"column":28},"generated":{"line":1,"column":378}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":43,"column":33},"generated":{"line":1,"column":381}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":43,"column":50},"generated":{"line":1,"column":383}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":44,"column":12},"generated":{"line":1,"column":401}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":44,"column":28},"generated":{"line":1,"column":403}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":44,"column":33},"generated":{"line":1,"column":406}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":44,"column":50},"generated":{"line":1,"column":408}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":45,"column":39},"generated":{"line":1,"column":454}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":45,"column":55},"generated":{"line":1,"column":462}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":20,"column":34},"generated":{"line":1,"column":1551}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":20,"column":34},"generated":{"line":1,"column":1559}},{"source":"../src/resize_bilinear_gpu.ts","name":null,"original":{"line":20,"column":34},"generated":{"line":1,"column":1581}}],"sources":{"../src/resize_bilinear_gpu.ts":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeBilinearProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      inputShape: [number, number, number, number], newHeight: number,\n      newWidth: number, alignCorners: boolean) {\n    const [batch, oldHeight, oldWidth, depth] = inputShape;\n    this.outputShape = [batch, newHeight, newWidth, depth];\n\n    const effectiveInSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n      (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n    ];\n\n    const effectiveOutSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n      (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n    ];\n\n    this.userCode = `\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec2 inputShapeRC = vec2(${oldHeight}.0, ${oldWidth}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(sourceFracIndexRC);\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `;\n  }\n}\n"},"lineCount":null}},"error":null,"hash":"0ec52c67ecf0e4ec38528518e957b74b","cacheData":{"env":{}}}