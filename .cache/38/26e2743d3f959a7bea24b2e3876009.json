{"id":"xogv","dependencies":[{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-backend-webgl/dist/resize_bilinear_packed_gpu.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-backend-webgl/src/resize_bilinear_packed_gpu.ts","includedInParent":true,"mtime":499162500000},{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/package.json","includedInParent":true,"mtime":1609563562293},{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-backend-webgl/package.json","includedInParent":true,"mtime":499162500000}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.ResizeBilinearPackedProgram=void 0;class e{constructor(e,o,t,n){this.variableNames=[\"A\"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[c,r,s,u]=e;this.outputShape=[c,o,t,u];const l=[n&&o>1?r-1:r,n&&t>1?s-1:s],C=[n&&o>1?o-1:o,n&&t>1?t-1:t];this.userCode=`\\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\\n          ${l[0]/C[0]},\\n          ${l[1]/C[1]},\\n          ${l[1]/C[1]});\\n      const vec3 inputShapeRC = vec3(${r}.0, ${s}.0,\\n                                     ${s}.0);\\n\\n      float getAValue(int b, int r, int c, int d) {\\n        return getChannel(getA(b, r, c, d), vec2(c, d));\\n      }\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int d = coords[3];\\n        // Calculate values for next column in yRC.z.\\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\\n\\n        // Fractional source index.\\n        vec3 sourceFracIndexRC = vec3(yRC) * effectiveInputOverOutputRatioRC;\\n\\n        // Compute the four integer indices.\\n        ivec3 sourceFloorRC = ivec3(sourceFracIndexRC);\\n        ivec3 sourceCeilRC = ivec3(\\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\\n\\n        // Should we calculate next column and row elements in 2x2 packed cell.\\n        bool hasNextCol = d < ${u-1};\\n        bool hasNextRow = coords.z < ${t-1};\\n\\n        // In parallel, construct four corners for all four components in\\n        // packed 2x2 cell.\\n        vec4 topLeft = vec4(\\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\\n                     : 0.0,\\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\\n                     : 0.0,\\n          (hasNextRow && hasNextCol) ?\\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\\n\\n        vec4 bottomLeft = vec4(\\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\\n                     : 0.0,\\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\\n                     : 0.0,\\n          (hasNextRow && hasNextCol) ?\\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\\n\\n        vec4 topRight = vec4(\\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\\n                     : 0.0,\\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\\n                     : 0.0,\\n          (hasNextRow && hasNextCol) ?\\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\\n\\n        vec4 bottomRight = vec4(\\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\\n                     : 0.0,\\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\\n                     : 0.0,\\n          (hasNextRow && hasNextCol) ?\\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\\n\\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\\n\\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\\n        vec4 newValue = mix(top, bottom, fracRC.x);\\n\\n        setOutput(newValue);\\n      }\\n    `}}exports.ResizeBilinearPackedProgram=e;"},"sourceMaps":{"js":{"mappings":[{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":20,"column":40},"generated":{"line":1,"column":0}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":20,"column":40},"generated":{"line":1,"column":13}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":20,"column":40},"generated":{"line":1,"column":20}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":20,"column":40},"generated":{"line":1,"column":35}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":20,"column":40},"generated":{"line":1,"column":43}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":20,"column":40},"generated":{"line":1,"column":56}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":20,"column":40},"generated":{"line":1,"column":57}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":20,"column":40},"generated":{"line":1,"column":64}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":20,"column":40},"generated":{"line":1,"column":68}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":20,"column":40},"generated":{"line":1,"column":76}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":20,"column":40},"generated":{"line":1,"column":109}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":20,"column":6},"generated":{"line":1,"column":111}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":20,"column":13},"generated":{"line":1,"column":117}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":27,"column":2},"generated":{"line":1,"column":119}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":28,"column":6},"generated":{"line":1,"column":131}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":28,"column":52},"generated":{"line":1,"column":133}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":29,"column":6},"generated":{"line":1,"column":135}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":29,"column":24},"generated":{"line":1,"column":137}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":21,"column":2},"generated":{"line":1,"column":140}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":21,"column":2},"generated":{"line":1,"column":145}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":21,"column":18},"generated":{"line":1,"column":159}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":21,"column":19},"generated":{"line":1,"column":160}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":22,"column":2},"generated":{"line":1,"column":165}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":22,"column":2},"generated":{"line":1,"column":170}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":22,"column":17},"generated":{"line":1,"column":184}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":23,"column":2},"generated":{"line":1,"column":186}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":23,"column":2},"generated":{"line":1,"column":191}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":23,"column":17},"generated":{"line":1,"column":205}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":24,"column":2},"generated":{"line":1,"column":207}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":24,"column":2},"generated":{"line":1,"column":212}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":24,"column":26},"generated":{"line":1,"column":224}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":30,"column":10},"generated":{"line":1,"column":227}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":30,"column":11},"generated":{"line":1,"column":233}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":30,"column":18},"generated":{"line":1,"column":235}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":30,"column":29},"generated":{"line":1,"column":237}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":30,"column":39},"generated":{"line":1,"column":239}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":30,"column":48},"generated":{"line":1,"column":242}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":31,"column":9},"generated":{"line":1,"column":244}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":31,"column":9},"generated":{"line":1,"column":249}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":31,"column":23},"generated":{"line":1,"column":261}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":31,"column":24},"generated":{"line":1,"column":262}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":31,"column":31},"generated":{"line":1,"column":264}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":31,"column":42},"generated":{"line":1,"column":266}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":31,"column":52},"generated":{"line":1,"column":268}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":33,"column":10},"generated":{"line":1,"column":271}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":33,"column":10},"generated":{"line":1,"column":277}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":33,"column":46},"generated":{"line":1,"column":279}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":34,"column":7},"generated":{"line":1,"column":280}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":34,"column":23},"generated":{"line":1,"column":283}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":34,"column":35},"generated":{"line":1,"column":285}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":34,"column":40},"generated":{"line":1,"column":287}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":34,"column":52},"generated":{"line":1,"column":289}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":34,"column":56},"generated":{"line":1,"column":291}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":35,"column":7},"generated":{"line":1,"column":293}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":35,"column":23},"generated":{"line":1,"column":296}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":35,"column":34},"generated":{"line":1,"column":298}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":35,"column":39},"generated":{"line":1,"column":300}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":35,"column":50},"generated":{"line":1,"column":302}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":35,"column":54},"generated":{"line":1,"column":304}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":38,"column":10},"generated":{"line":1,"column":307}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":38,"column":47},"generated":{"line":1,"column":309}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":39,"column":7},"generated":{"line":1,"column":310}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":39,"column":23},"generated":{"line":1,"column":313}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":39,"column":35},"generated":{"line":1,"column":315}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":39,"column":40},"generated":{"line":1,"column":317}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":39,"column":52},"generated":{"line":1,"column":319}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":39,"column":56},"generated":{"line":1,"column":321}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":40,"column":7},"generated":{"line":1,"column":323}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":40,"column":23},"generated":{"line":1,"column":326}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":40,"column":34},"generated":{"line":1,"column":328}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":40,"column":39},"generated":{"line":1,"column":330}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":40,"column":50},"generated":{"line":1,"column":332}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":40,"column":54},"generated":{"line":1,"column":334}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":43,"column":9},"generated":{"line":1,"column":337}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":43,"column":9},"generated":{"line":1,"column":342}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":45,"column":12},"generated":{"line":1,"column":424}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":45,"column":28},"generated":{"line":1,"column":426}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":45,"column":33},"generated":{"line":1,"column":429}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":45,"column":50},"generated":{"line":1,"column":431}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":46,"column":12},"generated":{"line":1,"column":449}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":46,"column":28},"generated":{"line":1,"column":451}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":46,"column":33},"generated":{"line":1,"column":454}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":46,"column":50},"generated":{"line":1,"column":456}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":47,"column":12},"generated":{"line":1,"column":474}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":47,"column":28},"generated":{"line":1,"column":476}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":47,"column":33},"generated":{"line":1,"column":479}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":47,"column":50},"generated":{"line":1,"column":481}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":48,"column":39},"generated":{"line":1,"column":527}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":48,"column":55},"generated":{"line":1,"column":535}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":49,"column":39},"generated":{"line":1,"column":581}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":71,"column":32},"generated":{"line":1,"column":1375}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":71,"column":40},"generated":{"line":1,"column":1377}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":72,"column":39},"generated":{"line":1,"column":1421}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":72,"column":50},"generated":{"line":1,"column":1423}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":20,"column":40},"generated":{"line":1,"column":3492}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":20,"column":40},"generated":{"line":1,"column":3500}},{"source":"../src/resize_bilinear_packed_gpu.ts","name":null,"original":{"line":20,"column":40},"generated":{"line":1,"column":3528}}],"sources":{"../src/resize_bilinear_packed_gpu.ts":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeBilinearPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      inputShape: [number, number, number, number], newHeight: number,\n      newWidth: number, alignCorners: boolean) {\n    const [batch, oldHeight, oldWidth, depth] = inputShape;\n    this.outputShape = [batch, newHeight, newWidth, depth];\n\n    const effectiveInSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n      (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n    ];\n\n    const effectiveOutSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n      (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n    ];\n\n    this.userCode = `\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec3 inputShapeRC = vec3(${oldHeight}.0, ${oldWidth}.0,\n                                     ${oldWidth}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = vec3(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(sourceFracIndexRC);\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${depth - 1};\n        bool hasNextRow = coords.z < ${newWidth - 1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `;\n  }\n}\n"},"lineCount":null}},"error":null,"hash":"11ecfcf9783bd7583ecf908640f13804","cacheData":{"env":{}}}