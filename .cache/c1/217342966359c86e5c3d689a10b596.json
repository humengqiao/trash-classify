{"id":"TiGU","dependencies":[{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-core/src/ops/scalar.ts","includedInParent":true,"mtime":499162500000},{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/package.json","includedInParent":true,"mtime":1609563562293},{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-core/package.json","includedInParent":true,"mtime":499162500000},{"name":"../util","loc":{"line":17,"column":29},"parent":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js","resolved":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-core/dist/util.js"},{"name":"./tensor_ops_util","loc":{"line":18,"column":27},"parent":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js","resolved":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-core/dist/ops/tensor_ops_util.js"}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.scalar=t;var r=require(\"../util\"),e=require(\"./tensor_ops_util\");function t(t,a){if(((0,r.isTypedArray)(t)&&\"string\"!==a||Array.isArray(t))&&\"complex64\"!==a)throw new Error(\"Error creating a new Scalar: value must be a primitive (number|boolean|string)\");if(\"string\"===a&&(0,r.isTypedArray)(t)&&!(t instanceof Uint8Array))throw new Error(\"When making a scalar from encoded string, the value must be `Uint8Array`.\");return(0,e.makeTensor)(t,[],[],a)}"},"sourceMaps":{"js":{"mappings":[{"source":"../../src/ops/scalar.ts","name":null,"original":{"line":55,"column":1},"generated":{"line":1,"column":0}},{"source":"../../src/ops/scalar.ts","name":null,"original":{"line":55,"column":1},"generated":{"line":1,"column":13}},{"source":"../../src/ops/scalar.ts","name":null,"original":{"line":55,"column":1},"generated":{"line":1,"column":20}},{"source":"../../src/ops/scalar.ts","name":null,"original":{"line":55,"column":1},"generated":{"line":1,"column":35}},{"source":"../../src/ops/scalar.ts","name":null,"original":{"line":55,"column":1},"generated":{"line":1,"column":43}},{"source":"../../src/ops/scalar.ts","name":null,"original":{"line":55,"column":1},"generated":{"line":1,"column":56}},{"source":"../../src/ops/scalar.ts","name":null,"original":{"line":55,"column":1},"generated":{"line":1,"column":57}},{"source":"../../src/ops/scalar.ts","name":null,"original":{"line":55,"column":1},"generated":{"line":1,"column":64}},{"source":"../../src/ops/scalar.ts","name":null,"original":{"line":55,"column":1},"generated":{"line":1,"column":68}},{"source":"../../src/ops/scalar.ts","name":null,"original":{"line":55,"column":1},"generated":{"line":1,"column":76}},{"source":"../../src/ops/scalar.ts","name":null,"original":{"line":55,"column":1},"generated":{"line":1,"column":83}},{"source":"../../src/ops/scalar.ts","name":null,"original":{"line":20,"column":0},"generated":{"line":1,"column":85}},{"source":"../../src/ops/scalar.ts","name":null,"original":{"line":20,"column":0},"generated":{"line":1,"column":89}},{"source":"../../src/ops/scalar.ts","name":null,"original":{"line":20,"column":0},"generated":{"line":1,"column":91}},{"source":"../../src/ops/scalar.ts","name":null,"original":{"line":20,"column":0},"generated":{"line":1,"column":99}},{"source":"../../src/ops/scalar.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":1,"column":110}},{"source":"../../src/ops/scalar.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":1,"column":112}},{"source":"../../src/ops/scalar.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":1,"column":120}},{"source":"../../src/ops/scalar.ts","name":null,"original":{"line":38,"column":6},"generated":{"line":1,"column":141}},{"source":"../../src/ops/scalar.ts","name":null,"original":{"line":38,"column":16},"generated":{"line":1,"column":150}},{"source":"../../src/ops/scalar.ts","name":null,"original":{"line":39,"column":4},"generated":{"line":1,"column":152}},{"source":"../../src/ops/scalar.ts","name":null,"original":{"line":39,"column":45},"generated":{"line":1,"column":154}},{"source":"../../src/ops/scalar.ts","name":null,"original":{"line":40,"column":6},"generated":{"line":1,"column":157}},{"source":"../../src/ops/scalar.ts","name":null,"original":{"line":40,"column":8},"generated":{"line":1,"column":162}},{"source":"../../src/ops/scalar.ts","name":null,"original":{"line":40,"column":21},"generated":{"line":1,"column":164}},{"source":"../../src/ops/scalar.ts","name":null,"original":{"line":40,"column":21},"generated":{"line":1,"column":166}},{"source":"../../src/ops/scalar.ts","name":null,"original":{"line":40,"column":21},"generated":{"line":1,"column":180}},{"source":"../../src/ops/scalar.ts","name":null,"original":{"line":40,"column":41},"generated":{"line":1,"column":184}},{"source":"../../src/ops/scalar.ts","name":null,"original":{"line":40,"column":31},"generated":{"line":1,"column":195}},{"source":"../../src/ops/scalar.ts","name":null,"original":{"line":40,"column":54},"generated":{"line":1,"column":198}},{"source":"../../src/ops/scalar.ts","name":null,"original":{"line":40,"column":60},"generated":{"line":1,"column":204}},{"source":"../../src/ops/scalar.ts","name":null,"original":{"line":40,"column":68},"generated":{"line":1,"column":212}},{"source":"../../src/ops/scalar.ts","name":null,"original":{"line":41,"column":16},"generated":{"line":1,"column":217}},{"source":"../../src/ops/scalar.ts","name":null,"original":{"line":41,"column":6},"generated":{"line":1,"column":231}},{"source":"../../src/ops/scalar.ts","name":null,"original":{"line":42,"column":10},"generated":{"line":1,"column":233}},{"source":"../../src/ops/scalar.ts","name":null,"original":{"line":42,"column":10},"generated":{"line":1,"column":239}},{"source":"../../src/ops/scalar.ts","name":null,"original":{"line":42,"column":14},"generated":{"line":1,"column":243}},{"source":"../../src/ops/scalar.ts","name":null,"original":{"line":43,"column":8},"generated":{"line":1,"column":249}},{"source":"../../src/ops/scalar.ts","name":null,"original":{"line":46,"column":6},"generated":{"line":1,"column":331}},{"source":"../../src/ops/scalar.ts","name":null,"original":{"line":46,"column":16},"generated":{"line":1,"column":334}},{"source":"../../src/ops/scalar.ts","name":null,"original":{"line":46,"column":6},"generated":{"line":1,"column":345}},{"source":"../../src/ops/scalar.ts","name":null,"original":{"line":46,"column":28},"generated":{"line":1,"column":349}},{"source":"../../src/ops/scalar.ts","name":null,"original":{"line":46,"column":41},"generated":{"line":1,"column":351}},{"source":"../../src/ops/scalar.ts","name":null,"original":{"line":46,"column":41},"generated":{"line":1,"column":353}},{"source":"../../src/ops/scalar.ts","name":null,"original":{"line":46,"column":41},"generated":{"line":1,"column":367}},{"source":"../../src/ops/scalar.ts","name":null,"original":{"line":47,"column":8},"generated":{"line":1,"column":373}},{"source":"../../src/ops/scalar.ts","name":null,"original":{"line":47,"column":25},"generated":{"line":1,"column":386}},{"source":"../../src/ops/scalar.ts","name":null,"original":{"line":48,"column":10},"generated":{"line":1,"column":398}},{"source":"../../src/ops/scalar.ts","name":null,"original":{"line":48,"column":10},"generated":{"line":1,"column":404}},{"source":"../../src/ops/scalar.ts","name":null,"original":{"line":48,"column":14},"generated":{"line":1,"column":408}},{"source":"../../src/ops/scalar.ts","name":null,"original":{"line":49,"column":8},"generated":{"line":1,"column":414}},{"source":"../../src/ops/scalar.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":1,"column":491}},{"source":"../../src/ops/scalar.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":1,"column":498}},{"source":"../../src/ops/scalar.ts","name":null,"original":{"line":54,"column":20},"generated":{"line":1,"column":500}},{"source":"../../src/ops/scalar.ts","name":null,"original":{"line":54,"column":20},"generated":{"line":1,"column":502}},{"source":"../../src/ops/scalar.ts","name":null,"original":{"line":54,"column":20},"generated":{"line":1,"column":514}},{"source":"../../src/ops/scalar.ts","name":null,"original":{"line":52,"column":26},"generated":{"line":1,"column":516}},{"source":"../../src/ops/scalar.ts","name":null,"original":{"line":53,"column":34},"generated":{"line":1,"column":519}},{"source":"../../src/ops/scalar.ts","name":null,"original":{"line":54,"column":49},"generated":{"line":1,"column":522}}],"sources":{"../../src/ops/scalar.ts":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Scalar} from '../tensor';\nimport {DataType} from '../types';\nimport {isTypedArray} from '../util';\nimport {makeTensor} from './tensor_ops_util';\n\n/**\n * Creates rank-0 `tf.Tensor` (scalar) with the provided value and dtype.\n *\n * The same functionality can be achieved with `tf.tensor`, but in general\n * we recommend using `tf.scalar` as it makes the code more readable.\n *\n * ```js\n * tf.scalar(3.14).print();\n * ```\n *\n * @param value The value of the scalar.\n * @param dtype The data type.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nexport function scalar(\n    value: number|boolean|string|Uint8Array, dtype?: DataType): Scalar {\n  if (((isTypedArray(value) && dtype !== 'string') || Array.isArray(value)) &&\n      dtype !== 'complex64') {\n    throw new Error(\n        'Error creating a new Scalar: value must be a primitive ' +\n        '(number|boolean|string)');\n  }\n  if (dtype === 'string' && isTypedArray(value) &&\n      !(value instanceof Uint8Array)) {\n    throw new Error(\n        'When making a scalar from encoded string, ' +\n        'the value must be `Uint8Array`.');\n  }\n  const shape: number[] = [];\n  const inferredShape: number[] = [];\n  return makeTensor(value, shape, inferredShape, dtype) as Scalar;\n}\n"},"lineCount":null}},"error":null,"hash":"55dcf20411b472503b170fae0b7eea3e","cacheData":{"env":{}}}