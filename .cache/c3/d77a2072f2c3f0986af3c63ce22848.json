{"id":"EqxP","dependencies":[{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-data/dist/readers.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-data/src/readers.ts","includedInParent":true,"mtime":499162500000},{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/package.json","includedInParent":true,"mtime":1609563562293},{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-data/package.json","includedInParent":true,"mtime":499162500000},{"name":"./dataset","loc":{"line":18,"column":38},"parent":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-data/dist/readers.js","resolved":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-data/dist/dataset.js"},{"name":"./datasets/csv_dataset","loc":{"line":19,"column":27},"parent":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-data/dist/readers.js","resolved":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-data/dist/datasets/csv_dataset.js"},{"name":"./iterators/lazy_iterator","loc":{"line":20,"column":37},"parent":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-data/dist/readers.js","resolved":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-data/dist/iterators/lazy_iterator.js"},{"name":"./iterators/microphone_iterator","loc":{"line":21,"column":35},"parent":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-data/dist/readers.js","resolved":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-data/dist/iterators/microphone_iterator.js"},{"name":"./iterators/webcam_iterator","loc":{"line":22,"column":31},"parent":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-data/dist/readers.js","resolved":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-data/dist/iterators/webcam_iterator.js"},{"name":"./sources/url_data_source","loc":{"line":23,"column":30},"parent":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-data/dist/readers.js","resolved":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-data/dist/sources/url_data_source.js"}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.csv=s,exports.func=c,exports.generator=i,exports.webcam=u,exports.microphone=p;var r=require(\"./dataset\"),e=require(\"./datasets/csv_dataset\"),t=require(\"./iterators/lazy_iterator\"),a=require(\"./iterators/microphone_iterator\"),o=require(\"./iterators/webcam_iterator\"),n=require(\"./sources/url_data_source\");function s(r,t={}){return new e.CSVDataset(new n.URLDataSource(r),t)}function c(e){const a=(0,t.iteratorFromFunction)(e);return(0,r.datasetFromIteratorFn)(async()=>a)}function i(e){return(0,r.datasetFromIteratorFn)(async()=>{const r=await e();return(0,t.iteratorFromFunction)(()=>r.next())})}async function u(r,e){return o.WebcamIterator.create(r,e)}async function p(r){return a.MicrophoneIterator.create(r)}"},"sourceMaps":{"js":{"mappings":[{"source":"../src/readers.ts","name":null,"original":{"line":282,"column":1},"generated":{"line":1,"column":0}},{"source":"../src/readers.ts","name":null,"original":{"line":282,"column":1},"generated":{"line":1,"column":13}},{"source":"../src/readers.ts","name":null,"original":{"line":282,"column":1},"generated":{"line":1,"column":20}},{"source":"../src/readers.ts","name":null,"original":{"line":282,"column":1},"generated":{"line":1,"column":35}},{"source":"../src/readers.ts","name":null,"original":{"line":282,"column":1},"generated":{"line":1,"column":43}},{"source":"../src/readers.ts","name":null,"original":{"line":282,"column":1},"generated":{"line":1,"column":56}},{"source":"../src/readers.ts","name":null,"original":{"line":282,"column":1},"generated":{"line":1,"column":57}},{"source":"../src/readers.ts","name":null,"original":{"line":282,"column":1},"generated":{"line":1,"column":64}},{"source":"../src/readers.ts","name":null,"original":{"line":282,"column":1},"generated":{"line":1,"column":68}},{"source":"../src/readers.ts","name":null,"original":{"line":282,"column":1},"generated":{"line":1,"column":76}},{"source":"../src/readers.ts","name":null,"original":{"line":282,"column":1},"generated":{"line":1,"column":80}},{"source":"../src/readers.ts","name":null,"original":{"line":282,"column":1},"generated":{"line":1,"column":82}},{"source":"../src/readers.ts","name":null,"original":{"line":282,"column":1},"generated":{"line":1,"column":90}},{"source":"../src/readers.ts","name":null,"original":{"line":282,"column":1},"generated":{"line":1,"column":95}},{"source":"../src/readers.ts","name":null,"original":{"line":282,"column":1},"generated":{"line":1,"column":97}},{"source":"../src/readers.ts","name":null,"original":{"line":282,"column":1},"generated":{"line":1,"column":105}},{"source":"../src/readers.ts","name":null,"original":{"line":282,"column":1},"generated":{"line":1,"column":115}},{"source":"../src/readers.ts","name":null,"original":{"line":282,"column":1},"generated":{"line":1,"column":117}},{"source":"../src/readers.ts","name":null,"original":{"line":282,"column":1},"generated":{"line":1,"column":125}},{"source":"../src/readers.ts","name":null,"original":{"line":282,"column":1},"generated":{"line":1,"column":132}},{"source":"../src/readers.ts","name":null,"original":{"line":282,"column":1},"generated":{"line":1,"column":134}},{"source":"../src/readers.ts","name":null,"original":{"line":282,"column":1},"generated":{"line":1,"column":142}},{"source":"../src/readers.ts","name":null,"original":{"line":282,"column":1},"generated":{"line":1,"column":153}},{"source":"../src/readers.ts","name":null,"original":{"line":20,"column":0},"generated":{"line":1,"column":155}},{"source":"../src/readers.ts","name":null,"original":{"line":20,"column":0},"generated":{"line":1,"column":159}},{"source":"../src/readers.ts","name":null,"original":{"line":20,"column":0},"generated":{"line":1,"column":161}},{"source":"../src/readers.ts","name":null,"original":{"line":20,"column":0},"generated":{"line":1,"column":169}},{"source":"../src/readers.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":1,"column":182}},{"source":"../src/readers.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":1,"column":184}},{"source":"../src/readers.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":1,"column":192}},{"source":"../src/readers.ts","name":null,"original":{"line":22,"column":0},"generated":{"line":1,"column":218}},{"source":"../src/readers.ts","name":null,"original":{"line":22,"column":0},"generated":{"line":1,"column":220}},{"source":"../src/readers.ts","name":null,"original":{"line":22,"column":0},"generated":{"line":1,"column":228}},{"source":"../src/readers.ts","name":null,"original":{"line":23,"column":0},"generated":{"line":1,"column":257}},{"source":"../src/readers.ts","name":null,"original":{"line":23,"column":0},"generated":{"line":1,"column":259}},{"source":"../src/readers.ts","name":null,"original":{"line":23,"column":0},"generated":{"line":1,"column":267}},{"source":"../src/readers.ts","name":null,"original":{"line":24,"column":0},"generated":{"line":1,"column":302}},{"source":"../src/readers.ts","name":null,"original":{"line":24,"column":0},"generated":{"line":1,"column":304}},{"source":"../src/readers.ts","name":null,"original":{"line":24,"column":0},"generated":{"line":1,"column":312}},{"source":"../src/readers.ts","name":null,"original":{"line":25,"column":0},"generated":{"line":1,"column":343}},{"source":"../src/readers.ts","name":null,"original":{"line":25,"column":0},"generated":{"line":1,"column":345}},{"source":"../src/readers.ts","name":null,"original":{"line":25,"column":0},"generated":{"line":1,"column":353}},{"source":"../src/readers.ts","name":null,"original":{"line":106,"column":6},"generated":{"line":1,"column":382}},{"source":"../src/readers.ts","name":null,"original":{"line":106,"column":16},"generated":{"line":1,"column":391}},{"source":"../src/readers.ts","name":null,"original":{"line":107,"column":4},"generated":{"line":1,"column":393}},{"source":"../src/readers.ts","name":null,"original":{"line":107,"column":25},"generated":{"line":1,"column":395}},{"source":"../src/readers.ts","name":null,"original":{"line":107,"column":48},"generated":{"line":1,"column":397}},{"source":"../src/readers.ts","name":null,"original":{"line":108,"column":9},"generated":{"line":1,"column":401}},{"source":"../src/readers.ts","name":null,"original":{"line":108,"column":9},"generated":{"line":1,"column":408}},{"source":"../src/readers.ts","name":null,"original":{"line":108,"column":13},"generated":{"line":1,"column":412}},{"source":"../src/readers.ts","name":null,"original":{"line":108,"column":9},"generated":{"line":1,"column":414}},{"source":"../src/readers.ts","name":null,"original":{"line":108,"column":24},"generated":{"line":1,"column":425}},{"source":"../src/readers.ts","name":null,"original":{"line":108,"column":28},"generated":{"line":1,"column":429}},{"source":"../src/readers.ts","name":null,"original":{"line":108,"column":24},"generated":{"line":1,"column":431}},{"source":"../src/readers.ts","name":null,"original":{"line":108,"column":42},"generated":{"line":1,"column":445}},{"source":"../src/readers.ts","name":null,"original":{"line":108,"column":51},"generated":{"line":1,"column":448}},{"source":"../src/readers.ts","name":null,"original":{"line":135,"column":6},"generated":{"line":1,"column":451}},{"source":"../src/readers.ts","name":null,"original":{"line":135,"column":16},"generated":{"line":1,"column":460}},{"source":"../src/readers.ts","name":null,"original":{"line":136,"column":4},"generated":{"line":1,"column":462}},{"source":"../src/readers.ts","name":null,"original":{"line":137,"column":8},"generated":{"line":1,"column":465}},{"source":"../src/readers.ts","name":null,"original":{"line":137,"column":8},"generated":{"line":1,"column":471}},{"source":"../src/readers.ts","name":null,"original":{"line":137,"column":15},"generated":{"line":1,"column":474}},{"source":"../src/readers.ts","name":null,"original":{"line":137,"column":36},"generated":{"line":1,"column":476}},{"source":"../src/readers.ts","name":null,"original":{"line":137,"column":36},"generated":{"line":1,"column":478}},{"source":"../src/readers.ts","name":null,"original":{"line":137,"column":36},"generated":{"line":1,"column":500}},{"source":"../src/readers.ts","name":null,"original":{"line":138,"column":9},"generated":{"line":1,"column":503}},{"source":"../src/readers.ts","name":null,"original":{"line":138,"column":9},"generated":{"line":1,"column":510}},{"source":"../src/readers.ts","name":null,"original":{"line":138,"column":31},"generated":{"line":1,"column":512}},{"source":"../src/readers.ts","name":null,"original":{"line":138,"column":31},"generated":{"line":1,"column":514}},{"source":"../src/readers.ts","name":null,"original":{"line":138,"column":31},"generated":{"line":1,"column":537}},{"source":"../src/readers.ts","name":null,"original":{"line":138,"column":43},"generated":{"line":1,"column":546}},{"source":"../src/readers.ts","name":null,"original":{"line":201,"column":6},"generated":{"line":1,"column":549}},{"source":"../src/readers.ts","name":null,"original":{"line":201,"column":16},"generated":{"line":1,"column":558}},{"source":"../src/readers.ts","name":null,"original":{"line":202,"column":4},"generated":{"line":1,"column":560}},{"source":"../src/readers.ts","name":null,"original":{"line":203,"column":9},"generated":{"line":1,"column":563}},{"source":"../src/readers.ts","name":null,"original":{"line":203,"column":9},"generated":{"line":1,"column":570}},{"source":"../src/readers.ts","name":null,"original":{"line":203,"column":31},"generated":{"line":1,"column":572}},{"source":"../src/readers.ts","name":null,"original":{"line":203,"column":31},"generated":{"line":1,"column":574}},{"source":"../src/readers.ts","name":null,"original":{"line":203,"column":31},"generated":{"line":1,"column":597}},{"source":"../src/readers.ts","name":null,"original":{"line":204,"column":10},"generated":{"line":1,"column":607}},{"source":"../src/readers.ts","name":null,"original":{"line":204,"column":10},"generated":{"line":1,"column":613}},{"source":"../src/readers.ts","name":null,"original":{"line":204,"column":22},"generated":{"line":1,"column":621}},{"source":"../src/readers.ts","name":null,"original":{"line":205,"column":11},"generated":{"line":1,"column":625}},{"source":"../src/readers.ts","name":null,"original":{"line":205,"column":11},"generated":{"line":1,"column":632}},{"source":"../src/readers.ts","name":null,"original":{"line":205,"column":32},"generated":{"line":1,"column":634}},{"source":"../src/readers.ts","name":null,"original":{"line":205,"column":32},"generated":{"line":1,"column":636}},{"source":"../src/readers.ts","name":null,"original":{"line":205,"column":32},"generated":{"line":1,"column":658}},{"source":"../src/readers.ts","name":null,"original":{"line":205,"column":38},"generated":{"line":1,"column":662}},{"source":"../src/readers.ts","name":null,"original":{"line":205,"column":42},"generated":{"line":1,"column":664}},{"source":"../src/readers.ts","name":null,"original":{"line":239,"column":7},"generated":{"line":1,"column":674}},{"source":"../src/readers.ts","name":null,"original":{"line":239,"column":22},"generated":{"line":1,"column":689}},{"source":"../src/readers.ts","name":null,"original":{"line":240,"column":4},"generated":{"line":1,"column":691}},{"source":"../src/readers.ts","name":null,"original":{"line":241,"column":4},"generated":{"line":1,"column":693}},{"source":"../src/readers.ts","name":null,"original":{"line":242,"column":9},"generated":{"line":1,"column":696}},{"source":"../src/readers.ts","name":null,"original":{"line":242,"column":9},"generated":{"line":1,"column":703}},{"source":"../src/readers.ts","name":null,"original":{"line":242,"column":24},"generated":{"line":1,"column":705}},{"source":"../src/readers.ts","name":null,"original":{"line":242,"column":24},"generated":{"line":1,"column":720}},{"source":"../src/readers.ts","name":null,"original":{"line":242,"column":31},"generated":{"line":1,"column":727}},{"source":"../src/readers.ts","name":null,"original":{"line":242,"column":51},"generated":{"line":1,"column":729}},{"source":"../src/readers.ts","name":null,"original":{"line":279,"column":7},"generated":{"line":1,"column":732}},{"source":"../src/readers.ts","name":null,"original":{"line":279,"column":22},"generated":{"line":1,"column":747}},{"source":"../src/readers.ts","name":null,"original":{"line":279,"column":33},"generated":{"line":1,"column":749}},{"source":"../src/readers.ts","name":null,"original":{"line":281,"column":9},"generated":{"line":1,"column":752}},{"source":"../src/readers.ts","name":null,"original":{"line":281,"column":9},"generated":{"line":1,"column":759}},{"source":"../src/readers.ts","name":null,"original":{"line":281,"column":28},"generated":{"line":1,"column":761}},{"source":"../src/readers.ts","name":null,"original":{"line":281,"column":28},"generated":{"line":1,"column":780}},{"source":"../src/readers.ts","name":null,"original":{"line":281,"column":35},"generated":{"line":1,"column":787}}],"sources":{"../src/readers.ts":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n\nimport {TensorContainer} from '@tensorflow/tfjs-core';\nimport {Dataset, datasetFromIteratorFn} from './dataset';\nimport {CSVDataset} from './datasets/csv_dataset';\nimport {iteratorFromFunction} from './iterators/lazy_iterator';\nimport {MicrophoneIterator} from './iterators/microphone_iterator';\nimport {WebcamIterator} from './iterators/webcam_iterator';\nimport {URLDataSource} from './sources/url_data_source';\nimport {CSVConfig, MicrophoneConfig, WebcamConfig} from './types';\n\n/**\n * Create a `CSVDataset` by reading and decoding CSV file(s) from provided URL\n * or local path if it's in Node environment.\n *\n * Note: If isLabel in columnConfigs is `true` for at least one column, the\n * element in returned `CSVDataset` will be an object of\n * `{xs:features, ys:labels}`: xs is a dict of features key/value pairs, ys\n * is a dict of labels key/value pairs. If no column is marked as label,\n * returns a dict of features only.\n *\n * ```js\n * const csvUrl =\n * 'https://storage.googleapis.com/tfjs-examples/multivariate-linear-regression/data/boston-housing-train.csv';\n *\n * async function run() {\n *   // We want to predict the column \"medv\", which represents a median value of\n *   // a home (in $1000s), so we mark it as a label.\n *   const csvDataset = tf.data.csv(\n *     csvUrl, {\n *       columnConfigs: {\n *         medv: {\n *           isLabel: true\n *         }\n *       }\n *     });\n *\n *   // Number of features is the number of column names minus one for the label\n *   // column.\n *   const numOfFeatures = (await csvDataset.columnNames()).length - 1;\n *\n *   // Prepare the Dataset for training.\n *   const flattenedDataset =\n *     csvDataset\n *     .map(({xs, ys}) =>\n *       {\n *         // Convert xs(features) and ys(labels) from object form (keyed by\n *         // column name) to array form.\n *         return {xs:Object.values(xs), ys:Object.values(ys)};\n *       })\n *     .batch(10);\n *\n *   // Define the model.\n *   const model = tf.sequential();\n *   model.add(tf.layers.dense({\n *     inputShape: [numOfFeatures],\n *     units: 1\n *   }));\n *   model.compile({\n *     optimizer: tf.train.sgd(0.000001),\n *     loss: 'meanSquaredError'\n *   });\n *\n *   // Fit the model using the prepared Dataset\n *   return model.fitDataset(flattenedDataset, {\n *     epochs: 10,\n *     callbacks: {\n *       onEpochEnd: async (epoch, logs) => {\n *         console.log(epoch + ':' + logs.loss);\n *       }\n *     }\n *   });\n * }\n *\n * await run();\n * ```\n *\n * @param source URL or local path to get CSV file. If it's a local path, it\n * must have prefix `file://` and it only works in node environment.\n * @param csvConfig (Optional) A CSVConfig object that contains configurations\n *     of reading and decoding from CSV file(s).\n *\n * @doc {\n *   heading: 'Data',\n *   subheading: 'Creation',\n *   namespace: 'data',\n *   configParamIndices: [1]\n *  }\n */\nexport function csv(\n    source: RequestInfo, csvConfig: CSVConfig = {}): CSVDataset {\n  return new CSVDataset(new URLDataSource(source), csvConfig);\n}\n\n/**\n * Create a `Dataset` that produces each element by calling a provided function.\n *\n * Note that repeated iterations over this `Dataset` may produce different\n * results, because the function will be called anew for each element of each\n * iteration.\n *\n * Also, beware that the sequence of calls to this function may be out of order\n * in time with respect to the logical order of the Dataset. This is due to the\n * asynchronous lazy nature of stream processing, and depends on downstream\n * transformations (e.g. .shuffle()). If the provided function is pure, this is\n * no problem, but if it is a closure over a mutable state (e.g., a traversal\n * pointer), then the order of the produced elements may be scrambled.\n *\n * ```js\n * let i = -1;\n * const func = () =>\n *    ++i < 5 ? {value: i, done: false} : {value: null, done: true};\n * const ds = tf.data.func(func);\n * await ds.forEachAsync(e => console.log(e));\n * ```\n *\n * @param f A function that produces one data element on each call.\n */\nexport function func<T extends TensorContainer>(\n    f: () => IteratorResult<T>| Promise<IteratorResult<T>>): Dataset<T> {\n  const iter = iteratorFromFunction(f);\n  return datasetFromIteratorFn(async () => iter);\n}\n\n/**\n * Create a `Dataset` that produces each element from provided JavaScript\n * generator, which is a function*\n * (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators#Generator_functions),\n * or a function that returns an\n * iterator\n * (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators#Generator_functions).\n *\n * The returned iterator should have `.next()` function that returns element in\n * format of `{value: TensorContainer, done:boolean}`.\n *\n * Example of creating a dataset from an iterator factory:\n * ```js\n * function makeIterator() {\n *   const numElements = 10;\n *   let index = 0;\n *\n *   const iterator = {\n *     next: () => {\n *       let result;\n *       if (index < numElements) {\n *         result = {value: index, done: false};\n *         index++;\n *         return result;\n *       }\n *       return {value: index, done: true};\n *     }\n *   };\n *   return iterator;\n * }\n * const ds = tf.data.generator(makeIterator);\n * await ds.forEachAsync(e => console.log(e));\n * ```\n *\n * Example of creating a dataset from a generator:\n * ```js\n * function* dataGenerator() {\n *   const numElements = 10;\n *   let index = 0;\n *   while (index < numElements) {\n *     const x = index;\n *     index++;\n *     yield x;\n *   }\n * }\n *\n * const ds = tf.data.generator(dataGenerator);\n * await ds.forEachAsync(e => console.log(e));\n * ```\n *\n * @param generator A Javascript generator function that returns a JavaScript\n *     iterator.\n *\n * @doc {\n *   heading: 'Data',\n *   subheading: 'Creation',\n *   namespace: 'data',\n *   configParamIndices: [1]\n *  }\n */\nexport function generator<T extends TensorContainer>(\n    generator: () => Iterator<T>| Promise<Iterator<T>>): Dataset<T> {\n  return datasetFromIteratorFn(async () => {\n    const gen = await generator();\n    return iteratorFromFunction(() => gen.next());\n  });\n}\n\n/**\n * Create an iterator that generate `Tensor`s from webcam video stream. This API\n * only works in Browser environment when the device has webcam.\n *\n * Note: this code snippet only works when the device has a webcam. It will\n * request permission to open the webcam when running.\n * ```js\n * const videoElement = document.createElement('video');\n * videoElement.width = 100;\n * videoElement.height = 100;\n * const cam = await tf.data.webcam(videoElement);\n * const img = await cam.capture();\n * img.print();\n * cam.stop();\n * ```\n *\n * @param webcamVideoElement A `HTMLVideoElement` used to play video from\n *     webcam. If this element is not provided, a hidden `HTMLVideoElement` will\n *     be created. In that case, `resizeWidth` and `resizeHeight` must be\n *     provided to set the generated tensor shape.\n * @param webcamConfig A `WebcamConfig` object that contains configurations of\n *     reading and manipulating data from webcam video stream.\n *\n * @doc {\n *   heading: 'Data',\n *   subheading: 'Creation',\n *   namespace: 'data',\n *   ignoreCI: true\n *  }\n */\nexport async function webcam(\n    webcamVideoElement?: HTMLVideoElement,\n    webcamConfig?: WebcamConfig): Promise<WebcamIterator> {\n  return WebcamIterator.create(webcamVideoElement, webcamConfig);\n}\n\n/**\n * Create an iterator that generate frequency-domain spectrogram `Tensor`s from\n * microphone audio stream with browser's native FFT. This API only works in\n * browser environment when the device has microphone.\n *\n * Note: this code snippet only works when the device has a microphone. It will\n * request permission to open the microphone when running.\n * ```js\n * const mic = await tf.data.microphone({\n *   fftSize: 1024,\n *   columnTruncateLength: 232,\n *   numFramesPerSpectrogram: 43,\n *   sampleRateHz:44100,\n *   includeSpectrogram: true,\n *   includeWaveform: true\n * });\n * const audioData = await mic.capture();\n * const spectrogramTensor = audioData.spectrogram;\n * spectrogramTensor.print();\n * const waveformTensor = audioData.waveform;\n * waveformTensor.print();\n * mic.stop();\n * ```\n *\n * @param microphoneConfig A `MicrophoneConfig` object that contains\n *     configurations of reading audio data from microphone.\n *\n * @doc {\n *   heading: 'Data',\n *   subheading: 'Creation',\n *   namespace: 'data',\n *   ignoreCI: true\n *  }\n */\nexport async function microphone(microphoneConfig?: MicrophoneConfig):\n    Promise<MicrophoneIterator> {\n  return MicrophoneIterator.create(microphoneConfig);\n}\n"},"lineCount":null}},"error":null,"hash":"b7a9355601312803fe11d9dc63121c96","cacheData":{"env":{}}}