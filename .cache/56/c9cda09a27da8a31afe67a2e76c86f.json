{"id":"wHpB","dependencies":[{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-layers/src/engine/topology.ts","includedInParent":true,"mtime":499162500000},{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/package.json","includedInParent":true,"mtime":1609563562293},{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-layers/package.json","includedInParent":true,"mtime":499162500000},{"name":"@tensorflow/tfjs-core","loc":{"line":11,"column":42},"parent":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","resolved":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-core/dist/index.js"},{"name":"../backend/state","loc":{"line":12,"column":46},"parent":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","resolved":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-layers/dist/backend/state.js"},{"name":"../common","loc":{"line":13,"column":68},"parent":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","resolved":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-layers/dist/common.js"},{"name":"../errors","loc":{"line":14,"column":78},"parent":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","resolved":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-layers/dist/errors.js"},{"name":"../initializers","loc":{"line":15,"column":31},"parent":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","resolved":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-layers/dist/initializers.js"},{"name":"../utils/generic_utils","loc":{"line":16,"column":31},"parent":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","resolved":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-layers/dist/utils/generic_utils.js"},{"name":"../utils/types_utils","loc":{"line":17,"column":29},"parent":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","resolved":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-layers/dist/utils/types_utils.js"},{"name":"../utils/variable_utils","loc":{"line":18,"column":32},"parent":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","resolved":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-layers/dist/utils/variable_utils.js"},{"name":"../variables","loc":{"line":19,"column":60},"parent":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","resolved":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-layers/dist/variables.js"}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.getSourceInputs=w,exports.Layer=exports.Node=exports.SymbolicTensor=exports.InputSpec=void 0;var t=require(\"@tensorflow/tfjs-core\"),e=require(\"../backend/state\"),n=require(\"../common\"),i=require(\"../errors\"),s=require(\"../initializers\"),r=l(require(\"../utils/generic_utils\")),o=l(require(\"../utils/types_utils\")),a=l(require(\"../utils/variable_utils\")),h=require(\"../variables\");function u(){if(\"function\"!=typeof WeakMap)return null;var t=new WeakMap;return u=function(){return t},t}function l(t){if(t&&t.__esModule)return t;if(null===t||\"object\"!=typeof t&&\"function\"!=typeof t)return{default:t};var e=u();if(e&&e.has(t))return e.get(t);var n={},i=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var s in t)if(Object.prototype.hasOwnProperty.call(t,s)){var r=i?Object.getOwnPropertyDescriptor(t,s):null;r&&(r.get||r.set)?Object.defineProperty(n,s,r):n[s]=t[s]}return n.default=t,e&&e.set(t,n),n}class p{constructor(t){this.dtype=t.dtype,this.shape=t.shape,null!=t.shape?this.ndim=t.shape.length:this.ndim=t.ndim,this.maxNDim=t.maxNDim,this.minNDim=t.minNDim,this.axes=t.axes||{}}}exports.InputSpec=p;class d{constructor(t,i,s,r,o,a,h){this.dtype=t,this.shape=i,this.sourceLayer=s,this.inputs=r,this.callArgs=o,this.outputTensorIndex=h,this.id=(0,e.getNextUniqueTensorId)(),null!=a&&(this.originalName=(0,n.getScopedTensorName)(a),this.name=(0,n.getUniqueTensorName)(this.originalName)),this.rank=i.length}}exports.SymbolicTensor=d;let c=0;class f{constructor(t,e){this.callArgs=e,this.id=c++,this.outboundLayer=t.outboundLayer,this.inboundLayers=t.inboundLayers,this.nodeIndices=t.nodeIndices,this.tensorIndices=t.tensorIndices,this.inputTensors=t.inputTensors,this.outputTensors=t.outputTensors,this.inputMasks=t.inputMasks,this.outputMasks=t.outputMasks,this.inputShapes=t.inputShapes,this.outputShapes=t.outputShapes;for(const n of t.inboundLayers)null!=n&&n.outboundNodes.push(this);t.outboundLayer.inboundNodes.push(this)}getConfig(){const t=[];for(const e of this.inboundLayers)null!=e?t.push(e.name):t.push(null);return{outboundLayer:this.outboundLayer?this.outboundLayer.name:null,inboundLayers:t,nodeIndices:this.nodeIndices,tensorIndices:this.tensorIndices}}}exports.Node=f;let b=0;class g extends t.serialization.Serializable{constructor(t={}){super(),this._callHook=null,this._addedWeightNames=[],this._stateful=!1,this.id=b++,this.activityRegularizer=null,this.inputSpec=null,this.supportsMasking=!1,this._trainableWeights=[],this._nonTrainableWeights=[],this._losses=[],this._updates=[],this._built=!1,this.inboundNodes=[],this.outboundNodes=[];let n=t.name;if(!n){const t=this.getClassName();n=r.toSnakeCase(t)+\"_\"+(0,e.getUid)(t)}if(this.name=n,this.trainable_=null==t.trainable||t.trainable,null!=t.inputShape||null!=t.batchInputShape){let e;if(null!=t.batchInputShape)e=t.batchInputShape;else if(null!=t.inputShape){let n=null;null!=t.batchSize&&(n=t.batchSize),e=[n].concat(t.inputShape)}this.batchInputShape=e;let n=t.dtype;null==n&&(n=t.inputDType),null==n&&(n=\"float32\"),this.dtype=n}null!=t.weights?this.initialWeights=t.weights:this.initialWeights=null,this._refCount=null,this.fastWeightInitDuringBuild=!1}static nodeKey(t,e){return t.name+\"_ib-\"+e.toString()}getNodeAtIndex(t,e){if(0===this.inboundNodes.length)throw new i.RuntimeError(\"The layer has never been called \"+`and thus has no defined ${e}.`);if(this.inboundNodes.length<=t)throw new i.ValueError(`Asked to get ${e} at node ${t}, `+`but the layer has only ${this.inboundNodes.length} inbound nodes.`);return this.inboundNodes[t]}getInputAt(t){return r.singletonOrArray(this.getNodeAtIndex(t,\"input\").inputTensors)}getOutputAt(t){return r.singletonOrArray(this.getNodeAtIndex(t,\"output\").outputTensors)}get input(){if(this.inboundNodes.length>1)throw new i.AttributeError(`Layer ${this.name}`+' has multiple inbound nodes, hence the notion of \"layer input\" is ill-defined. Use `getInputAt(nodeIndex)` instead.');if(0===this.inboundNodes.length)throw new i.AttributeError(`Layer ${this.name}`+\" is not connected, no input to return.\");return r.singletonOrArray(this.getNodeAtIndex(0,\"input\").inputTensors)}get output(){if(0===this.inboundNodes.length)throw new i.AttributeError(`Layer ${this.name}`+\" has no inbound nodes.\");if(this.inboundNodes.length>1)throw new i.AttributeError(`Layer ${this.name}`+' has multiple inbound nodes, hence the notion of \"layer output\" is ill-defined. Use `getOutputAt(nodeIndex)` instead.');return r.singletonOrArray(this.getNodeAtIndex(0,\"output\").outputTensors)}get losses(){return this._losses}calculateLosses(){return this.losses.map(t=>t())}get updates(){return this._updates}get built(){return this._built}set built(t){this._built=t}get trainable(){return this.trainable_}set trainable(t){this._trainableWeights.forEach(e=>e.trainable=t),this.trainable_=t}get trainableWeights(){return this.trainable_?this._trainableWeights.filter(t=>t.trainable):[]}set trainableWeights(t){this._trainableWeights=t}get nonTrainableWeights(){return this.trainable?this._trainableWeights.filter(t=>!t.trainable).concat(this._nonTrainableWeights):this._trainableWeights.concat(this._nonTrainableWeights)}set nonTrainableWeights(t){this._nonTrainableWeights=t}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}get stateful(){return this._stateful}resetStates(){if(!this.stateful)throw new Error(\"Cannot call the resetStates() method of a non-stateful Layer object.\")}assertInputCompatibility(t){if(t=r.toList(t),null==this.inputSpec||0===this.inputSpec.length)return;const e=r.toList(this.inputSpec);if(t.length!==e.length)throw new i.ValueError(`Layer ${this.name} expects ${e.length} inputs, `+`but it received ${t.length} input tensors. `+`Input received: ${t}`);for(let n=0;n<t.length;n++){const s=t[n],r=e[n];if(null==r)continue;const o=s.rank;if(null!=r.ndim&&o!==r.ndim)throw new i.ValueError(`Input ${n} is incompatible with layer ${this.name}: `+`expected ndim=${r.ndim}, found ndim=${o}`);if(null!=r.maxNDim&&o>r.maxNDim)throw new i.ValueError(`Input ${n} is incompatible with layer ${this.name}`+`: expected max_ndim=${r.maxNDim}, found ndim=${o}`);if(null!=r.minNDim&&o<r.minNDim)throw new i.ValueError(`Input ${n} is incompatible with layer ${this.name}`+`: expected min_ndim=${r.minNDim}, found ndim=${o}.`);if(null!=r.dtype&&s.dtype!==r.dtype)throw new i.ValueError(`Input ${n} is incompatible with layer ${this.name} `+`: expected dtype=${r.dtype}, found dtype=${s.dtype}.`);if(r.axes){const t=s.shape;for(const e in r.axes){const s=Number(e),o=r.axes[e],a=s>=0?t[s]:t[t.length+s];if(null!=o&&-1===[o,null].indexOf(a))throw new i.ValueError(`Input ${n} is incompatible with layer `+`${this.name}: expected axis ${s} of input shape to `+`have value ${o} but got shape ${t}.`)}}if(null!=r.shape)for(let t=0;t<r.shape.length;++t){const e=r.shape[t],o=s.shape[t];if(null!=e&&null!=o&&e!==o)throw new i.ValueError(`Input ${n} is incompatible with layer `+`${this.name}: expected shape=${r.shape}, `+`found shape=${s.shape}.`)}}}call(t,e){return t}invokeCallHook(t,e){null!=this._callHook&&this._callHook(t,e)}setCallHook(t){this._callHook=t}clearCallHook(){this._callHook=null}apply(t,e){e=e||{},this.assertNotDisposed();const s=r.toList(t);let o=!0;for(const n of s)if(!(n instanceof d)){o=!1;break}let a=!0;for(const n of s)if(n instanceof d){a=!1;break}if(o===a)throw new i.ValueError(\"Arguments to apply() must be all SymbolicTensors or all Tensors\");return(0,n.nameScope)(this.name,()=>{if(!this.built){this.assertInputCompatibility(t);const e=[];for(const n of r.toList(t))e.push(n.shape);this.build(r.singletonOrArray(e)),this.built=!0,this.initialWeights&&this.setWeights(this.initialWeights),null===this._refCount&&a&&(this._refCount=1)}if(this.assertInputCompatibility(t),a){let n=this.call(t,e);const o=r.toList(n),a=[];for(let t of o)-1!==s.indexOf(t)&&(t=t.clone()),a.push(t);if(n=r.singletonOrArray(a),null!=this.activityRegularizer)throw new i.NotImplementedError(\"Layer invocation in the presence of activity regularizer(s) is not supported yet.\");return n}{const n=y(t),s=this.computeOutputShape(n);let o;const a=m(t);if(this.warnOnIncompatibleInputShape(Array.isArray(t)?n[0]:n),o=null!=s&&s.length>0&&Array.isArray(s[0])?s.map((n,i)=>new d(a,n,this,r.toList(t),e,this.name,i)):new d(a,s,this,r.toList(t),e,this.name),this.addInboundNode(t,o,null,null,n,s,e),this._refCount++,null!=this.activityRegularizer)throw new i.NotImplementedError(\"Layer invocation in the presence of activity regularizer(s) is not supported yet.\");return o}})}warnOnIncompatibleInputShape(t){if(null!=this.batchInputShape)if(t.length!==this.batchInputShape.length)console.warn(\"The rank of the input tensor provided (shape: \"+`${JSON.stringify(t)}) does not match that of the `+`batchInputShape (${JSON.stringify(this.batchInputShape)}) `+`of the layer ${this.name}`);else{let e=!1;this.batchInputShape.forEach((n,i)=>{null!=n&&null!=t[i]&&t[i]!==n&&(e=!0)}),e&&console.warn(\"The shape of the input tensor \"+`(${JSON.stringify(t)}) does not `+`match the expectation of layer ${this.name}: `+`${JSON.stringify(this.batchInputShape)}`)}}get outputShape(){if(null==this.inboundNodes||0===this.inboundNodes.length)throw new i.AttributeError(`The layer ${this.name} has never been called and thus has no `+\"defined output shape.\");const t=[];for(const e of this.inboundNodes){const n=JSON.stringify(e.outputShapes);-1===t.indexOf(n)&&t.push(n)}if(1===t.length){const t=this.inboundNodes[0].outputShapes;return Array.isArray(t)&&Array.isArray(t[0])&&1===t.length?t[0]:t}throw new i.AttributeError(`The layer ${this.name} has multiple inbound nodes with different `+'output shapes. Hence the notion of \"output shape\" is ill-defined for the layer.')}countParams(){if(!this.built)throw new i.RuntimeError(`You tried to call countParams() on ${this.name}, `+\"but the layer is not built yet. Build it first by calling build(batchInputShape).\");return a.countParamsInWeights(this.weights)}build(t){this.built=!0}getWeights(t=!1){return(0,h.batchGetValue)(t?this.trainableWeights:this.weights)}setWeights(e){(0,t.tidy)(()=>{const n=this.weights;if(n.length!==e.length)throw new i.ValueError(`You called setWeights(weights) on layer \"${this.name}\" `+`with a weight list of length ${e.length}, `+`but the layer was expecting ${n.length} weights. `+`Provided weights: ${e}...`);if(0===n.length)return;const s=[],r=(0,h.batchGetValue)(n);for(let o=0;o<r.length;++o){const a=r[o],h=n[o],u=e[o];if(!t.util.arraysEqual(a.shape,u.shape))throw new i.ValueError(`Layer weight shape ${a.shape} `+`not compatible with provided weight shape ${u.shape}`);s.push([h,u])}(0,h.batchSetValue)(s)})}addWeight(t,e,n,r,o,a,u){if(-1!==this._addedWeightNames.indexOf(t))throw new i.ValueError(`Duplicate weight name ${t} for layer ${this.name}`);this._addedWeightNames.push(t),null==n&&(n=\"float32\"),this.fastWeightInitDuringBuild&&(r=(0,s.getInitializer)(\"zeros\"));const l=r.apply(e,n),p=new h.LayerVariable(l,n,t,a,u);return l.dispose(),null!=o&&this.addLoss(()=>o.apply(p.read())),null==a&&(a=!0),a?this._trainableWeights.push(p):this._nonTrainableWeights.push(p),p}setFastWeightInitDuringBuild(t){this.fastWeightInitDuringBuild=t}addLoss(t){null==t||Array.isArray(t)&&0===t.length||(t=r.toList(t),void 0!==this._losses&&null!==this._losses&&this.losses.push(...t))}computeOutputShape(t){return t}computeMask(t,e){if(!this.supportsMasking){if(null!=e){if(!Array.isArray(e))throw new TypeError(`Layer ${this.name} does not support masking, `+\"but was passed an inputMask.\");e.forEach(t=>{if(null!=t)throw new TypeError(`Layer ${this.name} does not support masking, `+\"but was passed an inputMask.\")})}return null}return e}addInboundNode(t,e,n,i,s,a,h=null){const u=r.toList(t);e=r.toList(e),n=r.toList(n),i=r.toList(i),s=o.normalizeShapeList(s),a=o.normalizeShapeList(a);const l=[],p=[],d=[];for(const r of u)l.push(r.sourceLayer),p.push(r.nodeIndex),d.push(r.tensorIndex);new f({outboundLayer:this,inboundLayers:l,nodeIndices:p,tensorIndices:d,inputTensors:u,outputTensors:e,inputMasks:n,outputMasks:i,inputShapes:s,outputShapes:a},h);for(let r=0;r<e.length;r++)e[r].sourceLayer=this,e[r].nodeIndex=this.inboundNodes.length-1,e[r].tensorIndex=r}getConfig(){const t={name:this.name,trainable:this.trainable};return null!=this.batchInputShape&&(t.batchInputShape=this.batchInputShape),null!=this.dtype&&(t.dtype=this.dtype),t}disposeWeights(){return this.weights.forEach(t=>t.dispose()),this.weights.length}assertNotDisposed(){if(0===this._refCount)throw new Error(`Layer '${this.name}' is already disposed.`)}dispose(){if(!this.built)throw new Error(`Cannot dispose Layer ${this.name} because it has not been `+\"built yet.\");if(null===this._refCount)throw new Error(`Cannot dispose Layer ${this.name} because it has not been used `+\"yet.\");this.assertNotDisposed();let t=0;return 0==--this._refCount&&(t=this.disposeWeights()),{refCountAfterDispose:this._refCount,numDisposedVariables:t}}}function y(t){t=r.toList(t);const e=[];for(const n of t)e.push(n.shape);return r.singletonOrArray(e)}function m(t){return\"float32\"}function w(t,e,n){if((null==e||null!=n&&n>0)&&(e=t.sourceLayer,n=t.nodeIndex),0===e.inboundNodes.length)return[t];{const t=e.inboundNodes[n];if(0===t.inboundLayers.length)return t.inputTensors;{const e=[];for(let n=0;n<t.inboundLayers.length;n++){const i=w(t.inputTensors[n],t.inboundLayers[n],t.nodeIndices[n]);for(const t of i)-1===e.indexOf(t)&&e.push(t)}return e}}}exports.Layer=g;"},"sourceMaps":{"js":{"mappings":[{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":0}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":13}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":20}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":35}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":43}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":56}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":57}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":64}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":68}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":76}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":92}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":94}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":102}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":108}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":116}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":121}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":129}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":144}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":152}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":167}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":13,"column":0},"generated":{"line":1,"column":169}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":13,"column":0},"generated":{"line":1,"column":173}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":13,"column":0},"generated":{"line":1,"column":175}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":13,"column":0},"generated":{"line":1,"column":183}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":15,"column":0},"generated":{"line":1,"column":208}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":15,"column":0},"generated":{"line":1,"column":210}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":15,"column":0},"generated":{"line":1,"column":218}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":16,"column":0},"generated":{"line":1,"column":238}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":16,"column":0},"generated":{"line":1,"column":240}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":16,"column":0},"generated":{"line":1,"column":248}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":18,"column":0},"generated":{"line":1,"column":261}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":18,"column":0},"generated":{"line":1,"column":263}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":18,"column":0},"generated":{"line":1,"column":271}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":19,"column":0},"generated":{"line":1,"column":284}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":19,"column":0},"generated":{"line":1,"column":286}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":19,"column":0},"generated":{"line":1,"column":294}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":23,"column":0},"generated":{"line":1,"column":313}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":23,"column":0},"generated":{"line":1,"column":315}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":23,"column":0},"generated":{"line":1,"column":317}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":23,"column":0},"generated":{"line":1,"column":325}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":24,"column":0},"generated":{"line":1,"column":352}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":24,"column":0},"generated":{"line":1,"column":354}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":24,"column":0},"generated":{"line":1,"column":356}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":24,"column":0},"generated":{"line":1,"column":364}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":25,"column":0},"generated":{"line":1,"column":389}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":25,"column":0},"generated":{"line":1,"column":391}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":25,"column":0},"generated":{"line":1,"column":393}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":25,"column":0},"generated":{"line":1,"column":401}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":26,"column":0},"generated":{"line":1,"column":429}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":26,"column":0},"generated":{"line":1,"column":431}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":26,"column":0},"generated":{"line":1,"column":439}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":455}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":464}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":468}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":471}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":490}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":498}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":505}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":510}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":514}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":516}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":520}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":528}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":535}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":537}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":548}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":555}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":558}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":560}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":569}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":571}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":574}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":577}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":580}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":582}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":593}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":600}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":602}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":605}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":612}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":615}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":632}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":635}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":654}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":656}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":662}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":663}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":671}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":674}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":678}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":680}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":684}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":687}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":690}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":692}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":696}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":699}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":706}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":708}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":712}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":715}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":719}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":721}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":724}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":726}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":733}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":749}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":756}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":781}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":785}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":789}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":794}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":796}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":799}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":806}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":816}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":831}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":836}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":838}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":841}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":842}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":846}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":848}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":850}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":857}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":882}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":884}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":887}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":892}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":896}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":898}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":903}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":905}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":910}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":917}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":932}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":934}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":936}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":939}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":941}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":944}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":946}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":949}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":956}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":958}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":966}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":968}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":971}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":973}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":977}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":979}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":982}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":58,"column":6},"generated":{"line":1,"column":984}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":58,"column":13},"generated":{"line":1,"column":990}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":72,"column":2},"generated":{"line":1,"column":992}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":72,"column":14},"generated":{"line":1,"column":1004}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":73,"column":9},"generated":{"line":1,"column":1007}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":73,"column":9},"generated":{"line":1,"column":1012}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":73,"column":17},"generated":{"line":1,"column":1018}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":73,"column":22},"generated":{"line":1,"column":1020}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":74,"column":9},"generated":{"line":1,"column":1026}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":74,"column":9},"generated":{"line":1,"column":1031}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":74,"column":17},"generated":{"line":1,"column":1037}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":74,"column":22},"generated":{"line":1,"column":1039}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":79,"column":22},"generated":{"line":1,"column":1045}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":79,"column":8},"generated":{"line":1,"column":1051}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":79,"column":13},"generated":{"line":1,"column":1053}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":80,"column":11},"generated":{"line":1,"column":1059}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":80,"column":11},"generated":{"line":1,"column":1064}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":80,"column":18},"generated":{"line":1,"column":1069}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":80,"column":23},"generated":{"line":1,"column":1071}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":80,"column":29},"generated":{"line":1,"column":1077}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":82,"column":11},"generated":{"line":1,"column":1084}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":82,"column":11},"generated":{"line":1,"column":1089}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":82,"column":18},"generated":{"line":1,"column":1094}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":82,"column":23},"generated":{"line":1,"column":1096}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":84,"column":9},"generated":{"line":1,"column":1101}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":84,"column":9},"generated":{"line":1,"column":1106}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":84,"column":19},"generated":{"line":1,"column":1114}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":84,"column":24},"generated":{"line":1,"column":1116}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":85,"column":9},"generated":{"line":1,"column":1124}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":85,"column":9},"generated":{"line":1,"column":1129}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":85,"column":19},"generated":{"line":1,"column":1137}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":85,"column":24},"generated":{"line":1,"column":1139}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":86,"column":9},"generated":{"line":1,"column":1147}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":86,"column":9},"generated":{"line":1,"column":1152}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":86,"column":16},"generated":{"line":1,"column":1157}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":86,"column":21},"generated":{"line":1,"column":1159}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":86,"column":29},"generated":{"line":1,"column":1165}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":1169}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":1177}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":1187}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":98,"column":6},"generated":{"line":1,"column":1189}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":98,"column":13},"generated":{"line":1,"column":1195}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":133,"column":2},"generated":{"line":1,"column":1197}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":134,"column":15},"generated":{"line":1,"column":1209}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":134,"column":41},"generated":{"line":1,"column":1211}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":135,"column":13},"generated":{"line":1,"column":1213}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":135,"column":42},"generated":{"line":1,"column":1215}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":136,"column":15},"generated":{"line":1,"column":1217}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":136,"column":33},"generated":{"line":1,"column":1219}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":137,"column":15},"generated":{"line":1,"column":1221}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":134,"column":15},"generated":{"line":1,"column":1224}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":134,"column":15},"generated":{"line":1,"column":1229}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":134,"column":15},"generated":{"line":1,"column":1235}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":134,"column":41},"generated":{"line":1,"column":1237}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":134,"column":41},"generated":{"line":1,"column":1242}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":134,"column":41},"generated":{"line":1,"column":1248}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":135,"column":13},"generated":{"line":1,"column":1250}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":135,"column":13},"generated":{"line":1,"column":1255}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":135,"column":13},"generated":{"line":1,"column":1267}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":135,"column":42},"generated":{"line":1,"column":1269}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":135,"column":42},"generated":{"line":1,"column":1274}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":135,"column":42},"generated":{"line":1,"column":1281}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":136,"column":15},"generated":{"line":1,"column":1283}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":136,"column":15},"generated":{"line":1,"column":1288}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":136,"column":15},"generated":{"line":1,"column":1297}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":137,"column":15},"generated":{"line":1,"column":1299}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":137,"column":15},"generated":{"line":1,"column":1304}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":137,"column":15},"generated":{"line":1,"column":1322}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":138,"column":9},"generated":{"line":1,"column":1324}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":138,"column":9},"generated":{"line":1,"column":1329}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":138,"column":14},"generated":{"line":1,"column":1333}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":138,"column":4},"generated":{"line":1,"column":1335}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":138,"column":4},"generated":{"line":1,"column":1337}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":139,"column":16},"generated":{"line":1,"column":1362}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":139,"column":8},"generated":{"line":1,"column":1368}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":140,"column":11},"generated":{"line":1,"column":1372}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":140,"column":11},"generated":{"line":1,"column":1377}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":140,"column":26},"generated":{"line":1,"column":1391}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":140,"column":46},"generated":{"line":1,"column":1393}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":140,"column":46},"generated":{"line":1,"column":1395}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":140,"column":46},"generated":{"line":1,"column":1416}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":141,"column":11},"generated":{"line":1,"column":1419}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":141,"column":11},"generated":{"line":1,"column":1424}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":141,"column":18},"generated":{"line":1,"column":1430}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":141,"column":38},"generated":{"line":1,"column":1432}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":141,"column":38},"generated":{"line":1,"column":1434}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":141,"column":38},"generated":{"line":1,"column":1455}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":141,"column":43},"generated":{"line":1,"column":1460}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":143,"column":9},"generated":{"line":1,"column":1475}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":143,"column":9},"generated":{"line":1,"column":1480}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":143,"column":16},"generated":{"line":1,"column":1485}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":143,"column":22},"generated":{"line":1,"column":1487}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":1495}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":1503}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":1518}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":204,"column":0},"generated":{"line":1,"column":1520}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":204,"column":4},"generated":{"line":1,"column":1524}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":204,"column":18},"generated":{"line":1,"column":1526}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":226,"column":6},"generated":{"line":1,"column":1528}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":226,"column":13},"generated":{"line":1,"column":1534}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":266,"column":2},"generated":{"line":1,"column":1536}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":267,"column":6},"generated":{"line":1,"column":1548}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":269,"column":13},"generated":{"line":1,"column":1550}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":269,"column":13},"generated":{"line":1,"column":1553}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":269,"column":13},"generated":{"line":1,"column":1558}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":269,"column":13},"generated":{"line":1,"column":1567}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":270,"column":9},"generated":{"line":1,"column":1569}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":270,"column":9},"generated":{"line":1,"column":1574}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":270,"column":14},"generated":{"line":1,"column":1577}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":278,"column":9},"generated":{"line":1,"column":1581}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":278,"column":9},"generated":{"line":1,"column":1586}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":278,"column":25},"generated":{"line":1,"column":1600}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":278,"column":30},"generated":{"line":1,"column":1602}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":288,"column":9},"generated":{"line":1,"column":1616}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":288,"column":9},"generated":{"line":1,"column":1621}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":288,"column":25},"generated":{"line":1,"column":1635}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":288,"column":30},"generated":{"line":1,"column":1637}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":290,"column":9},"generated":{"line":1,"column":1651}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":290,"column":9},"generated":{"line":1,"column":1656}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":290,"column":23},"generated":{"line":1,"column":1668}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":290,"column":28},"generated":{"line":1,"column":1670}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":292,"column":9},"generated":{"line":1,"column":1682}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":292,"column":9},"generated":{"line":1,"column":1687}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":292,"column":25},"generated":{"line":1,"column":1701}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":292,"column":30},"generated":{"line":1,"column":1703}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":300,"column":9},"generated":{"line":1,"column":1717}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":300,"column":9},"generated":{"line":1,"column":1722}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":300,"column":24},"generated":{"line":1,"column":1735}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":300,"column":29},"generated":{"line":1,"column":1737}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":302,"column":9},"generated":{"line":1,"column":1750}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":302,"column":9},"generated":{"line":1,"column":1755}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":302,"column":25},"generated":{"line":1,"column":1769}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":302,"column":30},"generated":{"line":1,"column":1771}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":308,"column":9},"generated":{"line":1,"column":1785}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":308,"column":9},"generated":{"line":1,"column":1790}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":308,"column":22},"generated":{"line":1,"column":1801}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":308,"column":27},"generated":{"line":1,"column":1803}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":310,"column":9},"generated":{"line":1,"column":1814}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":310,"column":9},"generated":{"line":1,"column":1819}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":310,"column":23},"generated":{"line":1,"column":1831}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":310,"column":28},"generated":{"line":1,"column":1833}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":315,"column":9},"generated":{"line":1,"column":1845}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":315,"column":9},"generated":{"line":1,"column":1850}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":315,"column":23},"generated":{"line":1,"column":1862}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":315,"column":28},"generated":{"line":1,"column":1864}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":317,"column":9},"generated":{"line":1,"column":1876}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":317,"column":9},"generated":{"line":1,"column":1881}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":317,"column":24},"generated":{"line":1,"column":1894}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":317,"column":29},"generated":{"line":1,"column":1896}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":320,"column":9},"generated":{"line":1,"column":1909}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":320,"column":9},"generated":{"line":1,"column":1913}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":320,"column":15},"generated":{"line":1,"column":1919}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":320,"column":24},"generated":{"line":1,"column":1924}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":320,"column":29},"generated":{"line":1,"column":1926}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":321,"column":19},"generated":{"line":1,"column":1940}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":321,"column":10},"generated":{"line":1,"column":1946}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":322,"column":8},"generated":{"line":1,"column":1949}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":322,"column":14},"generated":{"line":1,"column":1951}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":322,"column":28},"generated":{"line":1,"column":1965}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":322,"column":33},"generated":{"line":1,"column":1970}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":325,"column":4},"generated":{"line":1,"column":1976}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":325,"column":9},"generated":{"line":1,"column":1978}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":325,"column":23},"generated":{"line":1,"column":1992}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":325,"column":36},"generated":{"line":1,"column":2005}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":325,"column":41},"generated":{"line":1,"column":2010}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":328,"column":2},"generated":{"line":1,"column":2016}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":329,"column":10},"generated":{"line":1,"column":2028}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":329,"column":10},"generated":{"line":1,"column":2034}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":329,"column":35},"generated":{"line":1,"column":2036}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":330,"column":9},"generated":{"line":1,"column":2039}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":330,"column":9},"generated":{"line":1,"column":2043}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":330,"column":15},"generated":{"line":1,"column":2049}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":330,"column":24},"generated":{"line":1,"column":2054}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":330,"column":29},"generated":{"line":1,"column":2059}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":331,"column":19},"generated":{"line":1,"column":2073}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":331,"column":10},"generated":{"line":1,"column":2079}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":332,"column":8},"generated":{"line":1,"column":2081}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":332,"column":21},"generated":{"line":1,"column":2083}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":332,"column":26},"generated":{"line":1,"column":2088}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":332,"column":32},"generated":{"line":1,"column":2090}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":334,"column":8},"generated":{"line":1,"column":2096}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":334,"column":21},"generated":{"line":1,"column":2098}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":334,"column":26},"generated":{"line":1,"column":2103}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":337,"column":11},"generated":{"line":1,"column":2109}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":337,"column":11},"generated":{"line":1,"column":2115}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":338,"column":6},"generated":{"line":1,"column":2116}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":338,"column":21},"generated":{"line":1,"column":2130}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":338,"column":26},"generated":{"line":1,"column":2135}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":338,"column":42},"generated":{"line":1,"column":2149}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":338,"column":47},"generated":{"line":1,"column":2154}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":338,"column":61},"generated":{"line":1,"column":2168}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":338,"column":68},"generated":{"line":1,"column":2173}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":339,"column":6},"generated":{"line":1,"column":2178}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":339,"column":21},"generated":{"line":1,"column":2192}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":340,"column":6},"generated":{"line":1,"column":2194}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":340,"column":19},"generated":{"line":1,"column":2206}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":340,"column":24},"generated":{"line":1,"column":2211}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":341,"column":6},"generated":{"line":1,"column":2223}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":341,"column":21},"generated":{"line":1,"column":2237}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":341,"column":26},"generated":{"line":1,"column":2242}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":2258}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":2266}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":2271}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":394,"column":0},"generated":{"line":1,"column":2273}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":394,"column":4},"generated":{"line":1,"column":2277}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":394,"column":19},"generated":{"line":1,"column":2279}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":405,"column":6},"generated":{"line":1,"column":2281}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":405,"column":22},"generated":{"line":1,"column":2287}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":405,"column":36},"generated":{"line":1,"column":2297}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":405,"column":50},"generated":{"line":1,"column":2299}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":405,"column":50},"generated":{"line":1,"column":2313}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":456,"column":2},"generated":{"line":1,"column":2326}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":456,"column":14},"generated":{"line":1,"column":2338}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":456,"column":32},"generated":{"line":1,"column":2340}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":457,"column":4},"generated":{"line":1,"column":2344}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":435,"column":10},"generated":{"line":1,"column":2352}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":435,"column":10},"generated":{"line":1,"column":2357}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":435,"column":32},"generated":{"line":1,"column":2367}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":437,"column":10},"generated":{"line":1,"column":2372}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":437,"column":10},"generated":{"line":1,"column":2377}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":437,"column":40},"generated":{"line":1,"column":2395}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":445,"column":12},"generated":{"line":1,"column":2398}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":445,"column":12},"generated":{"line":1,"column":2403}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":445,"column":24},"generated":{"line":1,"column":2414}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":458,"column":9},"generated":{"line":1,"column":2416}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":458,"column":9},"generated":{"line":1,"column":2421}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":458,"column":14},"generated":{"line":1,"column":2424}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":460,"column":9},"generated":{"line":1,"column":2428}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":460,"column":9},"generated":{"line":1,"column":2433}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":460,"column":31},"generated":{"line":1,"column":2453}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":462,"column":9},"generated":{"line":1,"column":2458}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":462,"column":9},"generated":{"line":1,"column":2463}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":462,"column":21},"generated":{"line":1,"column":2473}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":463,"column":9},"generated":{"line":1,"column":2478}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":463,"column":9},"generated":{"line":1,"column":2483}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":463,"column":27},"generated":{"line":1,"column":2500}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":466,"column":9},"generated":{"line":1,"column":2502}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":466,"column":9},"generated":{"line":1,"column":2507}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":466,"column":29},"generated":{"line":1,"column":2525}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":467,"column":9},"generated":{"line":1,"column":2528}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":467,"column":9},"generated":{"line":1,"column":2533}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":467,"column":32},"generated":{"line":1,"column":2554}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":468,"column":9},"generated":{"line":1,"column":2557}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":468,"column":9},"generated":{"line":1,"column":2562}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":468,"column":19},"generated":{"line":1,"column":2570}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":469,"column":9},"generated":{"line":1,"column":2573}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":469,"column":9},"generated":{"line":1,"column":2578}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":469,"column":20},"generated":{"line":1,"column":2587}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":470,"column":9},"generated":{"line":1,"column":2590}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":470,"column":9},"generated":{"line":1,"column":2595}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":470,"column":18},"generated":{"line":1,"column":2603}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":476,"column":9},"generated":{"line":1,"column":2605}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":476,"column":9},"generated":{"line":1,"column":2610}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":476,"column":24},"generated":{"line":1,"column":2623}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":477,"column":9},"generated":{"line":1,"column":2626}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":477,"column":9},"generated":{"line":1,"column":2631}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":477,"column":25},"generated":{"line":1,"column":2645}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":479,"column":8},"generated":{"line":1,"column":2648}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":479,"column":8},"generated":{"line":1,"column":2652}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":479,"column":15},"generated":{"line":1,"column":2654}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":479,"column":20},"generated":{"line":1,"column":2656}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":480,"column":8},"generated":{"line":1,"column":2661}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":480,"column":9},"generated":{"line":1,"column":2665}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":480,"column":15},"generated":{"line":1,"column":2667}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":481,"column":12},"generated":{"line":1,"column":2668}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":481,"column":12},"generated":{"line":1,"column":2674}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":481,"column":21},"generated":{"line":1,"column":2676}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":481,"column":26},"generated":{"line":1,"column":2681}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":482,"column":6},"generated":{"line":1,"column":2696}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":482,"column":13},"generated":{"line":1,"column":2698}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":482,"column":27},"generated":{"line":1,"column":2700}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":482,"column":39},"generated":{"line":1,"column":2712}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":482,"column":49},"generated":{"line":1,"column":2715}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":482,"column":55},"generated":{"line":1,"column":2720}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":482,"column":62},"generated":{"line":1,"column":2722}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":482,"column":62},"generated":{"line":1,"column":2724}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":482,"column":62},"generated":{"line":1,"column":2732}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":488,"column":8},"generated":{"line":1,"column":2735}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":484,"column":9},"generated":{"line":1,"column":2738}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":484,"column":9},"generated":{"line":1,"column":2743}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":484,"column":16},"generated":{"line":1,"column":2748}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":486,"column":9},"generated":{"line":1,"column":2750}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":486,"column":9},"generated":{"line":1,"column":2755}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":486,"column":40},"generated":{"line":1,"column":2766}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":486,"column":22},"generated":{"line":1,"column":2772}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":486,"column":27},"generated":{"line":1,"column":2774}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":486,"column":54},"generated":{"line":1,"column":2785}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":486,"column":59},"generated":{"line":1,"column":2787}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":488,"column":27},"generated":{"line":1,"column":2797}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":488,"column":8},"generated":{"line":1,"column":2803}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":488,"column":13},"generated":{"line":1,"column":2805}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":488,"column":59},"generated":{"line":1,"column":2817}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":488,"column":35},"generated":{"line":1,"column":2823}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":488,"column":40},"generated":{"line":1,"column":2825}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":488,"column":65},"generated":{"line":1,"column":2841}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":493,"column":10},"generated":{"line":1,"column":2842}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":493,"column":10},"generated":{"line":1,"column":2846}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":494,"column":10},"generated":{"line":1,"column":2848}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":494,"column":34},"generated":{"line":1,"column":2851}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":494,"column":10},"generated":{"line":1,"column":2857}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":494,"column":15},"generated":{"line":1,"column":2859}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":495,"column":8},"generated":{"line":1,"column":2875}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":495,"column":26},"generated":{"line":1,"column":2877}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":495,"column":31},"generated":{"line":1,"column":2879}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":496,"column":13},"generated":{"line":1,"column":2900}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":496,"column":36},"generated":{"line":1,"column":2903}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":496,"column":17},"generated":{"line":1,"column":2909}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":496,"column":22},"generated":{"line":1,"column":2911}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":496,"column":42},"generated":{"line":1,"column":2922}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":497,"column":12},"generated":{"line":1,"column":2923}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":497,"column":12},"generated":{"line":1,"column":2927}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":497,"column":32},"generated":{"line":1,"column":2929}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":498,"column":30},"generated":{"line":1,"column":2934}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":498,"column":12},"generated":{"line":1,"column":2940}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":498,"column":17},"generated":{"line":1,"column":2942}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":499,"column":10},"generated":{"line":1,"column":2954}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":499,"column":22},"generated":{"line":1,"column":2956}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":499,"column":27},"generated":{"line":1,"column":2958}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":501,"column":8},"generated":{"line":1,"column":2969}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":501,"column":26},"generated":{"line":1,"column":2971}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":501,"column":27},"generated":{"line":1,"column":2972}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":501,"column":38},"generated":{"line":1,"column":2975}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":501,"column":45},"generated":{"line":1,"column":2982}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":501,"column":50},"generated":{"line":1,"column":2984}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":503,"column":11},"generated":{"line":1,"column":2996}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":503,"column":11},"generated":{"line":1,"column":3001}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":503,"column":29},"generated":{"line":1,"column":3017}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":506,"column":10},"generated":{"line":1,"column":3019}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":506,"column":10},"generated":{"line":1,"column":3023}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":506,"column":18},"generated":{"line":1,"column":3025}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":506,"column":23},"generated":{"line":1,"column":3027}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":507,"column":19},"generated":{"line":1,"column":3033}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":507,"column":10},"generated":{"line":1,"column":3039}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":508,"column":8},"generated":{"line":1,"column":3043}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":508,"column":16},"generated":{"line":1,"column":3045}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":508,"column":21},"generated":{"line":1,"column":3047}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":510,"column":19},"generated":{"line":1,"column":3059}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":510,"column":10},"generated":{"line":1,"column":3065}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":511,"column":8},"generated":{"line":1,"column":3069}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":511,"column":16},"generated":{"line":1,"column":3071}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":513,"column":11},"generated":{"line":1,"column":3082}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":513,"column":11},"generated":{"line":1,"column":3087}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":513,"column":19},"generated":{"line":1,"column":3093}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":516,"column":24},"generated":{"line":1,"column":3095}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":516,"column":8},"generated":{"line":1,"column":3101}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":516,"column":13},"generated":{"line":1,"column":3103}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":517,"column":11},"generated":{"line":1,"column":3111}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":517,"column":11},"generated":{"line":1,"column":3116}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":517,"column":28},"generated":{"line":1,"column":3131}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":517,"column":33},"generated":{"line":1,"column":3133}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":519,"column":11},"generated":{"line":1,"column":3141}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":519,"column":11},"generated":{"line":1,"column":3146}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":519,"column":28},"generated":{"line":1,"column":3161}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":524,"column":9},"generated":{"line":1,"column":3166}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":524,"column":9},"generated":{"line":1,"column":3171}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":524,"column":21},"generated":{"line":1,"column":3181}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":526,"column":9},"generated":{"line":1,"column":3186}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":526,"column":9},"generated":{"line":1,"column":3191}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":526,"column":37},"generated":{"line":1,"column":3218}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":538,"column":19},"generated":{"line":1,"column":3220}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":538,"column":27},"generated":{"line":1,"column":3235}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":538,"column":41},"generated":{"line":1,"column":3237}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":539,"column":11},"generated":{"line":1,"column":3240}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":539,"column":11},"generated":{"line":1,"column":3247}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":539,"column":17},"generated":{"line":1,"column":3249}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":539,"column":24},"generated":{"line":1,"column":3254}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":539,"column":33},"generated":{"line":1,"column":3261}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":539,"column":43},"generated":{"line":1,"column":3263}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":549,"column":10},"generated":{"line":1,"column":3274}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":549,"column":25},"generated":{"line":1,"column":3289}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":549,"column":44},"generated":{"line":1,"column":3291}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":550,"column":8},"generated":{"line":1,"column":3294}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":550,"column":37},"generated":{"line":1,"column":3297}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":550,"column":8},"generated":{"line":1,"column":3301}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":550,"column":13},"generated":{"line":1,"column":3306}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":550,"column":26},"generated":{"line":1,"column":3319}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":551,"column":12},"generated":{"line":1,"column":3326}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":551,"column":12},"generated":{"line":1,"column":3332}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":551,"column":16},"generated":{"line":1,"column":3336}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":551,"column":12},"generated":{"line":1,"column":3338}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":552,"column":10},"generated":{"line":1,"column":3351}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":553,"column":37},"generated":{"line":1,"column":3413}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":555,"column":8},"generated":{"line":1,"column":3419}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":555,"column":8},"generated":{"line":1,"column":3422}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":555,"column":13},"generated":{"line":1,"column":3427}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":555,"column":26},"generated":{"line":1,"column":3440}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":555,"column":36},"generated":{"line":1,"column":3448}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":556,"column":12},"generated":{"line":1,"column":3450}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":556,"column":12},"generated":{"line":1,"column":3456}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":556,"column":16},"generated":{"line":1,"column":3460}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":556,"column":12},"generated":{"line":1,"column":3462}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":557,"column":26},"generated":{"line":1,"column":3489}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":557,"column":46},"generated":{"line":1,"column":3502}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":558,"column":36},"generated":{"line":1,"column":3534}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":558,"column":41},"generated":{"line":1,"column":3539}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":558,"column":54},"generated":{"line":1,"column":3552}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":560,"column":11},"generated":{"line":1,"column":3577}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":560,"column":11},"generated":{"line":1,"column":3584}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":560,"column":16},"generated":{"line":1,"column":3589}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":560,"column":29},"generated":{"line":1,"column":3602}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":572,"column":2},"generated":{"line":1,"column":3605}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":572,"column":13},"generated":{"line":1,"column":3616}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":573,"column":11},"generated":{"line":1,"column":3619}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":573,"column":11},"generated":{"line":1,"column":3626}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":573,"column":25},"generated":{"line":1,"column":3628}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":574,"column":8},"generated":{"line":1,"column":3645}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":574,"column":13},"generated":{"line":1,"column":3650}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":574,"column":28},"generated":{"line":1,"column":3665}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":574,"column":39},"generated":{"line":1,"column":3667}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":574,"column":48},"generated":{"line":1,"column":3676}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":586,"column":2},"generated":{"line":1,"column":3690}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":586,"column":14},"generated":{"line":1,"column":3702}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":587,"column":11},"generated":{"line":1,"column":3705}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":587,"column":11},"generated":{"line":1,"column":3712}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":587,"column":25},"generated":{"line":1,"column":3714}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":588,"column":8},"generated":{"line":1,"column":3731}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":588,"column":13},"generated":{"line":1,"column":3736}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":588,"column":28},"generated":{"line":1,"column":3751}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":588,"column":39},"generated":{"line":1,"column":3753}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":588,"column":49},"generated":{"line":1,"column":3763}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":604,"column":6},"generated":{"line":1,"column":3778}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":605,"column":8},"generated":{"line":1,"column":3790}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":605,"column":8},"generated":{"line":1,"column":3793}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":605,"column":13},"generated":{"line":1,"column":3798}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":605,"column":26},"generated":{"line":1,"column":3811}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":605,"column":35},"generated":{"line":1,"column":3818}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":606,"column":12},"generated":{"line":1,"column":3820}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":606,"column":12},"generated":{"line":1,"column":3826}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":606,"column":16},"generated":{"line":1,"column":3830}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":606,"column":12},"generated":{"line":1,"column":3832}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":607,"column":19},"generated":{"line":1,"column":3856}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":607,"column":24},"generated":{"line":1,"column":3861}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":608,"column":10},"generated":{"line":1,"column":3868}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":612,"column":11},"generated":{"line":1,"column":3987}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":612,"column":44},"generated":{"line":1,"column":3990}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":612,"column":15},"generated":{"line":1,"column":3994}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":612,"column":20},"generated":{"line":1,"column":3999}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":612,"column":33},"generated":{"line":1,"column":4012}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":613,"column":12},"generated":{"line":1,"column":4019}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":613,"column":12},"generated":{"line":1,"column":4025}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":613,"column":16},"generated":{"line":1,"column":4029}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":613,"column":12},"generated":{"line":1,"column":4031}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":614,"column":19},"generated":{"line":1,"column":4055}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":614,"column":24},"generated":{"line":1,"column":4060}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":615,"column":10},"generated":{"line":1,"column":4067}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":617,"column":11},"generated":{"line":1,"column":4109}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":617,"column":11},"generated":{"line":1,"column":4116}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":617,"column":25},"generated":{"line":1,"column":4118}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":618,"column":8},"generated":{"line":1,"column":4135}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":618,"column":13},"generated":{"line":1,"column":4140}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":618,"column":28},"generated":{"line":1,"column":4155}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":618,"column":31},"generated":{"line":1,"column":4157}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":618,"column":40},"generated":{"line":1,"column":4166}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":632,"column":6},"generated":{"line":1,"column":4180}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":633,"column":8},"generated":{"line":1,"column":4193}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":633,"column":37},"generated":{"line":1,"column":4196}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":633,"column":8},"generated":{"line":1,"column":4200}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":633,"column":13},"generated":{"line":1,"column":4205}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":633,"column":26},"generated":{"line":1,"column":4218}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":634,"column":12},"generated":{"line":1,"column":4225}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":634,"column":12},"generated":{"line":1,"column":4231}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":634,"column":16},"generated":{"line":1,"column":4235}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":634,"column":12},"generated":{"line":1,"column":4237}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":635,"column":19},"generated":{"line":1,"column":4261}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":635,"column":24},"generated":{"line":1,"column":4266}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":636,"column":10},"generated":{"line":1,"column":4273}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":638,"column":8},"generated":{"line":1,"column":4299}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":638,"column":8},"generated":{"line":1,"column":4302}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":638,"column":13},"generated":{"line":1,"column":4307}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":638,"column":26},"generated":{"line":1,"column":4320}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":638,"column":35},"generated":{"line":1,"column":4327}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":639,"column":12},"generated":{"line":1,"column":4329}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":639,"column":12},"generated":{"line":1,"column":4335}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":639,"column":16},"generated":{"line":1,"column":4339}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":639,"column":12},"generated":{"line":1,"column":4341}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":640,"column":19},"generated":{"line":1,"column":4365}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":640,"column":24},"generated":{"line":1,"column":4370}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":641,"column":10},"generated":{"line":1,"column":4377}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":646,"column":11},"generated":{"line":1,"column":4498}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":646,"column":11},"generated":{"line":1,"column":4505}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":646,"column":25},"generated":{"line":1,"column":4507}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":647,"column":8},"generated":{"line":1,"column":4524}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":647,"column":13},"generated":{"line":1,"column":4529}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":647,"column":28},"generated":{"line":1,"column":4544}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":647,"column":31},"generated":{"line":1,"column":4546}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":647,"column":41},"generated":{"line":1,"column":4556}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":650,"column":6},"generated":{"line":1,"column":4571}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":651,"column":11},"generated":{"line":1,"column":4584}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":651,"column":11},"generated":{"line":1,"column":4591}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":651,"column":16},"generated":{"line":1,"column":4596}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":659,"column":2},"generated":{"line":1,"column":4604}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":664,"column":11},"generated":{"line":1,"column":4622}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":664,"column":11},"generated":{"line":1,"column":4629}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":664,"column":16},"generated":{"line":1,"column":4634}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":664,"column":23},"generated":{"line":1,"column":4641}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":664,"column":27},"generated":{"line":1,"column":4645}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":664,"column":37},"generated":{"line":1,"column":4648}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":667,"column":6},"generated":{"line":1,"column":4653}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":668,"column":11},"generated":{"line":1,"column":4667}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":668,"column":11},"generated":{"line":1,"column":4674}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":668,"column":16},"generated":{"line":1,"column":4679}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":671,"column":6},"generated":{"line":1,"column":4688}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":672,"column":11},"generated":{"line":1,"column":4700}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":672,"column":11},"generated":{"line":1,"column":4707}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":672,"column":16},"generated":{"line":1,"column":4712}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":675,"column":6},"generated":{"line":1,"column":4719}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":675,"column":12},"generated":{"line":1,"column":4729}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":676,"column":9},"generated":{"line":1,"column":4732}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":676,"column":9},"generated":{"line":1,"column":4737}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":676,"column":18},"generated":{"line":1,"column":4744}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":679,"column":6},"generated":{"line":1,"column":4746}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":680,"column":11},"generated":{"line":1,"column":4762}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":680,"column":11},"generated":{"line":1,"column":4769}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":680,"column":16},"generated":{"line":1,"column":4774}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":683,"column":6},"generated":{"line":1,"column":4785}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":683,"column":16},"generated":{"line":1,"column":4799}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":684,"column":9},"generated":{"line":1,"column":4802}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":684,"column":9},"generated":{"line":1,"column":4807}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":684,"column":27},"generated":{"line":1,"column":4825}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":684,"column":35},"generated":{"line":1,"column":4833}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":684,"column":40},"generated":{"line":1,"column":4836}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":684,"column":42},"generated":{"line":1,"column":4838}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":684,"column":54},"generated":{"line":1,"column":4848}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":685,"column":9},"generated":{"line":1,"column":4851}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":685,"column":9},"generated":{"line":1,"column":4856}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":685,"column":22},"generated":{"line":1,"column":4867}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":688,"column":6},"generated":{"line":1,"column":4869}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":689,"column":8},"generated":{"line":1,"column":4892}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":689,"column":8},"generated":{"line":1,"column":4899}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":689,"column":13},"generated":{"line":1,"column":4904}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":690,"column":13},"generated":{"line":1,"column":4915}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":690,"column":18},"generated":{"line":1,"column":4920}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":690,"column":36},"generated":{"line":1,"column":4938}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":690,"column":43},"generated":{"line":1,"column":4945}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":690,"column":48},"generated":{"line":1,"column":4948}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":690,"column":50},"generated":{"line":1,"column":4950}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":692,"column":13},"generated":{"line":1,"column":4961}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":696,"column":6},"generated":{"line":1,"column":4964}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":696,"column":23},"generated":{"line":1,"column":4985}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":697,"column":9},"generated":{"line":1,"column":4988}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":697,"column":9},"generated":{"line":1,"column":4993}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":697,"column":29},"generated":{"line":1,"column":5011}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":700,"column":6},"generated":{"line":1,"column":5013}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":701,"column":8},"generated":{"line":1,"column":5039}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":701,"column":8},"generated":{"line":1,"column":5046}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":701,"column":13},"generated":{"line":1,"column":5051}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":702,"column":13},"generated":{"line":1,"column":5061}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":702,"column":18},"generated":{"line":1,"column":5066}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":702,"column":36},"generated":{"line":1,"column":5084}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":702,"column":43},"generated":{"line":1,"column":5091}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":702,"column":49},"generated":{"line":1,"column":5095}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":702,"column":51},"generated":{"line":1,"column":5097}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":703,"column":11},"generated":{"line":1,"column":5108}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":703,"column":18},"generated":{"line":1,"column":5115}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":703,"column":23},"generated":{"line":1,"column":5120}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":705,"column":13},"generated":{"line":1,"column":5142}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":705,"column":18},"generated":{"line":1,"column":5147}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":705,"column":36},"generated":{"line":1,"column":5165}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":705,"column":43},"generated":{"line":1,"column":5172}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":705,"column":48},"generated":{"line":1,"column":5177}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":709,"column":6},"generated":{"line":1,"column":5199}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":709,"column":26},"generated":{"line":1,"column":5223}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":710,"column":9},"generated":{"line":1,"column":5226}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":710,"column":9},"generated":{"line":1,"column":5231}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":710,"column":32},"generated":{"line":1,"column":5252}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":717,"column":6},"generated":{"line":1,"column":5254}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":718,"column":11},"generated":{"line":1,"column":5268}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":718,"column":11},"generated":{"line":1,"column":5275}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":718,"column":16},"generated":{"line":1,"column":5280}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":718,"column":33},"generated":{"line":1,"column":5297}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":718,"column":40},"generated":{"line":1,"column":5304}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":718,"column":45},"generated":{"line":1,"column":5309}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":721,"column":6},"generated":{"line":1,"column":5330}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":722,"column":11},"generated":{"line":1,"column":5345}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":722,"column":11},"generated":{"line":1,"column":5352}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":722,"column":16},"generated":{"line":1,"column":5357}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":732,"column":2},"generated":{"line":1,"column":5367}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":733,"column":8},"generated":{"line":1,"column":5381}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":733,"column":9},"generated":{"line":1,"column":5385}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":733,"column":14},"generated":{"line":1,"column":5390}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":734,"column":12},"generated":{"line":1,"column":5399}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":734,"column":12},"generated":{"line":1,"column":5405}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":734,"column":16},"generated":{"line":1,"column":5409}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":735,"column":10},"generated":{"line":1,"column":5415}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":752,"column":12},"generated":{"line":1,"column":5487}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":752,"column":37},"generated":{"line":1,"column":5512}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":755,"column":8},"generated":{"line":1,"column":5515}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":754,"column":4},"generated":{"line":1,"column":5518}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":754,"column":13},"generated":{"line":1,"column":5520}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":754,"column":27},"generated":{"line":1,"column":5522}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":754,"column":34},"generated":{"line":1,"column":5529}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":755,"column":26},"generated":{"line":1,"column":5532}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":755,"column":8},"generated":{"line":1,"column":5538}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":755,"column":13},"generated":{"line":1,"column":5543}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":755,"column":60},"generated":{"line":1,"column":5554}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":755,"column":34},"generated":{"line":1,"column":5558}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":755,"column":39},"generated":{"line":1,"column":5563}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":755,"column":49},"generated":{"line":1,"column":5573}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":756,"column":6},"generated":{"line":1,"column":5580}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":758,"column":10},"generated":{"line":1,"column":5587}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":758,"column":10},"generated":{"line":1,"column":5593}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":758,"column":22},"generated":{"line":1,"column":5595}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":758,"column":36},"generated":{"line":1,"column":5597}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":758,"column":43},"generated":{"line":1,"column":5604}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":758,"column":48},"generated":{"line":1,"column":5609}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":759,"column":8},"generated":{"line":1,"column":5620}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":759,"column":8},"generated":{"line":1,"column":5623}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":759,"column":15},"generated":{"line":1,"column":5625}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":759,"column":26},"generated":{"line":1,"column":5634}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":759,"column":36},"generated":{"line":1,"column":5636}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":760,"column":12},"generated":{"line":1,"column":5643}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":760,"column":12},"generated":{"line":1,"column":5649}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":760,"column":16},"generated":{"line":1,"column":5653}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":760,"column":12},"generated":{"line":1,"column":5655}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":761,"column":19},"generated":{"line":1,"column":5675}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":761,"column":24},"generated":{"line":1,"column":5680}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":761,"column":40},"generated":{"line":1,"column":5696}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":761,"column":50},"generated":{"line":1,"column":5698}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":762,"column":29},"generated":{"line":1,"column":5735}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":762,"column":36},"generated":{"line":1,"column":5737}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":763,"column":29},"generated":{"line":1,"column":5781}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":765,"column":9},"generated":{"line":1,"column":5786}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":765,"column":9},"generated":{"line":1,"column":5790}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":765,"column":13},"generated":{"line":1,"column":5794}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":765,"column":26},"generated":{"line":1,"column":5796}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":765,"column":29},"generated":{"line":1,"column":5798}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":765,"column":42},"generated":{"line":1,"column":5800}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":765,"column":49},"generated":{"line":1,"column":5802}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":765,"column":57},"generated":{"line":1,"column":5809}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":765,"column":71},"generated":{"line":1,"column":5813}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":766,"column":12},"generated":{"line":1,"column":5814}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":766,"column":12},"generated":{"line":1,"column":5820}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":766,"column":16},"generated":{"line":1,"column":5822}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":766,"column":23},"generated":{"line":1,"column":5824}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":767,"column":12},"generated":{"line":1,"column":5827}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":767,"column":30},"generated":{"line":1,"column":5829}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":767,"column":40},"generated":{"line":1,"column":5831}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":768,"column":10},"generated":{"line":1,"column":5834}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":768,"column":18},"generated":{"line":1,"column":5837}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":768,"column":10},"generated":{"line":1,"column":5843}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":769,"column":8},"generated":{"line":1,"column":5845}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":773,"column":12},"generated":{"line":1,"column":5854}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":773,"column":12},"generated":{"line":1,"column":5860}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":773,"column":19},"generated":{"line":1,"column":5862}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":773,"column":21},"generated":{"line":1,"column":5864}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":774,"column":10},"generated":{"line":1,"column":5869}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":774,"column":23},"generated":{"line":1,"column":5872}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":774,"column":10},"generated":{"line":1,"column":5878}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":774,"column":15},"generated":{"line":1,"column":5880}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":775,"column":12},"generated":{"line":1,"column":5886}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":775,"column":21},"generated":{"line":1,"column":5890}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":775,"column":26},"generated":{"line":1,"column":5892}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":776,"column":16},"generated":{"line":1,"column":5897}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":776,"column":16},"generated":{"line":1,"column":5903}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":776,"column":20},"generated":{"line":1,"column":5907}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":776,"column":16},"generated":{"line":1,"column":5909}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":777,"column":23},"generated":{"line":1,"column":5929}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":777,"column":64},"generated":{"line":1,"column":5961}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":777,"column":69},"generated":{"line":1,"column":5966}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":778,"column":31},"generated":{"line":1,"column":5992}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":778,"column":36},"generated":{"line":1,"column":5994}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":778,"column":56},"generated":{"line":1,"column":6014}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":781,"column":10},"generated":{"line":1,"column":6019}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":781,"column":26},"generated":{"line":1,"column":6022}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":781,"column":10},"generated":{"line":1,"column":6028}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":781,"column":15},"generated":{"line":1,"column":6030}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":782,"column":12},"generated":{"line":1,"column":6039}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":782,"column":19},"generated":{"line":1,"column":6041}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":782,"column":24},"generated":{"line":1,"column":6043}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":783,"column":16},"generated":{"line":1,"column":6051}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":783,"column":16},"generated":{"line":1,"column":6057}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":783,"column":20},"generated":{"line":1,"column":6061}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":783,"column":16},"generated":{"line":1,"column":6063}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":784,"column":23},"generated":{"line":1,"column":6083}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":784,"column":64},"generated":{"line":1,"column":6115}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":784,"column":69},"generated":{"line":1,"column":6120}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":785,"column":37},"generated":{"line":1,"column":6150}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":785,"column":42},"generated":{"line":1,"column":6152}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":785,"column":65},"generated":{"line":1,"column":6175}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":788,"column":10},"generated":{"line":1,"column":6180}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":788,"column":26},"generated":{"line":1,"column":6183}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":788,"column":10},"generated":{"line":1,"column":6189}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":788,"column":15},"generated":{"line":1,"column":6191}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":789,"column":12},"generated":{"line":1,"column":6200}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":789,"column":19},"generated":{"line":1,"column":6202}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":789,"column":24},"generated":{"line":1,"column":6204}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":790,"column":16},"generated":{"line":1,"column":6212}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":790,"column":16},"generated":{"line":1,"column":6218}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":790,"column":20},"generated":{"line":1,"column":6222}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":790,"column":16},"generated":{"line":1,"column":6224}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":791,"column":23},"generated":{"line":1,"column":6244}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":791,"column":64},"generated":{"line":1,"column":6276}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":791,"column":69},"generated":{"line":1,"column":6281}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":792,"column":37},"generated":{"line":1,"column":6311}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":792,"column":42},"generated":{"line":1,"column":6313}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":792,"column":65},"generated":{"line":1,"column":6336}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":797,"column":10},"generated":{"line":1,"column":6342}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":797,"column":24},"generated":{"line":1,"column":6345}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":797,"column":10},"generated":{"line":1,"column":6351}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":797,"column":15},"generated":{"line":1,"column":6353}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":798,"column":12},"generated":{"line":1,"column":6360}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":798,"column":14},"generated":{"line":1,"column":6362}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":798,"column":24},"generated":{"line":1,"column":6370}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":798,"column":29},"generated":{"line":1,"column":6372}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":799,"column":16},"generated":{"line":1,"column":6378}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":799,"column":16},"generated":{"line":1,"column":6384}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":799,"column":20},"generated":{"line":1,"column":6388}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":799,"column":16},"generated":{"line":1,"column":6390}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":800,"column":23},"generated":{"line":1,"column":6410}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":800,"column":64},"generated":{"line":1,"column":6442}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":800,"column":69},"generated":{"line":1,"column":6447}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":801,"column":34},"generated":{"line":1,"column":6475}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":801,"column":39},"generated":{"line":1,"column":6477}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":801,"column":61},"generated":{"line":1,"column":6499}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":801,"column":63},"generated":{"line":1,"column":6501}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":806,"column":10},"generated":{"line":1,"column":6511}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":806,"column":10},"generated":{"line":1,"column":6514}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":806,"column":15},"generated":{"line":1,"column":6516}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":806,"column":21},"generated":{"line":1,"column":6521}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":807,"column":14},"generated":{"line":1,"column":6522}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":807,"column":14},"generated":{"line":1,"column":6528}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":807,"column":23},"generated":{"line":1,"column":6530}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":807,"column":25},"generated":{"line":1,"column":6532}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":808,"column":13},"generated":{"line":1,"column":6538}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":808,"column":13},"generated":{"line":1,"column":6542}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":808,"column":19},"generated":{"line":1,"column":6548}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":808,"column":26},"generated":{"line":1,"column":6553}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":808,"column":31},"generated":{"line":1,"column":6555}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":808,"column":37},"generated":{"line":1,"column":6560}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":809,"column":16},"generated":{"line":1,"column":6561}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":809,"column":16},"generated":{"line":1,"column":6567}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":809,"column":23},"generated":{"line":1,"column":6569}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":809,"column":30},"generated":{"line":1,"column":6576}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":810,"column":16},"generated":{"line":1,"column":6579}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":810,"column":24},"generated":{"line":1,"column":6581}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":810,"column":29},"generated":{"line":1,"column":6583}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":810,"column":34},"generated":{"line":1,"column":6588}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":814,"column":16},"generated":{"line":1,"column":6591}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":815,"column":14},"generated":{"line":1,"column":6593}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":815,"column":22},"generated":{"line":1,"column":6596}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":815,"column":26},"generated":{"line":1,"column":6598}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":815,"column":33},"generated":{"line":1,"column":6600}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":815,"column":41},"generated":{"line":1,"column":6603}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":815,"column":48},"generated":{"line":1,"column":6605}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":815,"column":55},"generated":{"line":1,"column":6607}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":815,"column":64},"generated":{"line":1,"column":6614}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":816,"column":14},"generated":{"line":1,"column":6617}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":816,"column":23},"generated":{"line":1,"column":6620}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":816,"column":14},"generated":{"line":1,"column":6626}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":816,"column":72},"generated":{"line":1,"column":6630}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":816,"column":31},"generated":{"line":1,"column":6634}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":816,"column":32},"generated":{"line":1,"column":6635}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":816,"column":39},"generated":{"line":1,"column":6637}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":816,"column":45},"generated":{"line":1,"column":6643}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":816,"column":53},"generated":{"line":1,"column":6651}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":817,"column":18},"generated":{"line":1,"column":6654}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":817,"column":18},"generated":{"line":1,"column":6660}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":817,"column":22},"generated":{"line":1,"column":6664}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":817,"column":18},"generated":{"line":1,"column":6666}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":818,"column":25},"generated":{"line":1,"column":6686}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":819,"column":19},"generated":{"line":1,"column":6721}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":819,"column":24},"generated":{"line":1,"column":6726}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":819,"column":47},"generated":{"line":1,"column":6749}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":820,"column":30},"generated":{"line":1,"column":6786}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":820,"column":53},"generated":{"line":1,"column":6805}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":826,"column":10},"generated":{"line":1,"column":6812}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":826,"column":24},"generated":{"line":1,"column":6815}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":826,"column":10},"generated":{"line":1,"column":6821}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":826,"column":15},"generated":{"line":1,"column":6823}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":827,"column":13},"generated":{"line":1,"column":6829}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":827,"column":13},"generated":{"line":1,"column":6833}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":827,"column":17},"generated":{"line":1,"column":6837}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":827,"column":21},"generated":{"line":1,"column":6839}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":827,"column":24},"generated":{"line":1,"column":6841}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":827,"column":28},"generated":{"line":1,"column":6843}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":827,"column":33},"generated":{"line":1,"column":6845}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":827,"column":39},"generated":{"line":1,"column":6851}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":827,"column":49},"generated":{"line":1,"column":6860}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":827,"column":52},"generated":{"line":1,"column":6862}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":828,"column":16},"generated":{"line":1,"column":6863}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":828,"column":16},"generated":{"line":1,"column":6869}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":828,"column":26},"generated":{"line":1,"column":6871}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":828,"column":31},"generated":{"line":1,"column":6873}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":828,"column":37},"generated":{"line":1,"column":6879}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":829,"column":16},"generated":{"line":1,"column":6882}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":829,"column":22},"generated":{"line":1,"column":6884}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":829,"column":24},"generated":{"line":1,"column":6886}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":829,"column":30},"generated":{"line":1,"column":6892}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":830,"column":14},"generated":{"line":1,"column":6895}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":830,"column":25},"generated":{"line":1,"column":6898}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":830,"column":14},"generated":{"line":1,"column":6904}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":830,"column":40},"generated":{"line":1,"column":6907}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":830,"column":33},"generated":{"line":1,"column":6913}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":831,"column":16},"generated":{"line":1,"column":6916}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":831,"column":28},"generated":{"line":1,"column":6920}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":832,"column":20},"generated":{"line":1,"column":6922}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":832,"column":20},"generated":{"line":1,"column":6928}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":832,"column":24},"generated":{"line":1,"column":6932}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":832,"column":20},"generated":{"line":1,"column":6934}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":833,"column":27},"generated":{"line":1,"column":6954}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":834,"column":21},"generated":{"line":1,"column":6989}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":834,"column":26},"generated":{"line":1,"column":6994}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":834,"column":50},"generated":{"line":1,"column":7018}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":834,"column":55},"generated":{"line":1,"column":7020}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":835,"column":33},"generated":{"line":1,"column":7045}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":835,"column":35},"generated":{"line":1,"column":7047}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":851,"column":2},"generated":{"line":1,"column":7059}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":851,"column":7},"generated":{"line":1,"column":7064}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":851,"column":32},"generated":{"line":1,"column":7066}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":852,"column":11},"generated":{"line":1,"column":7069}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":852,"column":11},"generated":{"line":1,"column":7076}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":855,"column":12},"generated":{"line":1,"column":7078}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":855,"column":27},"generated":{"line":1,"column":7093}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":855,"column":52},"generated":{"line":1,"column":7095}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":856,"column":26},"generated":{"line":1,"column":7098}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":856,"column":8},"generated":{"line":1,"column":7104}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":856,"column":13},"generated":{"line":1,"column":7109}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":857,"column":11},"generated":{"line":1,"column":7120}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":857,"column":11},"generated":{"line":1,"column":7125}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":857,"column":21},"generated":{"line":1,"column":7135}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":857,"column":29},"generated":{"line":1,"column":7137}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":866,"column":2},"generated":{"line":1,"column":7140}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":866,"column":14},"generated":{"line":1,"column":7152}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":867,"column":9},"generated":{"line":1,"column":7155}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":867,"column":9},"generated":{"line":1,"column":7160}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":867,"column":21},"generated":{"line":1,"column":7170}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":874,"column":2},"generated":{"line":1,"column":7172}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":875,"column":9},"generated":{"line":1,"column":7188}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":875,"column":9},"generated":{"line":1,"column":7193}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":875,"column":21},"generated":{"line":1,"column":7203}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":947,"column":2},"generated":{"line":1,"column":7208}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":948,"column":6},"generated":{"line":1,"column":7214}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":949,"column":6},"generated":{"line":1,"column":7216}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":950,"column":4},"generated":{"line":1,"column":7219}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":950,"column":13},"generated":{"line":1,"column":7221}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":950,"column":23},"generated":{"line":1,"column":7224}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":952,"column":9},"generated":{"line":1,"column":7227}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":952,"column":9},"generated":{"line":1,"column":7232}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":955,"column":10},"generated":{"line":1,"column":7252}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":955,"column":10},"generated":{"line":1,"column":7258}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":955,"column":23},"generated":{"line":1,"column":7260}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":955,"column":37},"generated":{"line":1,"column":7262}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":955,"column":44},"generated":{"line":1,"column":7269}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":957,"column":8},"generated":{"line":1,"column":7272}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":957,"column":8},"generated":{"line":1,"column":7276}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":957,"column":25},"generated":{"line":1,"column":7279}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":958,"column":9},"generated":{"line":1,"column":7281}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":958,"column":9},"generated":{"line":1,"column":7285}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":958,"column":15},"generated":{"line":1,"column":7291}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":958,"column":24},"generated":{"line":1,"column":7296}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":959,"column":10},"generated":{"line":1,"column":7298}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":959,"column":12},"generated":{"line":1,"column":7303}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":959,"column":29},"generated":{"line":1,"column":7316}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":959,"column":46},"generated":{"line":1,"column":7319}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":960,"column":8},"generated":{"line":1,"column":7320}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":960,"column":25},"generated":{"line":1,"column":7323}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":961,"column":8},"generated":{"line":1,"column":7325}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":964,"column":8},"generated":{"line":1,"column":7331}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":964,"column":8},"generated":{"line":1,"column":7335}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":964,"column":26},"generated":{"line":1,"column":7338}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":965,"column":9},"generated":{"line":1,"column":7340}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":965,"column":9},"generated":{"line":1,"column":7344}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":965,"column":15},"generated":{"line":1,"column":7350}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":965,"column":24},"generated":{"line":1,"column":7355}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":966,"column":10},"generated":{"line":1,"column":7357}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":966,"column":10},"generated":{"line":1,"column":7360}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":966,"column":27},"generated":{"line":1,"column":7373}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":966,"column":43},"generated":{"line":1,"column":7375}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":967,"column":8},"generated":{"line":1,"column":7376}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":967,"column":26},"generated":{"line":1,"column":7379}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":968,"column":8},"generated":{"line":1,"column":7381}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":972,"column":8},"generated":{"line":1,"column":7387}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":972,"column":8},"generated":{"line":1,"column":7390}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":972,"column":27},"generated":{"line":1,"column":7394}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":973,"column":12},"generated":{"line":1,"column":7396}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":973,"column":12},"generated":{"line":1,"column":7402}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":973,"column":16},"generated":{"line":1,"column":7406}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":973,"column":12},"generated":{"line":1,"column":7408}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":974,"column":10},"generated":{"line":1,"column":7419}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":979,"column":11},"generated":{"line":1,"column":7486}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":979,"column":11},"generated":{"line":1,"column":7493}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":979,"column":21},"generated":{"line":1,"column":7495}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":979,"column":21},"generated":{"line":1,"column":7497}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":979,"column":21},"generated":{"line":1,"column":7508}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":979,"column":26},"generated":{"line":1,"column":7513}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":979,"column":32},"generated":{"line":1,"column":7518}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":981,"column":10},"generated":{"line":1,"column":7523}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":981,"column":11},"generated":{"line":1,"column":7527}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":981,"column":16},"generated":{"line":1,"column":7532}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":981,"column":23},"generated":{"line":1,"column":7538}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":986,"column":13},"generated":{"line":1,"column":7539}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":986,"column":13},"generated":{"line":1,"column":7544}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":986,"column":38},"generated":{"line":1,"column":7569}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":989,"column":14},"generated":{"line":1,"column":7572}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":989,"column":14},"generated":{"line":1,"column":7578}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":989,"column":37},"generated":{"line":1,"column":7580}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":990,"column":13},"generated":{"line":1,"column":7583}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":990,"column":13},"generated":{"line":1,"column":7587}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":990,"column":19},"generated":{"line":1,"column":7593}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":990,"column":28},"generated":{"line":1,"column":7598}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":990,"column":42},"generated":{"line":1,"column":7600}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":990,"column":49},"generated":{"line":1,"column":7607}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":991,"column":10},"generated":{"line":1,"column":7610}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":991,"column":22},"generated":{"line":1,"column":7612}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":991,"column":27},"generated":{"line":1,"column":7617}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":991,"column":33},"generated":{"line":1,"column":7619}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":993,"column":13},"generated":{"line":1,"column":7626}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":993,"column":13},"generated":{"line":1,"column":7631}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":993,"column":19},"generated":{"line":1,"column":7637}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":993,"column":33},"generated":{"line":1,"column":7639}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":993,"column":50},"generated":{"line":1,"column":7656}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":994,"column":13},"generated":{"line":1,"column":7660}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":994,"column":13},"generated":{"line":1,"column":7665}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":994,"column":21},"generated":{"line":1,"column":7672}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":997,"column":12},"generated":{"line":1,"column":7674}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":997,"column":17},"generated":{"line":1,"column":7679}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":998,"column":15},"generated":{"line":1,"column":7695}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":998,"column":15},"generated":{"line":1,"column":7700}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":998,"column":26},"generated":{"line":1,"column":7711}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":998,"column":31},"generated":{"line":1,"column":7716}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1001,"column":31},"generated":{"line":1,"column":7732}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1001,"column":12},"generated":{"line":1,"column":7739}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1001,"column":17},"generated":{"line":1,"column":7744}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1001,"column":39},"generated":{"line":1,"column":7755}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1005,"column":15},"generated":{"line":1,"column":7759}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1005,"column":15},"generated":{"line":1,"column":7764}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1005,"column":27},"generated":{"line":1,"column":7774}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1019,"column":10},"generated":{"line":1,"column":7777}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1013,"column":11},"generated":{"line":1,"column":7780}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1013,"column":11},"generated":{"line":1,"column":7785}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1013,"column":36},"generated":{"line":1,"column":7810}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1019,"column":10},"generated":{"line":1,"column":7813}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1019,"column":27},"generated":{"line":1,"column":7815}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1020,"column":12},"generated":{"line":1,"column":7816}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1020,"column":12},"generated":{"line":1,"column":7820}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1020,"column":21},"generated":{"line":1,"column":7822}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1020,"column":26},"generated":{"line":1,"column":7827}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1020,"column":31},"generated":{"line":1,"column":7832}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1020,"column":60},"generated":{"line":1,"column":7834}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1025,"column":14},"generated":{"line":1,"column":7837}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1025,"column":14},"generated":{"line":1,"column":7843}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1025,"column":37},"generated":{"line":1,"column":7845}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1025,"column":51},"generated":{"line":1,"column":7847}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1025,"column":58},"generated":{"line":1,"column":7854}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1026,"column":14},"generated":{"line":1,"column":7857}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1026,"column":41},"generated":{"line":1,"column":7859}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1029,"column":13},"generated":{"line":1,"column":7862}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1029,"column":13},"generated":{"line":1,"column":7866}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1029,"column":17},"generated":{"line":1,"column":7870}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1029,"column":22},"generated":{"line":1,"column":7875}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1030,"column":41},"generated":{"line":1,"column":7878}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1030,"column":14},"generated":{"line":1,"column":7882}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1030,"column":25},"generated":{"line":1,"column":7884}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1030,"column":33},"generated":{"line":1,"column":7892}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1031,"column":12},"generated":{"line":1,"column":7897}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1031,"column":16},"generated":{"line":1,"column":7899}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1031,"column":18},"generated":{"line":1,"column":7901}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1033,"column":10},"generated":{"line":1,"column":7910}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1033,"column":25},"generated":{"line":1,"column":7912}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1033,"column":30},"generated":{"line":1,"column":7917}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1037,"column":12},"generated":{"line":1,"column":7920}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1035,"column":8},"generated":{"line":1,"column":7923}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1035,"column":17},"generated":{"line":1,"column":7925}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1035,"column":31},"generated":{"line":1,"column":7927}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1035,"column":48},"generated":{"line":1,"column":7944}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1037,"column":40},"generated":{"line":1,"column":7947}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1037,"column":12},"generated":{"line":1,"column":7953}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1037,"column":17},"generated":{"line":1,"column":7958}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1038,"column":16},"generated":{"line":1,"column":7978}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1038,"column":16},"generated":{"line":1,"column":7984}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1038,"column":20},"generated":{"line":1,"column":7988}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1038,"column":16},"generated":{"line":1,"column":7990}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1039,"column":14},"generated":{"line":1,"column":8010}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1044,"column":15},"generated":{"line":1,"column":8095}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1044,"column":15},"generated":{"line":1,"column":8102}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1045,"column":13},"generated":{"line":1,"column":8104}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1046,"column":14},"generated":{"line":1,"column":8105}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1046,"column":14},"generated":{"line":1,"column":8111}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1046,"column":27},"generated":{"line":1,"column":8113}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1046,"column":45},"generated":{"line":1,"column":8115}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1047,"column":14},"generated":{"line":1,"column":8118}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1047,"column":28},"generated":{"line":1,"column":8120}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1047,"column":33},"generated":{"line":1,"column":8125}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1047,"column":52},"generated":{"line":1,"column":8144}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1048,"column":12},"generated":{"line":1,"column":8147}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1048,"column":12},"generated":{"line":1,"column":8151}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1049,"column":14},"generated":{"line":1,"column":8153}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1049,"column":14},"generated":{"line":1,"column":8159}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1049,"column":28},"generated":{"line":1,"column":8161}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1049,"column":45},"generated":{"line":1,"column":8163}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1081,"column":12},"generated":{"line":1,"column":8166}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1050,"column":13},"generated":{"line":1,"column":8169}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1050,"column":13},"generated":{"line":1,"column":8174}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1051,"column":12},"generated":{"line":1,"column":8203}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1051,"column":18},"generated":{"line":1,"column":8209}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1051,"column":26},"generated":{"line":1,"column":8217}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1051,"column":36},"generated":{"line":1,"column":8220}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1051,"column":47},"generated":{"line":1,"column":8222}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1052,"column":36},"generated":{"line":1,"column":8225}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1057,"column":10},"generated":{"line":1,"column":8228}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1054,"column":27},"generated":{"line":1,"column":8230}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1054,"column":12},"generated":{"line":1,"column":8236}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1054,"column":35},"generated":{"line":1,"column":8239}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1054,"column":47},"generated":{"line":1,"column":8241}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1054,"column":56},"generated":{"line":1,"column":8248}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1055,"column":12},"generated":{"line":1,"column":8251}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1055,"column":18},"generated":{"line":1,"column":8257}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1055,"column":26},"generated":{"line":1,"column":8265}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1055,"column":38},"generated":{"line":1,"column":8267}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1057,"column":20},"generated":{"line":1,"column":8271}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1058,"column":24},"generated":{"line":1,"column":8273}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1059,"column":27},"generated":{"line":1,"column":8277}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1059,"column":28},"generated":{"line":1,"column":8278}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1059,"column":35},"generated":{"line":1,"column":8280}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1059,"column":45},"generated":{"line":1,"column":8284}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1059,"column":49},"generated":{"line":1,"column":8288}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1060,"column":31},"generated":{"line":1,"column":8290}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1060,"column":44},"generated":{"line":1,"column":8292}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1060,"column":51},"generated":{"line":1,"column":8294}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1061,"column":31},"generated":{"line":1,"column":8299}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1061,"column":45},"generated":{"line":1,"column":8301}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1061,"column":52},"generated":{"line":1,"column":8308}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1061,"column":61},"generated":{"line":1,"column":8311}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1061,"column":69},"generated":{"line":1,"column":8313}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1061,"column":74},"generated":{"line":1,"column":8318}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1062,"column":31},"generated":{"line":1,"column":8323}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1064,"column":19},"generated":{"line":1,"column":8327}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1064,"column":23},"generated":{"line":1,"column":8331}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1065,"column":14},"generated":{"line":1,"column":8333}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1065,"column":27},"generated":{"line":1,"column":8335}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1065,"column":49},"generated":{"line":1,"column":8337}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1066,"column":14},"generated":{"line":1,"column":8342}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1066,"column":28},"generated":{"line":1,"column":8344}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1066,"column":35},"generated":{"line":1,"column":8351}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1066,"column":44},"generated":{"line":1,"column":8354}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1066,"column":52},"generated":{"line":1,"column":8356}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1066,"column":57},"generated":{"line":1,"column":8361}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1076,"column":13},"generated":{"line":1,"column":8367}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1076,"column":13},"generated":{"line":1,"column":8372}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1077,"column":12},"generated":{"line":1,"column":8387}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1077,"column":57},"generated":{"line":1,"column":8389}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1077,"column":65},"generated":{"line":1,"column":8391}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1077,"column":71},"generated":{"line":1,"column":8396}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1078,"column":12},"generated":{"line":1,"column":8401}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1078,"column":24},"generated":{"line":1,"column":8403}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1078,"column":37},"generated":{"line":1,"column":8405}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1079,"column":13},"generated":{"line":1,"column":8408}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1079,"column":13},"generated":{"line":1,"column":8413}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1081,"column":40},"generated":{"line":1,"column":8425}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1081,"column":12},"generated":{"line":1,"column":8431}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1081,"column":17},"generated":{"line":1,"column":8436}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1082,"column":16},"generated":{"line":1,"column":8456}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1082,"column":16},"generated":{"line":1,"column":8462}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1082,"column":20},"generated":{"line":1,"column":8466}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1082,"column":16},"generated":{"line":1,"column":8468}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1083,"column":14},"generated":{"line":1,"column":8488}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1087,"column":15},"generated":{"line":1,"column":8573}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1087,"column":15},"generated":{"line":1,"column":8580}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1099,"column":12},"generated":{"line":1,"column":8585}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1099,"column":41},"generated":{"line":1,"column":8614}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1100,"column":8},"generated":{"line":1,"column":8617}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1100,"column":32},"generated":{"line":1,"column":8620}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1100,"column":8},"generated":{"line":1,"column":8626}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1100,"column":13},"generated":{"line":1,"column":8631}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1102,"column":11},"generated":{"line":1,"column":8647}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1102,"column":15},"generated":{"line":1,"column":8650}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1102,"column":26},"generated":{"line":1,"column":8652}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1102,"column":37},"generated":{"line":1,"column":8661}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1102,"column":42},"generated":{"line":1,"column":8666}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1102,"column":58},"generated":{"line":1,"column":8682}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1103,"column":6},"generated":{"line":1,"column":8689}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1103,"column":14},"generated":{"line":1,"column":8697}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1104,"column":10},"generated":{"line":1,"column":8702}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1105,"column":13},"generated":{"line":1,"column":8754}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1105,"column":18},"generated":{"line":1,"column":8759}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1105,"column":28},"generated":{"line":1,"column":8769}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1106,"column":30},"generated":{"line":1,"column":8823}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1106,"column":35},"generated":{"line":1,"column":8828}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1106,"column":45},"generated":{"line":1,"column":8838}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1106,"column":50},"generated":{"line":1,"column":8843}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1107,"column":26},"generated":{"line":1,"column":8880}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1107,"column":31},"generated":{"line":1,"column":8885}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1108,"column":11},"generated":{"line":1,"column":8897}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1109,"column":10},"generated":{"line":1,"column":8898}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1109,"column":10},"generated":{"line":1,"column":8902}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1109,"column":24},"generated":{"line":1,"column":8905}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1110,"column":11},"generated":{"line":1,"column":8907}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1110,"column":11},"generated":{"line":1,"column":8912}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1110,"column":27},"generated":{"line":1,"column":8928}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1110,"column":35},"generated":{"line":1,"column":8936}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1110,"column":36},"generated":{"line":1,"column":8937}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1110,"column":47},"generated":{"line":1,"column":8939}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1111,"column":25},"generated":{"line":1,"column":8944}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1111,"column":12},"generated":{"line":1,"column":8950}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1111,"column":50},"generated":{"line":1,"column":8953}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1111,"column":33},"generated":{"line":1,"column":8959}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1111,"column":44},"generated":{"line":1,"column":8961}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1112,"column":12},"generated":{"line":1,"column":8965}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1112,"column":23},"generated":{"line":1,"column":8967}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1112,"column":30},"generated":{"line":1,"column":8972}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1113,"column":10},"generated":{"line":1,"column":8976}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1113,"column":24},"generated":{"line":1,"column":8979}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1116,"column":10},"generated":{"line":1,"column":8984}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1117,"column":8},"generated":{"line":1,"column":8987}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1117,"column":16},"generated":{"line":1,"column":8995}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1118,"column":12},"generated":{"line":1,"column":9000}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1119,"column":16},"generated":{"line":1,"column":9037}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1119,"column":21},"generated":{"line":1,"column":9042}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1119,"column":31},"generated":{"line":1,"column":9052}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1120,"column":46},"generated":{"line":1,"column":9102}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1120,"column":51},"generated":{"line":1,"column":9107}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1121,"column":15},"generated":{"line":1,"column":9119}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1121,"column":20},"generated":{"line":1,"column":9124}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1121,"column":30},"generated":{"line":1,"column":9134}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1121,"column":35},"generated":{"line":1,"column":9139}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1138,"column":6},"generated":{"line":1,"column":9160}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1139,"column":8},"generated":{"line":1,"column":9178}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1139,"column":29},"generated":{"line":1,"column":9181}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1139,"column":8},"generated":{"line":1,"column":9187}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1139,"column":13},"generated":{"line":1,"column":9192}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1139,"column":66},"generated":{"line":1,"column":9206}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1139,"column":37},"generated":{"line":1,"column":9210}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1139,"column":42},"generated":{"line":1,"column":9215}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1139,"column":55},"generated":{"line":1,"column":9228}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1140,"column":12},"generated":{"line":1,"column":9235}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1140,"column":12},"generated":{"line":1,"column":9241}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1140,"column":16},"generated":{"line":1,"column":9245}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1140,"column":12},"generated":{"line":1,"column":9247}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1141,"column":23},"generated":{"line":1,"column":9275}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1141,"column":28},"generated":{"line":1,"column":9280}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1142,"column":10},"generated":{"line":1,"column":9326}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1144,"column":10},"generated":{"line":1,"column":9351}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1144,"column":10},"generated":{"line":1,"column":9357}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1144,"column":38},"generated":{"line":1,"column":9359}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1145,"column":9},"generated":{"line":1,"column":9362}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1145,"column":9},"generated":{"line":1,"column":9366}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1145,"column":15},"generated":{"line":1,"column":9372}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1145,"column":23},"generated":{"line":1,"column":9377}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1145,"column":28},"generated":{"line":1,"column":9382}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1145,"column":42},"generated":{"line":1,"column":9395}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1146,"column":12},"generated":{"line":1,"column":9396}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1146,"column":12},"generated":{"line":1,"column":9402}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1146,"column":26},"generated":{"line":1,"column":9404}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1146,"column":31},"generated":{"line":1,"column":9409}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1146,"column":41},"generated":{"line":1,"column":9419}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1146,"column":46},"generated":{"line":1,"column":9421}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1147,"column":52},"generated":{"line":1,"column":9436}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1147,"column":10},"generated":{"line":1,"column":9440}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1147,"column":26},"generated":{"line":1,"column":9442}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1147,"column":34},"generated":{"line":1,"column":9450}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1148,"column":8},"generated":{"line":1,"column":9454}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1148,"column":24},"generated":{"line":1,"column":9456}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1148,"column":29},"generated":{"line":1,"column":9461}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1151,"column":8},"generated":{"line":1,"column":9464}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1151,"column":35},"generated":{"line":1,"column":9467}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1151,"column":8},"generated":{"line":1,"column":9471}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1151,"column":24},"generated":{"line":1,"column":9473}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1151,"column":38},"generated":{"line":1,"column":9480}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1152,"column":12},"generated":{"line":1,"column":9481}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1152,"column":12},"generated":{"line":1,"column":9487}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1152,"column":27},"generated":{"line":1,"column":9489}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1152,"column":32},"generated":{"line":1,"column":9494}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1152,"column":45},"generated":{"line":1,"column":9507}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1152,"column":48},"generated":{"line":1,"column":9510}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1153,"column":10},"generated":{"line":1,"column":9523}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1153,"column":10},"generated":{"line":1,"column":9530}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1153,"column":16},"generated":{"line":1,"column":9536}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1153,"column":24},"generated":{"line":1,"column":9544}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1153,"column":41},"generated":{"line":1,"column":9548}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1153,"column":47},"generated":{"line":1,"column":9554}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1153,"column":55},"generated":{"line":1,"column":9562}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1153,"column":68},"generated":{"line":1,"column":9564}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1154,"column":34},"generated":{"line":1,"column":9569}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1154,"column":10},"generated":{"line":1,"column":9573}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1154,"column":23},"generated":{"line":1,"column":9575}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1155,"column":16},"generated":{"line":1,"column":9582}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1155,"column":41},"generated":{"line":1,"column":9584}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1157,"column":15},"generated":{"line":1,"column":9587}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1161,"column":12},"generated":{"line":1,"column":9589}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1161,"column":12},"generated":{"line":1,"column":9595}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1161,"column":16},"generated":{"line":1,"column":9599}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1161,"column":12},"generated":{"line":1,"column":9601}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1162,"column":23},"generated":{"line":1,"column":9629}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1162,"column":28},"generated":{"line":1,"column":9634}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1163,"column":10},"generated":{"line":1,"column":9684}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1179,"column":2},"generated":{"line":1,"column":9767}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1180,"column":8},"generated":{"line":1,"column":9781}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1180,"column":9},"generated":{"line":1,"column":9785}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1180,"column":14},"generated":{"line":1,"column":9790}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1181,"column":12},"generated":{"line":1,"column":9796}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1181,"column":12},"generated":{"line":1,"column":9802}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1181,"column":16},"generated":{"line":1,"column":9806}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1181,"column":12},"generated":{"line":1,"column":9808}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1182,"column":48},"generated":{"line":1,"column":9859}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1182,"column":53},"generated":{"line":1,"column":9864}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1183,"column":10},"generated":{"line":1,"column":9873}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1186,"column":11},"generated":{"line":1,"column":9958}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1186,"column":11},"generated":{"line":1,"column":9965}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1186,"column":26},"generated":{"line":1,"column":9967}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1186,"column":47},"generated":{"line":1,"column":9988}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1186,"column":52},"generated":{"line":1,"column":9993}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1200,"column":2},"generated":{"line":1,"column":10002}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1200,"column":8},"generated":{"line":1,"column":10008}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1201,"column":9},"generated":{"line":1,"column":10011}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1201,"column":9},"generated":{"line":1,"column":10016}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1201,"column":17},"generated":{"line":1,"column":10023}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1212,"column":2},"generated":{"line":1,"column":10025}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1212,"column":13},"generated":{"line":1,"column":10036}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1212,"column":29},"generated":{"line":1,"column":10039}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1213,"column":11},"generated":{"line":1,"column":10042}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1213,"column":11},"generated":{"line":1,"column":10049}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1213,"column":25},"generated":{"line":1,"column":10051}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1213,"column":25},"generated":{"line":1,"column":10053}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1213,"column":25},"generated":{"line":1,"column":10068}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1213,"column":41},"generated":{"line":1,"column":10070}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1213,"column":46},"generated":{"line":1,"column":10075}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1213,"column":65},"generated":{"line":1,"column":10092}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1213,"column":70},"generated":{"line":1,"column":10097}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1228,"column":2},"generated":{"line":1,"column":10106}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1228,"column":13},"generated":{"line":1,"column":10117}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1229,"column":9},"generated":{"line":1,"column":10121}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1229,"column":9},"generated":{"line":1,"column":10123}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1229,"column":9},"generated":{"line":1,"column":10125}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1229,"column":9},"generated":{"line":1,"column":10131}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1230,"column":12},"generated":{"line":1,"column":10136}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1230,"column":12},"generated":{"line":1,"column":10142}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1230,"column":21},"generated":{"line":1,"column":10144}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1230,"column":26},"generated":{"line":1,"column":10149}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1231,"column":10},"generated":{"line":1,"column":10157}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1231,"column":10},"generated":{"line":1,"column":10160}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1231,"column":17},"generated":{"line":1,"column":10162}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1231,"column":28},"generated":{"line":1,"column":10171}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1231,"column":36},"generated":{"line":1,"column":10173}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1236,"column":14},"generated":{"line":1,"column":10180}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1236,"column":14},"generated":{"line":1,"column":10186}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1236,"column":18},"generated":{"line":1,"column":10190}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1236,"column":14},"generated":{"line":1,"column":10192}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1237,"column":56},"generated":{"line":1,"column":10247}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1237,"column":61},"generated":{"line":1,"column":10252}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1238,"column":44},"generated":{"line":1,"column":10293}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1238,"column":52},"generated":{"line":1,"column":10295}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1239,"column":43},"generated":{"line":1,"column":10337}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1239,"column":50},"generated":{"line":1,"column":10339}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1240,"column":33},"generated":{"line":1,"column":10379}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1242,"column":10},"generated":{"line":1,"column":10387}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1242,"column":28},"generated":{"line":1,"column":10390}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1242,"column":10},"generated":{"line":1,"column":10394}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1242,"column":17},"generated":{"line":1,"column":10396}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1243,"column":8},"generated":{"line":1,"column":10403}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1245,"column":12},"generated":{"line":1,"column":10410}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1245,"column":12},"generated":{"line":1,"column":10416}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1245,"column":64},"generated":{"line":1,"column":10418}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1246,"column":12},"generated":{"line":1,"column":10421}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1246,"column":26},"generated":{"line":1,"column":10424}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1246,"column":40},"generated":{"line":1,"column":10426}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1246,"column":40},"generated":{"line":1,"column":10428}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1246,"column":40},"generated":{"line":1,"column":10443}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1247,"column":11},"generated":{"line":1,"column":10446}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1247,"column":11},"generated":{"line":1,"column":10450}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1247,"column":15},"generated":{"line":1,"column":10454}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1247,"column":19},"generated":{"line":1,"column":10456}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1247,"column":22},"generated":{"line":1,"column":10458}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1247,"column":26},"generated":{"line":1,"column":10460}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1247,"column":38},"generated":{"line":1,"column":10462}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1247,"column":48},"generated":{"line":1,"column":10471}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1247,"column":51},"generated":{"line":1,"column":10473}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1248,"column":14},"generated":{"line":1,"column":10474}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1248,"column":14},"generated":{"line":1,"column":10480}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1248,"column":19},"generated":{"line":1,"column":10482}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1248,"column":31},"generated":{"line":1,"column":10484}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1249,"column":14},"generated":{"line":1,"column":10487}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1249,"column":18},"generated":{"line":1,"column":10489}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1249,"column":25},"generated":{"line":1,"column":10491}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1250,"column":14},"generated":{"line":1,"column":10494}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1250,"column":18},"generated":{"line":1,"column":10496}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1250,"column":26},"generated":{"line":1,"column":10498}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1251,"column":12},"generated":{"line":1,"column":10501}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1251,"column":13},"generated":{"line":1,"column":10505}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1251,"column":18},"generated":{"line":1,"column":10507}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1251,"column":18},"generated":{"line":1,"column":10512}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1251,"column":30},"generated":{"line":1,"column":10524}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1251,"column":33},"generated":{"line":1,"column":10526}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1251,"column":40},"generated":{"line":1,"column":10532}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1251,"column":42},"generated":{"line":1,"column":10534}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1252,"column":16},"generated":{"line":1,"column":10541}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1252,"column":16},"generated":{"line":1,"column":10547}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1252,"column":20},"generated":{"line":1,"column":10551}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1252,"column":16},"generated":{"line":1,"column":10553}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1253,"column":36},"generated":{"line":1,"column":10586}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1253,"column":39},"generated":{"line":1,"column":10588}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1254,"column":59},"generated":{"line":1,"column":10642}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1254,"column":61},"generated":{"line":1,"column":10644}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1256,"column":8},"generated":{"line":1,"column":10653}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1256,"column":26},"generated":{"line":1,"column":10655}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1256,"column":31},"generated":{"line":1,"column":10660}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1256,"column":32},"generated":{"line":1,"column":10661}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1256,"column":35},"generated":{"line":1,"column":10663}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1258,"column":20},"generated":{"line":1,"column":10668}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1258,"column":20},"generated":{"line":1,"column":10670}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1258,"column":20},"generated":{"line":1,"column":10672}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1258,"column":20},"generated":{"line":1,"column":10687}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1277,"column":12},"generated":{"line":1,"column":10692}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1278,"column":6},"generated":{"line":1,"column":10702}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1278,"column":20},"generated":{"line":1,"column":10704}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1278,"column":34},"generated":{"line":1,"column":10706}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1278,"column":52},"generated":{"line":1,"column":10708}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1279,"column":6},"generated":{"line":1,"column":10710}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1279,"column":33},"generated":{"line":1,"column":10712}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1280,"column":6},"generated":{"line":1,"column":10714}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1282,"column":8},"generated":{"line":1,"column":10717}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1282,"column":50},"generated":{"line":1,"column":10721}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1282,"column":8},"generated":{"line":1,"column":10725}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1282,"column":13},"generated":{"line":1,"column":10730}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1282,"column":31},"generated":{"line":1,"column":10748}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1282,"column":39},"generated":{"line":1,"column":10756}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1283,"column":12},"generated":{"line":1,"column":10759}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1283,"column":12},"generated":{"line":1,"column":10765}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1283,"column":16},"generated":{"line":1,"column":10769}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1283,"column":12},"generated":{"line":1,"column":10771}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1284,"column":35},"generated":{"line":1,"column":10807}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1284,"column":53},"generated":{"line":1,"column":10822}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1284,"column":58},"generated":{"line":1,"column":10827}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1286,"column":9},"generated":{"line":1,"column":10835}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1286,"column":9},"generated":{"line":1,"column":10840}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1286,"column":27},"generated":{"line":1,"column":10858}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1286,"column":32},"generated":{"line":1,"column":10863}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1288,"column":17},"generated":{"line":1,"column":10866}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1288,"column":8},"generated":{"line":1,"column":10872}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1289,"column":6},"generated":{"line":1,"column":10876}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1289,"column":14},"generated":{"line":1,"column":10878}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1292,"column":8},"generated":{"line":1,"column":10889}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1292,"column":13},"generated":{"line":1,"column":10894}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1293,"column":6},"generated":{"line":1,"column":10922}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1293,"column":20},"generated":{"line":1,"column":10925}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1293,"column":35},"generated":{"line":1,"column":10927}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1293,"column":35},"generated":{"line":1,"column":10929}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1293,"column":35},"generated":{"line":1,"column":10945}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1295,"column":10},"generated":{"line":1,"column":10955}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1295,"column":10},"generated":{"line":1,"column":10961}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1295,"column":22},"generated":{"line":1,"column":10963}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1295,"column":34},"generated":{"line":1,"column":10965}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1295,"column":40},"generated":{"line":1,"column":10971}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1295,"column":47},"generated":{"line":1,"column":10973}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1296,"column":10},"generated":{"line":1,"column":10976}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1297,"column":8},"generated":{"line":1,"column":10978}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1297,"column":12},"generated":{"line":1,"column":10982}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1297,"column":8},"generated":{"line":1,"column":10984}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1297,"column":26},"generated":{"line":1,"column":10998}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1297,"column":37},"generated":{"line":1,"column":11000}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1297,"column":44},"generated":{"line":1,"column":11002}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1297,"column":50},"generated":{"line":1,"column":11004}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1297,"column":61},"generated":{"line":1,"column":11006}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1311,"column":11},"generated":{"line":1,"column":11009}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1298,"column":4},"generated":{"line":1,"column":11016}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1298,"column":14},"generated":{"line":1,"column":11018}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1300,"column":23},"generated":{"line":1,"column":11028}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1300,"column":8},"generated":{"line":1,"column":11034}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1301,"column":11},"generated":{"line":1,"column":11037}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1301,"column":11},"generated":{"line":1,"column":11042}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1301,"column":19},"generated":{"line":1,"column":11050}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1301,"column":25},"generated":{"line":1,"column":11054}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1301,"column":37},"generated":{"line":1,"column":11056}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1301,"column":43},"generated":{"line":1,"column":11062}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1301,"column":50},"generated":{"line":1,"column":11064}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1303,"column":21},"generated":{"line":1,"column":11073}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1303,"column":8},"generated":{"line":1,"column":11079}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1304,"column":6},"generated":{"line":1,"column":11083}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1304,"column":18},"generated":{"line":1,"column":11086}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1306,"column":8},"generated":{"line":1,"column":11089}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1307,"column":11},"generated":{"line":1,"column":11091}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1307,"column":11},"generated":{"line":1,"column":11096}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1307,"column":29},"generated":{"line":1,"column":11114}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1307,"column":34},"generated":{"line":1,"column":11119}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1309,"column":11},"generated":{"line":1,"column":11122}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1309,"column":11},"generated":{"line":1,"column":11127}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1309,"column":32},"generated":{"line":1,"column":11148}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1309,"column":37},"generated":{"line":1,"column":11153}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1311,"column":11},"generated":{"line":1,"column":11156}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1324,"column":2},"generated":{"line":1,"column":11158}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1324,"column":31},"generated":{"line":1,"column":11187}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1325,"column":9},"generated":{"line":1,"column":11190}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1325,"column":9},"generated":{"line":1,"column":11195}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1325,"column":37},"generated":{"line":1,"column":11221}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1336,"column":2},"generated":{"line":1,"column":11223}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1336,"column":10},"generated":{"line":1,"column":11231}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1337,"column":18},"generated":{"line":1,"column":11234}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1337,"column":8},"generated":{"line":1,"column":11240}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1337,"column":26},"generated":{"line":1,"column":11243}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1337,"column":32},"generated":{"line":1,"column":11249}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1337,"column":40},"generated":{"line":1,"column":11257}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1337,"column":69},"generated":{"line":1,"column":11261}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1337,"column":51},"generated":{"line":1,"column":11265}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1337,"column":58},"generated":{"line":1,"column":11267}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1341,"column":4},"generated":{"line":1,"column":11276}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1341,"column":13},"generated":{"line":1,"column":11278}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1341,"column":27},"generated":{"line":1,"column":11280}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1341,"column":34},"generated":{"line":1,"column":11287}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1342,"column":25},"generated":{"line":1,"column":11295}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1342,"column":8},"generated":{"line":1,"column":11299}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1342,"column":13},"generated":{"line":1,"column":11304}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1342,"column":55},"generated":{"line":1,"column":11313}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1342,"column":38},"generated":{"line":1,"column":11320}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1342,"column":43},"generated":{"line":1,"column":11325}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1343,"column":11},"generated":{"line":1,"column":11334}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1343,"column":11},"generated":{"line":1,"column":11339}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1343,"column":18},"generated":{"line":1,"column":11346}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1343,"column":26},"generated":{"line":1,"column":11354}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1358,"column":2},"generated":{"line":1,"column":11358}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1358,"column":21},"generated":{"line":1,"column":11377}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1359,"column":11},"generated":{"line":1,"column":11380}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1359,"column":11},"generated":{"line":1,"column":11387}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1371,"column":2},"generated":{"line":1,"column":11389}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1371,"column":14},"generated":{"line":1,"column":11401}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1371,"column":39},"generated":{"line":1,"column":11403}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1373,"column":8},"generated":{"line":1,"column":11406}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1373,"column":9},"generated":{"line":1,"column":11410}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1373,"column":14},"generated":{"line":1,"column":11415}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1373,"column":31},"generated":{"line":1,"column":11431}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1374,"column":10},"generated":{"line":1,"column":11432}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1374,"column":18},"generated":{"line":1,"column":11435}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1374,"column":10},"generated":{"line":1,"column":11441}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1374,"column":24},"generated":{"line":1,"column":11443}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1375,"column":12},"generated":{"line":1,"column":11444}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1375,"column":12},"generated":{"line":1,"column":11448}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1375,"column":18},"generated":{"line":1,"column":11454}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1375,"column":26},"generated":{"line":1,"column":11462}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1384,"column":16},"generated":{"line":1,"column":11465}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1384,"column":16},"generated":{"line":1,"column":11471}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1384,"column":20},"generated":{"line":1,"column":11475}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1385,"column":23},"generated":{"line":1,"column":11494}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1385,"column":28},"generated":{"line":1,"column":11499}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1386,"column":14},"generated":{"line":1,"column":11533}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1376,"column":10},"generated":{"line":1,"column":11565}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1376,"column":15},"generated":{"line":1,"column":11567}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1376,"column":23},"generated":{"line":1,"column":11575}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1377,"column":16},"generated":{"line":1,"column":11579}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1377,"column":31},"generated":{"line":1,"column":11582}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1377,"column":16},"generated":{"line":1,"column":11588}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1378,"column":20},"generated":{"line":1,"column":11590}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1378,"column":20},"generated":{"line":1,"column":11596}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1378,"column":24},"generated":{"line":1,"column":11600}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1379,"column":27},"generated":{"line":1,"column":11619}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1379,"column":32},"generated":{"line":1,"column":11624}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1380,"column":18},"generated":{"line":1,"column":11658}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1390,"column":13},"generated":{"line":1,"column":11692}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1390,"column":13},"generated":{"line":1,"column":11699}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1394,"column":11},"generated":{"line":1,"column":11704}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1394,"column":11},"generated":{"line":1,"column":11711}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1409,"column":10},"generated":{"line":1,"column":11713}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1410,"column":6},"generated":{"line":1,"column":11728}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1411,"column":6},"generated":{"line":1,"column":11730}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1412,"column":6},"generated":{"line":1,"column":11732}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1412,"column":35},"generated":{"line":1,"column":11734}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1413,"column":6},"generated":{"line":1,"column":11736}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1413,"column":34},"generated":{"line":1,"column":11738}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1414,"column":6},"generated":{"line":1,"column":11740}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1414,"column":19},"generated":{"line":1,"column":11742}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1415,"column":10},"generated":{"line":1,"column":11748}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1415,"column":10},"generated":{"line":1,"column":11754}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1416,"column":8},"generated":{"line":1,"column":11756}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1416,"column":22},"generated":{"line":1,"column":11758}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1416,"column":29},"generated":{"line":1,"column":11765}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1417,"column":4},"generated":{"line":1,"column":11768}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1417,"column":20},"generated":{"line":1,"column":11770}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1417,"column":34},"generated":{"line":1,"column":11772}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1417,"column":41},"generated":{"line":1,"column":11779}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1418,"column":4},"generated":{"line":1,"column":11782}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1418,"column":17},"generated":{"line":1,"column":11784}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1418,"column":31},"generated":{"line":1,"column":11786}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1418,"column":38},"generated":{"line":1,"column":11793}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1419,"column":4},"generated":{"line":1,"column":11796}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1419,"column":18},"generated":{"line":1,"column":11798}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1419,"column":32},"generated":{"line":1,"column":11800}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1419,"column":39},"generated":{"line":1,"column":11807}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1420,"column":4},"generated":{"line":1,"column":11810}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1420,"column":18},"generated":{"line":1,"column":11812}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1420,"column":30},"generated":{"line":1,"column":11814}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1420,"column":49},"generated":{"line":1,"column":11833}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1421,"column":4},"generated":{"line":1,"column":11836}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1421,"column":19},"generated":{"line":1,"column":11838}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1421,"column":31},"generated":{"line":1,"column":11840}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1421,"column":50},"generated":{"line":1,"column":11859}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1424,"column":10},"generated":{"line":1,"column":11862}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1424,"column":10},"generated":{"line":1,"column":11868}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1424,"column":35},"generated":{"line":1,"column":11870}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1425,"column":10},"generated":{"line":1,"column":11873}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1425,"column":34},"generated":{"line":1,"column":11875}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1426,"column":10},"generated":{"line":1,"column":11878}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1426,"column":36},"generated":{"line":1,"column":11880}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1427,"column":9},"generated":{"line":1,"column":11883}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1427,"column":9},"generated":{"line":1,"column":11887}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1427,"column":15},"generated":{"line":1,"column":11893}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1427,"column":20},"generated":{"line":1,"column":11898}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1432,"column":6},"generated":{"line":1,"column":11900}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1432,"column":20},"generated":{"line":1,"column":11902}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1432,"column":25},"generated":{"line":1,"column":11907}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1432,"column":27},"generated":{"line":1,"column":11909}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1433,"column":6},"generated":{"line":1,"column":11922}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1433,"column":18},"generated":{"line":1,"column":11924}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1433,"column":23},"generated":{"line":1,"column":11929}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1433,"column":25},"generated":{"line":1,"column":11931}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1434,"column":6},"generated":{"line":1,"column":11942}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1434,"column":20},"generated":{"line":1,"column":11944}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1434,"column":25},"generated":{"line":1,"column":11949}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1434,"column":27},"generated":{"line":1,"column":11951}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1440,"column":8},"generated":{"line":1,"column":11964}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1440,"column":8},"generated":{"line":1,"column":11968}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1441,"column":8},"generated":{"line":1,"column":11970}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1442,"column":10},"generated":{"line":1,"column":11971}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1442,"column":25},"generated":{"line":1,"column":11985}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1443,"column":10},"generated":{"line":1,"column":11990}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1443,"column":10},"generated":{"line":1,"column":12004}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1444,"column":10},"generated":{"line":1,"column":12006}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1444,"column":10},"generated":{"line":1,"column":12018}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1445,"column":10},"generated":{"line":1,"column":12020}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1445,"column":10},"generated":{"line":1,"column":12034}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1446,"column":10},"generated":{"line":1,"column":12036}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1446,"column":24},"generated":{"line":1,"column":12049}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1447,"column":10},"generated":{"line":1,"column":12051}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1447,"column":10},"generated":{"line":1,"column":12065}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1448,"column":10},"generated":{"line":1,"column":12067}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1448,"column":10},"generated":{"line":1,"column":12078}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1449,"column":10},"generated":{"line":1,"column":12080}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1449,"column":10},"generated":{"line":1,"column":12092}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1450,"column":10},"generated":{"line":1,"column":12094}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1450,"column":10},"generated":{"line":1,"column":12106}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1451,"column":10},"generated":{"line":1,"column":12108}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1451,"column":10},"generated":{"line":1,"column":12121}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1453,"column":8},"generated":{"line":1,"column":12124}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1456,"column":9},"generated":{"line":1,"column":12127}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1456,"column":9},"generated":{"line":1,"column":12131}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1456,"column":13},"generated":{"line":1,"column":12135}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1456,"column":17},"generated":{"line":1,"column":12137}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1456,"column":20},"generated":{"line":1,"column":12139}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1456,"column":24},"generated":{"line":1,"column":12141}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1456,"column":38},"generated":{"line":1,"column":12143}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1456,"column":46},"generated":{"line":1,"column":12150}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1458,"column":6},"generated":{"line":1,"column":12154}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1458,"column":20},"generated":{"line":1,"column":12156}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1458,"column":23},"generated":{"line":1,"column":12159}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1458,"column":37},"generated":{"line":1,"column":12171}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1459,"column":6},"generated":{"line":1,"column":12176}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1459,"column":20},"generated":{"line":1,"column":12178}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1459,"column":23},"generated":{"line":1,"column":12181}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1459,"column":35},"generated":{"line":1,"column":12191}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1459,"column":40},"generated":{"line":1,"column":12196}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1459,"column":53},"generated":{"line":1,"column":12209}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1459,"column":62},"generated":{"line":1,"column":12216}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1460,"column":6},"generated":{"line":1,"column":12218}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1460,"column":20},"generated":{"line":1,"column":12220}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1460,"column":23},"generated":{"line":1,"column":12223}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1460,"column":37},"generated":{"line":1,"column":12235}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1485,"column":2},"generated":{"line":1,"column":12237}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1486,"column":10},"generated":{"line":1,"column":12249}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1486,"column":10},"generated":{"line":1,"column":12255}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1487,"column":35},"generated":{"line":1,"column":12257}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1487,"column":36},"generated":{"line":1,"column":12258}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1487,"column":42},"generated":{"line":1,"column":12263}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1487,"column":47},"generated":{"line":1,"column":12268}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1487,"column":53},"generated":{"line":1,"column":12273}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1487,"column":64},"generated":{"line":1,"column":12283}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1487,"column":69},"generated":{"line":1,"column":12288}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1494,"column":11},"generated":{"line":1,"column":12299}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1488,"column":32},"generated":{"line":1,"column":12306}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1488,"column":8},"generated":{"line":1,"column":12312}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1488,"column":13},"generated":{"line":1,"column":12317}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1489,"column":6},"generated":{"line":1,"column":12335}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1489,"column":12},"generated":{"line":1,"column":12337}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1489,"column":34},"generated":{"line":1,"column":12353}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1489,"column":39},"generated":{"line":1,"column":12358}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1491,"column":22},"generated":{"line":1,"column":12375}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1491,"column":8},"generated":{"line":1,"column":12381}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1491,"column":13},"generated":{"line":1,"column":12386}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1492,"column":6},"generated":{"line":1,"column":12394}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1492,"column":12},"generated":{"line":1,"column":12396}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1492,"column":24},"generated":{"line":1,"column":12402}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1492,"column":29},"generated":{"line":1,"column":12407}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1494,"column":11},"generated":{"line":1,"column":12414}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1502,"column":12},"generated":{"line":1,"column":12416}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1504,"column":11},"generated":{"line":1,"column":12433}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1503,"column":9},"generated":{"line":1,"column":12440}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1503,"column":9},"generated":{"line":1,"column":12445}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1503,"column":17},"generated":{"line":1,"column":12453}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1503,"column":25},"generated":{"line":1,"column":12461}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1503,"column":35},"generated":{"line":1,"column":12464}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1503,"column":42},"generated":{"line":1,"column":12466}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1504,"column":11},"generated":{"line":1,"column":12477}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1504,"column":16},"generated":{"line":1,"column":12482}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1504,"column":24},"generated":{"line":1,"column":12490}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1507,"column":12},"generated":{"line":1,"column":12497}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1508,"column":8},"generated":{"line":1,"column":12517}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1508,"column":27},"generated":{"line":1,"column":12520}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1508,"column":8},"generated":{"line":1,"column":12524}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1508,"column":13},"generated":{"line":1,"column":12529}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1509,"column":12},"generated":{"line":1,"column":12539}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1509,"column":12},"generated":{"line":1,"column":12545}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1509,"column":16},"generated":{"line":1,"column":12549}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1509,"column":32},"generated":{"line":1,"column":12565}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1509,"column":37},"generated":{"line":1,"column":12570}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1543,"column":2},"generated":{"line":1,"column":12600}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1544,"column":8},"generated":{"line":1,"column":12610}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1544,"column":9},"generated":{"line":1,"column":12614}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1544,"column":14},"generated":{"line":1,"column":12619}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1545,"column":12},"generated":{"line":1,"column":12625}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1545,"column":12},"generated":{"line":1,"column":12631}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1545,"column":16},"generated":{"line":1,"column":12635}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1546,"column":34},"generated":{"line":1,"column":12665}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1546,"column":39},"generated":{"line":1,"column":12670}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1547,"column":10},"generated":{"line":1,"column":12702}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1550,"column":8},"generated":{"line":1,"column":12716}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1550,"column":27},"generated":{"line":1,"column":12719}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1550,"column":8},"generated":{"line":1,"column":12726}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1550,"column":13},"generated":{"line":1,"column":12731}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1551,"column":12},"generated":{"line":1,"column":12741}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1551,"column":12},"generated":{"line":1,"column":12747}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1551,"column":16},"generated":{"line":1,"column":12751}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1552,"column":34},"generated":{"line":1,"column":12781}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1552,"column":39},"generated":{"line":1,"column":12786}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1553,"column":10},"generated":{"line":1,"column":12823}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1556,"column":9},"generated":{"line":1,"column":12831}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1556,"column":9},"generated":{"line":1,"column":12836}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1558,"column":8},"generated":{"line":1,"column":12856}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1558,"column":8},"generated":{"line":1,"column":12860}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1558,"column":31},"generated":{"line":1,"column":12862}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1563,"column":11},"generated":{"line":1,"column":12864}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1559,"column":29},"generated":{"line":1,"column":12871}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1559,"column":10},"generated":{"line":1,"column":12876}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1559,"column":15},"generated":{"line":1,"column":12881}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1560,"column":6},"generated":{"line":1,"column":12893}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1560,"column":29},"generated":{"line":1,"column":12895}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1560,"column":34},"generated":{"line":1,"column":12900}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1563,"column":11},"generated":{"line":1,"column":12918}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1563,"column":12},"generated":{"line":1,"column":12919}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1563,"column":34},"generated":{"line":1,"column":12940}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1563,"column":39},"generated":{"line":1,"column":12945}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1563,"column":50},"generated":{"line":1,"column":12955}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1563,"column":50},"generated":{"line":1,"column":12976}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1577,"column":0},"generated":{"line":1,"column":12980}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1577,"column":9},"generated":{"line":1,"column":12989}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1577,"column":27},"generated":{"line":1,"column":12991}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1579,"column":2},"generated":{"line":1,"column":12994}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1580,"column":6},"generated":{"line":1,"column":12996}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1580,"column":20},"generated":{"line":1,"column":12998}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1580,"column":27},"generated":{"line":1,"column":13005}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1581,"column":8},"generated":{"line":1,"column":13008}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1581,"column":8},"generated":{"line":1,"column":13014}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1581,"column":26},"generated":{"line":1,"column":13016}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1582,"column":7},"generated":{"line":1,"column":13019}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1582,"column":7},"generated":{"line":1,"column":13023}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1582,"column":13},"generated":{"line":1,"column":13029}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1582,"column":18},"generated":{"line":1,"column":13034}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1583,"column":4},"generated":{"line":1,"column":13036}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1583,"column":11},"generated":{"line":1,"column":13038}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1583,"column":16},"generated":{"line":1,"column":13043}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1583,"column":18},"generated":{"line":1,"column":13045}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1585,"column":9},"generated":{"line":1,"column":13052}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1585,"column":9},"generated":{"line":1,"column":13059}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1585,"column":23},"generated":{"line":1,"column":13061}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1585,"column":40},"generated":{"line":1,"column":13078}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1597,"column":0},"generated":{"line":1,"column":13081}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1597,"column":9},"generated":{"line":1,"column":13090}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1597,"column":26},"generated":{"line":1,"column":13092}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1599,"column":9},"generated":{"line":1,"column":13095}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1599,"column":9},"generated":{"line":1,"column":13101}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1613,"column":6},"generated":{"line":1,"column":13111}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1613,"column":16},"generated":{"line":1,"column":13120}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1614,"column":4},"generated":{"line":1,"column":13122}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1614,"column":28},"generated":{"line":1,"column":13124}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1615,"column":4},"generated":{"line":1,"column":13126}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1620,"column":6},"generated":{"line":1,"column":13129}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1616,"column":15},"generated":{"line":1,"column":13133}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1616,"column":6},"generated":{"line":1,"column":13139}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1616,"column":37},"generated":{"line":1,"column":13142}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1616,"column":24},"generated":{"line":1,"column":13148}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1616,"column":45},"generated":{"line":1,"column":13151}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1616,"column":57},"generated":{"line":1,"column":13153}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1617,"column":4},"generated":{"line":1,"column":13158}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1617,"column":12},"generated":{"line":1,"column":13160}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1617,"column":19},"generated":{"line":1,"column":13162}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1618,"column":4},"generated":{"line":1,"column":13174}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1618,"column":16},"generated":{"line":1,"column":13176}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1618,"column":23},"generated":{"line":1,"column":13178}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1620,"column":36},"generated":{"line":1,"column":13189}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1620,"column":6},"generated":{"line":1,"column":13193}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1620,"column":12},"generated":{"line":1,"column":13195}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1620,"column":25},"generated":{"line":1,"column":13208}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1621,"column":11},"generated":{"line":1,"column":13215}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1621,"column":11},"generated":{"line":1,"column":13221}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1621,"column":12},"generated":{"line":1,"column":13222}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1622,"column":9},"generated":{"line":1,"column":13225}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1623,"column":10},"generated":{"line":1,"column":13226}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1623,"column":10},"generated":{"line":1,"column":13232}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1623,"column":17},"generated":{"line":1,"column":13234}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1623,"column":23},"generated":{"line":1,"column":13236}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1623,"column":36},"generated":{"line":1,"column":13249}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1624,"column":8},"generated":{"line":1,"column":13252}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1624,"column":38},"generated":{"line":1,"column":13255}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1624,"column":8},"generated":{"line":1,"column":13259}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1624,"column":13},"generated":{"line":1,"column":13261}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1624,"column":27},"generated":{"line":1,"column":13275}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1625,"column":13},"generated":{"line":1,"column":13282}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1625,"column":13},"generated":{"line":1,"column":13289}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1625,"column":18},"generated":{"line":1,"column":13291}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1626,"column":11},"generated":{"line":1,"column":13304}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1627,"column":12},"generated":{"line":1,"column":13305}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1627,"column":12},"generated":{"line":1,"column":13311}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1627,"column":46},"generated":{"line":1,"column":13313}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1628,"column":11},"generated":{"line":1,"column":13316}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1628,"column":11},"generated":{"line":1,"column":13320}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1628,"column":15},"generated":{"line":1,"column":13324}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1628,"column":19},"generated":{"line":1,"column":13326}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1628,"column":22},"generated":{"line":1,"column":13328}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1628,"column":26},"generated":{"line":1,"column":13330}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1628,"column":31},"generated":{"line":1,"column":13332}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1628,"column":45},"generated":{"line":1,"column":13346}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1628,"column":53},"generated":{"line":1,"column":13353}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1628,"column":58},"generated":{"line":1,"column":13357}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1629,"column":14},"generated":{"line":1,"column":13358}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1632,"column":14},"generated":{"line":1,"column":13364}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1632,"column":32},"generated":{"line":1,"column":13366}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1629,"column":18},"generated":{"line":1,"column":13368}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1629,"column":23},"generated":{"line":1,"column":13370}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1629,"column":36},"generated":{"line":1,"column":13383}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1630,"column":22},"generated":{"line":1,"column":13386}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1630,"column":27},"generated":{"line":1,"column":13388}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1630,"column":41},"generated":{"line":1,"column":13402}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1631,"column":26},"generated":{"line":1,"column":13405}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1631,"column":31},"generated":{"line":1,"column":13407}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1631,"column":43},"generated":{"line":1,"column":13419}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1634,"column":13},"generated":{"line":1,"column":13423}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1634,"column":13},"generated":{"line":1,"column":13427}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1634,"column":19},"generated":{"line":1,"column":13433}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1634,"column":24},"generated":{"line":1,"column":13438}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1635,"column":44},"generated":{"line":1,"column":13441}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1635,"column":14},"generated":{"line":1,"column":13445}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1635,"column":28},"generated":{"line":1,"column":13447}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1635,"column":36},"generated":{"line":1,"column":13455}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1636,"column":12},"generated":{"line":1,"column":13459}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1636,"column":26},"generated":{"line":1,"column":13461}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1636,"column":31},"generated":{"line":1,"column":13466}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1640,"column":13},"generated":{"line":1,"column":13469}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1640,"column":13},"generated":{"line":1,"column":13476}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":13480}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":13488}},{"source":"../../src/engine/topology.ts","name":null,"original":{"line":1643,"column":1},"generated":{"line":1,"column":13494}}],"sources":{"../../src/engine/topology.ts":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/* Original source: keras/engine/topology.py */\n\nimport {DataType, Scalar, serialization, Tensor, tidy, util} from '@tensorflow/tfjs-core';\n\nimport {getNextUniqueTensorId, getUid} from '../backend/state';\nimport {getScopedTensorName, getUniqueTensorName, nameScope} from '../common';\nimport {Constraint} from '../constraints';\nimport {AttributeError, NotImplementedError, RuntimeError, ValueError} from '../errors';\nimport {getInitializer, Initializer} from '../initializers';\nimport {Shape} from '../keras_format/common';\nimport {Regularizer} from '../regularizers';\nimport {Kwargs, RegularizerFn} from '../types';\nimport * as generic_utils from '../utils/generic_utils';\nimport * as types_utils from '../utils/types_utils';\nimport * as variable_utils from '../utils/variable_utils';\nimport {batchGetValue, batchSetValue, LayerVariable} from '../variables';\n\n// TODO(michaelterry): This is a stub until it's defined.\nexport type Op = (x: LayerVariable) => LayerVariable;\n\n/**\n * Constructor arguments for InputSpec.\n */\nexport interface InputSpecArgs {\n  /** Expected datatype of the input. */\n  dtype?: DataType;\n  /** Expected shape of the input (may include null for unchecked axes). */\n  shape?: Shape;\n  /** Expected rank of the input. */\n  ndim?: number;\n  /** Maximum rank of the input. */\n  maxNDim?: number;\n  /** Minimum rank of the input. */\n  minNDim?: number;\n  /** Dictionary mapping integer axes to a specific dimension value. */\n  axes?: {[axis: number]: number};\n}\n\n/**\n * Specifies the ndim, dtype and shape of every input to a layer.\n *\n * Every layer should expose (if appropriate) an `inputSpec` attribute:\n * a list of instances of InputSpec (one per input tensor).\n *\n * A null entry in a shape is compatible with any dimension,\n * a null shape is compatible with any shape.\n */\nexport class InputSpec {\n  /** Expected datatype of the input. */\n  dtype?: DataType;\n  /** Expected shape of the input (may include null for unchecked axes). */\n  shape?: Shape;\n  /** Expected rank of the input. */\n  ndim?: number;\n  /** Maximum rank of the input. */\n  maxNDim?: number;\n  /** Minimum rank of the input. */\n  minNDim?: number;\n  /** Dictionary mapping integer axes to a specific dimension value. */\n  axes?: {[axis: number]: number};\n\n  constructor(args: InputSpecArgs) {\n    this.dtype = args.dtype;\n    this.shape = args.shape;\n    /*\n      TODO(michaelterry): Could throw error if ndim and shape are both defined\n        (then backport).\n    */\n    if (args.shape != null) {\n      this.ndim = args.shape.length;\n    } else {\n      this.ndim = args.ndim;\n    }\n    this.maxNDim = args.maxNDim;\n    this.minNDim = args.minNDim;\n    this.axes = args.axes || {};\n  }\n}\n\n/**\n * `tf.SymbolicTensor` is a placeholder for a Tensor without any concrete value.\n *\n * They are most often encountered when building a graph of `Layer`s for a\n * a `tf.LayersModel` and the input data's shape, but not values are known.\n *\n * @doc {heading: 'Models', 'subheading': 'Classes'}\n */\nexport class SymbolicTensor {\n  /* A unique ID for the tensor to be able to differentiate tensors. */\n  readonly id: number;\n  // The fully scoped name of this Variable, including a unique suffix if needed\n  readonly name: string;\n  // The originally requested fully scoped name of this Variable, not including\n  // any unique suffix.  This may be needed when restoring weights because this\n  // original name is used as a key.\n  readonly originalName?: string;\n  /**\n   * Rank/dimensionality of the tensor.\n   */\n  readonly rank: number;\n  /**\n   * Replacement for _keras_history.\n   */\n  nodeIndex: number;\n  /**\n   * Replacement for _keras_history.\n   */\n  tensorIndex: number;\n\n  /**\n   *\n   * @param dtype\n   * @param shape\n   * @param sourceLayer The Layer that produced this symbolic tensor.\n   * @param inputs The inputs passed to sourceLayer's __call__() method.\n   * @param nodeIndex\n   * @param tensorIndex\n   * @param callArgs The keyword arguments passed to the __call__() method.\n   * @param name\n   * @param outputTensorIndex The index of this tensor in the list of outputs\n   *   returned by apply().\n   */\n  constructor(\n      readonly dtype: DataType, readonly shape: Shape,\n      public sourceLayer: Layer, readonly inputs: SymbolicTensor[],\n      readonly callArgs: Kwargs, name?: string,\n      readonly outputTensorIndex?: number) {\n    this.id = getNextUniqueTensorId();\n    if (name != null) {\n      this.originalName = getScopedTensorName(name);\n      this.name = getUniqueTensorName(this.originalName);\n    }\n    this.rank = shape.length;\n  }\n}\n\n/**\n * Constructor arguments for Node.\n */\nexport interface NodeArgs {\n  /**\n   * The layer that takes `inputTensors` and turns them into `outputTensors`.\n   * (the node gets created when the `call` method of the layer is called).\n   */\n  outboundLayer: Layer;\n  /**\n   * A list of layers, the same length as `inputTensors`, the layers from where\n   * `inputTensors` originate.\n   */\n  inboundLayers: Layer[];\n  /**\n   * A list of integers, the same length as `inboundLayers`. `nodeIndices[i]` is\n   * the origin node of `inputTensors[i]` (necessary since each inbound layer\n   * might have several nodes, e.g. if the layer is being shared with a\n   * different data stream).\n   */\n  nodeIndices: number[];\n  /**\n   * A list of integers, the same length as `inboundLayers`. `tensorIndices[i]`\n   * is the index of `inputTensors[i]` within the output of the inbound layer\n   * (necessary since each inbound layer might have multiple tensor outputs,\n   * with each one being independently manipulable).\n   */\n  tensorIndices: number[];\n  /** List of input tensors. */\n  inputTensors: SymbolicTensor[];\n  /** List of output tensors. */\n  outputTensors: SymbolicTensor[];\n  /** List of input masks (a mask can be a tensor, or null). */\n  inputMasks: Tensor[];\n  /** List of output masks (a mask can be a tensor, or null). */\n  outputMasks: Tensor[];\n  /** List of input shape tuples. */\n  inputShapes: Shape|Shape[];\n  /** List of output shape tuples. */\n  outputShapes: Shape|Shape[];\n}\n\n/**\n * The type of the return value of Layer.dispose() and Container.dispose().\n */\nexport interface DisposeResult {\n  /**\n   * Reference count after the dispose call.\n   */\n  refCountAfterDispose: number;\n\n  /**\n   * Number of variables dispose in this dispose call.\n   */\n  numDisposedVariables: number;\n}\n\nlet _nextNodeID = 0;\n\n/**\n * A `Node` describes the connectivity between two layers.\n *\n * Each time a layer is connected to some new input,\n * a node is added to `layer.inboundNodes`.\n *\n * Each time the output of a layer is used by another layer,\n * a node is added to `layer.outboundNodes`.\n *\n * `nodeIndices` and `tensorIndices` are basically fine-grained coordinates\n * describing the origin of the `inputTensors`, verifying the following:\n *\n * `inputTensors[i] ==\n * inboundLayers[i].inboundNodes[nodeIndices[i]].outputTensors[\n *   tensorIndices[i]]`\n *\n * A node from layer A to layer B is added to:\n *     A.outboundNodes\n *     B.inboundNodes\n */\nexport class Node {\n  /**\n   * The layer that takes `inputTensors` and turns them into `outputTensors`\n   * (the node gets created when the `call` method of the layer is called).\n   */\n  outboundLayer: Layer;\n  /**\n   * A list of layers, the same length as `inputTensors`, the layers from where\n   * `inputTensors` originate.\n   */\n  inboundLayers: Layer[];\n  /**\n   * A list of integers, the same length as `inboundLayers`. `nodeIndices[i]` is\n   * the origin node of `inputTensors[i]` (necessary since each inbound layer\n   * might have several nodes, e.g. if the layer is being shared with a\n   * different data stream).\n   */\n  nodeIndices: number[];\n  /**\n   * A list of integers, the same length as `inboundLayers`. `tensorIndices[i]`\n   * is the index of `inputTensors[i]` within the output of the inbound layer\n   * (necessary since each inbound layer might have multiple tensor outputs,\n   * with each one being independently manipulable).\n   */\n  tensorIndices: number[];\n  /** List of input tensors. */\n  inputTensors: SymbolicTensor[];\n  /** List of output tensors. */\n  outputTensors: SymbolicTensor[];\n  /** List of input masks (a mask can be a tensor, or null). */\n  inputMasks: Tensor[];\n  /** List of output masks (a mask can be a tensor, or null). */\n  outputMasks: Tensor[];\n  /** List of input shape tuples. */\n  inputShapes: Shape|Shape[];\n  /** List of output shape tuples. */\n  outputShapes: Shape|Shape[];\n\n  readonly id: number;\n\n  constructor(\n      args: NodeArgs,\n      // TODO(michaelterry): Define actual type for this.\n      public callArgs?: Kwargs) {\n    this.id = _nextNodeID++;\n    /*\n      Layer instance (NOT a list).\n      this is the layer that takes a list of input tensors\n      and turns them into a list of output tensors.\n      the current node will be added to\n      the inboundNodes of outboundLayer.\n    */\n    this.outboundLayer = args.outboundLayer;\n\n    /*\n        The following 3 properties describe where\n        the input tensors come from: which layers,\n        and for each layer, which node and which\n        tensor output of each node.\n    */\n\n    // List of layer instances.\n    this.inboundLayers = args.inboundLayers;\n    // List of integers, 1:1 mapping with inboundLayers.\n    this.nodeIndices = args.nodeIndices;\n    // List of integers, 1:1 mapping with inboundLayers.\n    this.tensorIndices = args.tensorIndices;\n\n    /*\n        Following 2 properties:\n        tensor inputs and outputs of outboundLayer.\n    */\n\n    // List of tensors. 1:1 mapping with inboundLayers.\n    this.inputTensors = args.inputTensors;\n    // List of tensors, created by outboundLayer.call().\n    this.outputTensors = args.outputTensors;\n\n    /*\n        Following 2 properties: input and output masks.\n        List of tensors, 1:1 mapping with inputTensor.\n    */\n    this.inputMasks = args.inputMasks;\n    // List of tensors, created by outboundLayer.computeMask().\n    this.outputMasks = args.outputMasks;\n\n    // Following 2 properties: input and output shapes.\n\n    // List of shape tuples, shapes of inputTensors.\n    this.inputShapes = args.inputShapes;\n    // List of shape tuples, shapes of outputTensors.\n    this.outputShapes = args.outputShapes;\n\n    // Add nodes to all layers involved.\n    for (const layer of args.inboundLayers) {\n      if (layer != null) {\n        layer.outboundNodes.push(this);\n      }\n    }\n    args.outboundLayer.inboundNodes.push(this);\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const inboundNames: string[] = [];\n    for (const layer of this.inboundLayers) {\n      if (layer != null) {\n        inboundNames.push(layer.name);\n      } else {\n        inboundNames.push(null);\n      }\n    }\n    return {\n      outboundLayer: this.outboundLayer ? this.outboundLayer.name : null,\n      inboundLayers: inboundNames,\n      nodeIndices: this.nodeIndices,\n      tensorIndices: this.tensorIndices\n    };\n  }\n}\n\n/** Constructor arguments for Layer. */\nexport declare interface LayerArgs {\n  /**\n   * If defined, will be used to create an input layer to insert before this\n   * layer. If both `inputShape` and `batchInputShape` are defined,\n   * `batchInputShape` will be used. This argument is only applicable to input\n   * layers (the first layer of a model).\n   */\n  inputShape?: Shape;\n  /**\n   * If defined, will be used to create an input layer to insert before this\n   * layer. If both `inputShape` and `batchInputShape` are defined,\n   * `batchInputShape` will be used. This argument is only applicable to input\n   * layers (the first layer of a model).\n   */\n  batchInputShape?: Shape;\n  /**\n   * If `inputShape` is specified and `batchInputShape` is *not* specified,\n   * `batchSize` is used to construct the `batchInputShape`: `[batchSize,\n   * ...inputShape]`\n   */\n  batchSize?: number;\n  /**\n   * The data-type for this layer. Defaults to 'float32'.\n   * This argument is only applicable to input layers (the first layer of a\n   * model).\n   */\n  dtype?: DataType;\n  /** Name for this layer. */\n  name?: string;\n  /**\n   * Whether the weights of this layer are updatable by `fit`.\n   * Defaults to true.\n   */\n  trainable?: boolean;\n  /**\n   * Initial weight values of the layer.\n   */\n  weights?: Tensor[];\n  /** Legacy support. Do not use for new code. */\n  inputDType?: DataType;\n}\n\n// If necessary, add `output` arguments to the CallHook function.\n// This is currently used for testing only, but may be used for debugger-related\n// purposes in the future.\nexport type CallHook = (inputs: Tensor|Tensor[], kwargs: Kwargs) => void;\n\nlet _nextLayerID = 0;\n\n/**\n * A layer is a grouping of operations and weights that can be composed to\n * create a `tf.LayersModel`.\n *\n * Layers are constructed by using the functions under the\n * [tf.layers](#Layers-Basic) namespace.\n *\n * @doc {heading: 'Layers', subheading: 'Classes', namespace: 'layers'}\n */\nexport abstract class Layer extends serialization.Serializable {\n  /** Name for this layer. Must be unique within a model. */\n  name: string;\n  /**\n   * List of InputSpec class instances.\n   *\n   * Each entry describes one required input:\n   * - ndim\n   * - dtype\n   * A layer with `n` input tensors must have an `inputSpec` of length `n`.\n   */\n  inputSpec: InputSpec[];\n  supportsMasking: boolean;\n  /** Whether the layer weights will be updated during training. */\n  protected trainable_: boolean;\n  batchInputShape: Shape;\n  dtype: DataType;\n  initialWeights: Tensor[];\n\n  inboundNodes: Node[];\n  outboundNodes: Node[];\n\n  activityRegularizer: Regularizer;\n\n  protected _trainableWeights: LayerVariable[];\n  private _nonTrainableWeights: LayerVariable[];\n  private _losses: RegularizerFn[];\n  // TODO(cais): _updates is currently unused.\n  private _updates: Tensor[];\n  private _built: boolean;\n  private _callHook: CallHook = null;\n\n  private _addedWeightNames: string[] = [];\n\n  readonly id: number;\n\n  // Porting Notes: PyKeras does not have this property in this base Layer\n  //   class. Instead lets Layer subclass set it dynamically and checks the\n  //   value with `hasattr`. In tfjs-layers, we let this be a member of this\n  //   base class.\n  protected _stateful = false;\n\n  protected _refCount: number|null;\n\n  // A flag for whether fast (i.e., all-zero) weight initialization is to\n  // be used during `build()` call. This speeds up weight initialization\n  // by saving unnecessary calls to expensive initializers in cases where\n  // the initialized values will be overwritten by loaded weight values\n  // during model loading.\n  private fastWeightInitDuringBuild: boolean;\n\n  constructor(args: LayerArgs = {}) {\n    super();\n    this.id = _nextLayerID++;\n\n    this.activityRegularizer = null;\n\n    this.inputSpec = null;\n    this.supportsMasking = false;\n\n    // These properties will be set upon call of this.build()\n    this._trainableWeights = [];\n    this._nonTrainableWeights = [];\n    this._losses = [];\n    this._updates = [];\n    this._built = false;\n\n    /*\n      These lists will be filled via successive calls\n      to this.addInboundNode().\n     */\n    this.inboundNodes = [];\n    this.outboundNodes = [];\n\n    let name = args.name;\n    if (!name) {\n      const prefix = this.getClassName();\n      name = generic_utils.toSnakeCase(prefix) + '_' + getUid(prefix);\n    }\n    this.name = name;\n\n    this.trainable_ = args.trainable == null ? true : args.trainable;\n\n    if (args.inputShape != null || args.batchInputShape != null) {\n      /*\n        In this case we will later create an input layer\n        to insert before the current layer\n       */\n      let batchInputShape: Shape;\n      if (args.batchInputShape != null) {\n        batchInputShape = args.batchInputShape;\n      } else if (args.inputShape != null) {\n        let batchSize: number = null;\n        if (args.batchSize != null) {\n          batchSize = args.batchSize;\n        }\n        batchInputShape = [batchSize].concat(args.inputShape);\n      }\n      this.batchInputShape = batchInputShape;\n\n      // Set dtype.\n      let dtype = args.dtype;\n      if (dtype == null) {\n        dtype = args.inputDType;\n      }\n      if (dtype == null) {\n        dtype = 'float32';\n      }\n      this.dtype = dtype;\n    }\n\n    if (args.weights != null) {\n      this.initialWeights = args.weights;\n    } else {\n      this.initialWeights = null;\n    }\n\n    // The value of `_refCount` is initialized to null. When the layer is used\n    // in a symbolic way for the first time, it will be set to 1.\n    this._refCount = null;\n\n    this.fastWeightInitDuringBuild = false;\n  }\n\n  /**\n   * Converts a layer and its index to a unique (immutable type) name.\n   * This function is used internally with `this.containerNodes`.\n   * @param layer The layer.\n   * @param nodeIndex The layer's position (e.g. via enumerate) in a list of\n   *   nodes.\n   *\n   * @returns The unique name.\n   */\n  protected static nodeKey(layer: Layer, nodeIndex: number) {\n    return layer.name + '_ib-' + nodeIndex.toString();\n  }\n\n  /**\n   * Returns this.inboundNode at index nodeIndex.\n   *\n   * Porting note: This is a replacement for _get_node_attribute_at_index()\n   * @param nodeIndex\n   * @param attrName The name of the attribute related to request for this node.\n   */\n  private getNodeAtIndex(nodeIndex: number, attrName: string): Node {\n    if (this.inboundNodes.length === 0) {\n      throw new RuntimeError(\n          'The layer has never been called ' +\n          `and thus has no defined ${attrName}.`);\n    }\n    if (this.inboundNodes.length <= nodeIndex) {\n      throw new ValueError(\n          `Asked to get ${attrName} at node ${nodeIndex}, ` +\n          `but the layer has only ${this.inboundNodes.length} inbound nodes.`);\n    }\n    return this.inboundNodes[nodeIndex];\n  }\n\n  /**\n   * Retrieves the input tensor(s) of a layer at a given node.\n   *\n   * @param nodeIndex Integer, index of the node from which to retrieve the\n   *   attribute. E.g. `nodeIndex=0` will correspond to the first time the layer\n   *   was called.\n   *\n   * @return A tensor (or list of tensors if the layer has multiple inputs).\n   */\n  getInputAt(nodeIndex: number): SymbolicTensor|SymbolicTensor[] {\n    return generic_utils.singletonOrArray(\n        this.getNodeAtIndex(nodeIndex, 'input').inputTensors);\n  }\n\n  /**\n   * Retrieves the output tensor(s) of a layer at a given node.\n   *\n   * @param nodeIndex Integer, index of the node from which to retrieve the\n   *   attribute. E.g. `nodeIndex=0` will correspond to the first time the layer\n   *   was called.\n   *\n   * @return A tensor (or list of tensors if the layer has multiple outputs).\n   */\n  getOutputAt(nodeIndex: number): SymbolicTensor|SymbolicTensor[] {\n    return generic_utils.singletonOrArray(\n        this.getNodeAtIndex(nodeIndex, 'output').outputTensors);\n  }\n\n  // Properties\n\n  /**\n   * Retrieves the input tensor(s) of a layer.\n   *\n   * Only applicable if the layer has exactly one inbound node,\n   * i.e. if it is connected to one incoming layer.\n   *\n   * @return Input tensor or list of input tensors.\n   *\n   * @exception AttributeError if the layer is connected to more than one\n   *   incoming layers.\n   */\n  get input(): SymbolicTensor|SymbolicTensor[] {\n    if (this.inboundNodes.length > 1) {\n      throw new AttributeError(\n          `Layer ${this.name}` +\n          ' has multiple inbound nodes, ' +\n          'hence the notion of \"layer input\" ' +\n          'is ill-defined. ' +\n          'Use `getInputAt(nodeIndex)` instead.');\n    } else if (this.inboundNodes.length === 0) {\n      throw new AttributeError(\n          `Layer ${this.name}` +\n          ' is not connected, no input to return.');\n    }\n    return generic_utils.singletonOrArray(\n        this.getNodeAtIndex(0, 'input').inputTensors);\n  }\n\n  /**\n   * Retrieves the output tensor(s) of a layer.\n   *\n   * Only applicable if the layer has exactly one inbound node,\n   * i.e. if it is connected to one incoming layer.\n   *\n   * @return Output tensor or list of output tensors.\n   *\n   * @exception AttributeError if the layer is connected to more than one\n   *   incoming layers.\n   */\n  get output(): SymbolicTensor|SymbolicTensor[] {\n    if (this.inboundNodes.length === 0) {\n      throw new AttributeError(\n          `Layer ${this.name}` +\n          ' has no inbound nodes.');\n    }\n    if (this.inboundNodes.length > 1) {\n      throw new AttributeError(\n          `Layer ${this.name}` +\n          ' has multiple inbound nodes, ' +\n          'hence the notion of \"layer output\" ' +\n          'is ill-defined. ' +\n          'Use `getOutputAt(nodeIndex)` instead.');\n    }\n    return generic_utils.singletonOrArray(\n        this.getNodeAtIndex(0, 'output').outputTensors);\n  }\n\n  get losses(): RegularizerFn[] {\n    return this._losses;\n  }\n\n  /**\n   * Retrieves the Layer's current loss values.\n   *\n   * Used for regularizers during training.\n   */\n  calculateLosses(): Scalar[] {\n    // Porting Node: This is an augmentation to Layer.loss in PyKeras.\n    //   In PyKeras, Layer.loss returns symbolic tensors. Here a concrete\n    //   Tensor (specifically Scalar) values are returned. This is due to the\n    //   imperative backend.\n    return this.losses.map(lossFn => lossFn());\n  }\n\n  get updates(): Tensor[] {\n    return this._updates;\n  }\n\n  get built(): boolean {\n    return this._built;\n  }\n\n  set built(built: boolean) {\n    this._built = built;\n  }\n\n  get trainable(): boolean {\n    return this.trainable_;\n  }\n\n  set trainable(trainable: boolean) {\n    this._trainableWeights.forEach(w => w.trainable = trainable);\n    this.trainable_ = trainable;\n  }\n\n  get trainableWeights(): LayerVariable[] {\n    if (this.trainable_) {\n      return this._trainableWeights.filter(w => w.trainable);\n    } else {\n      return [];\n    }\n  }\n\n  set trainableWeights(weights: LayerVariable[]) {\n    this._trainableWeights = weights;\n  }\n\n  get nonTrainableWeights(): LayerVariable[] {\n    if (this.trainable) {\n      return this._trainableWeights.filter(w => !w.trainable)\n          .concat(this._nonTrainableWeights);\n    } else {\n      return this._trainableWeights.concat(this._nonTrainableWeights);\n    }\n  }\n\n  set nonTrainableWeights(weights: LayerVariable[]) {\n    this._nonTrainableWeights = weights;\n  }\n\n  /**\n   * The concatenation of the lists trainableWeights and nonTrainableWeights\n   * (in this order).\n   */\n  get weights(): LayerVariable[] {\n    return this.trainableWeights.concat(this.nonTrainableWeights);\n  }\n\n  get stateful(): boolean {\n    return this._stateful;\n  }\n\n  /**\n   * Reset the states of the layer.\n   *\n   * This method of the base Layer class is essentially a no-op.\n   * Subclasses that are stateful (e.g., stateful RNNs) should override this\n   * method.\n   */\n  resetStates(): void {\n    if (!this.stateful) {\n      throw new Error(\n          'Cannot call the resetStates() method of a non-stateful Layer ' +\n          'object.');\n    }\n  }\n\n  /**\n   * Checks compatibility between the layer and provided inputs.\n   *\n   * This checks that the tensor(s) `input`\n   * verify the input assumptions of the layer\n   * (if any). If not, exceptions are raised.\n   *\n   * @param inputs Input tensor or list of input tensors.\n   *\n   * @exception ValueError in case of mismatch between\n   *   the provided inputs and the expectations of the layer.\n   */\n  protected assertInputCompatibility(inputs: Tensor|Tensor[]|SymbolicTensor|\n                                     SymbolicTensor[]): void {\n    inputs = generic_utils.toList(inputs);\n    if (this.inputSpec == null || this.inputSpec.length === 0) {\n      return;\n    }\n    const inputSpec = generic_utils.toList(this.inputSpec);\n    if (inputs.length !== inputSpec.length) {\n      throw new ValueError(\n          `Layer ${this.name} expects ${inputSpec.length} inputs, ` +\n          `but it received ${inputs.length} input tensors. ` +\n          `Input received: ${inputs}`);\n    }\n    for (let inputIndex = 0; inputIndex < inputs.length; inputIndex++) {\n      const x = inputs[inputIndex];\n      const spec: InputSpec = inputSpec[inputIndex];\n      if (spec == null) {\n        continue;\n      }\n\n      // Check ndim.\n      const ndim = x.rank;\n      if (spec.ndim != null) {\n        if (ndim !== spec.ndim) {\n          throw new ValueError(\n              `Input ${inputIndex} is incompatible with layer ${this.name}: ` +\n              `expected ndim=${spec.ndim}, found ndim=${ndim}`);\n        }\n      }\n      if (spec.maxNDim != null) {\n        if (ndim > spec.maxNDim) {\n          throw new ValueError(\n              `Input ${inputIndex} is incompatible with layer ${this.name}` +\n              `: expected max_ndim=${spec.maxNDim}, found ndim=${ndim}`);\n        }\n      }\n      if (spec.minNDim != null) {\n        if (ndim < spec.minNDim) {\n          throw new ValueError(\n              `Input ${inputIndex} is incompatible with layer ${this.name}` +\n              `: expected min_ndim=${spec.minNDim}, found ndim=${ndim}.`);\n        }\n      }\n\n      // Check dtype.\n      if (spec.dtype != null) {\n        if (x.dtype !== spec.dtype) {\n          throw new ValueError(\n              `Input ${inputIndex} is incompatible with layer ${this.name} ` +\n              `: expected dtype=${spec.dtype}, found dtype=${x.dtype}.`);\n        }\n      }\n\n      // Check specific shape axes.\n      if (spec.axes) {\n        const xShape = x.shape;\n        for (const key in spec.axes) {\n          const axis = Number(key);\n          const value = spec.axes[key];\n          // Perform Python-style slicing in case axis < 0;\n          // TODO(cais): Use https://github.com/alvivi/typescript-underscore to\n          // ensure type safety through Underscore calls.\n          const xShapeAtAxis =\n              axis >= 0 ? xShape[axis] : xShape[xShape.length + axis];\n          if (value != null && [value, null].indexOf(xShapeAtAxis) === -1) {\n            throw new ValueError(\n                `Input ${inputIndex} is incompatible with layer ` +\n                `${this.name}: expected axis ${axis} of input shape to ` +\n                `have value ${value} but got shape ${xShape}.`);\n          }\n        }\n      }\n\n      // Check shape.\n      if (spec.shape != null) {\n        for (let i = 0; i < spec.shape.length; ++i) {\n          const specDim = spec.shape[i];\n          const dim = x.shape[i];\n          if (specDim != null && dim != null) {\n            if (specDim !== dim) {\n              throw new ValueError(\n                  `Input ${inputIndex} is incompatible with layer ` +\n                  `${this.name}: expected shape=${spec.shape}, ` +\n                  `found shape=${x.shape}.`);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * This is where the layer's logic lives.\n   *\n   * @param inputs Input tensor, or list/tuple of input tensors.\n   * @param kwargs Additional keyword arguments.\n   *\n   * @return A tensor or list/tuple of tensors.\n   */\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return inputs;\n  }\n\n  protected invokeCallHook(inputs: Tensor|Tensor[], kwargs: Kwargs) {\n    if (this._callHook != null) {\n      this._callHook(inputs, kwargs);\n    }\n  }\n\n  /**\n   * Set call hook.\n   * This is currently used for testing only.\n   * @param callHook\n   */\n  setCallHook(callHook: CallHook) {\n    this._callHook = callHook;\n  }\n\n  /**\n   * Clear call hook.\n   * This is currently used for testing only.\n   */\n  clearCallHook() {\n    this._callHook = null;\n  }\n\n  /**\n   * Builds or executes a `Layer's logic.\n   *\n   * When called with `tf.Tensor`(s), execute the `Layer`s computation and\n   * return Tensor(s). For example:\n   *\n   * ```js\n   * const denseLayer = tf.layers.dense({\n   *   units: 1,\n   *   kernelInitializer: 'zeros',\n   *   useBias: false\n   * });\n   *\n   * // Invoke the layer's apply() method with a `tf.Tensor` (with concrete\n   * // numeric values).\n   * const input = tf.ones([2, 2]);\n   * const output = denseLayer.apply(input);\n   *\n   * // The output's value is expected to be [[0], [0]], due to the fact that\n   * // the dense layer has a kernel initialized to all-zeros and does not have\n   * // a bias.\n   * output.print();\n   * ```\n   *\n   * When called with `tf.SymbolicTensor`(s), this will prepare the layer for\n   * future execution.  This entails internal book-keeping on shapes of\n   * expected Tensors, wiring layers together, and initializing weights.\n   *\n   * Calling `apply` with `tf.SymbolicTensor`s are typically used during the\n   * building of non-`tf.Sequential` models. For example:\n   *\n   * ```js\n   * const flattenLayer = tf.layers.flatten();\n   * const denseLayer = tf.layers.dense({units: 1});\n   *\n   * // Use tf.layers.input() to obtain a SymbolicTensor as input to apply().\n   * const input = tf.input({shape: [2, 2]});\n   * const output1 = flattenLayer.apply(input);\n   *\n   * // output1.shape is [null, 4]. The first dimension is the undetermined\n   * // batch size. The second dimension comes from flattening the [2, 2]\n   * // shape.\n   * console.log(JSON.stringify(output1.shape));\n   *\n   * // The output SymbolicTensor of the flatten layer can be used to call\n   * // the apply() of the dense layer:\n   * const output2 = denseLayer.apply(output1);\n   *\n   * // output2.shape is [null, 1]. The first dimension is the undetermined\n   * // batch size. The second dimension matches the number of units of the\n   * // dense layer.\n   * console.log(JSON.stringify(output2.shape));\n   *\n   * // The input and output and be used to construct a model that consists\n   * // of the flatten and dense layers.\n   * const model = tf.model({inputs: input, outputs: output2});\n   * ```\n   *\n   * @param inputs a `tf.Tensor` or `tf.SymbolicTensor` or an Array of them.\n   * @param kwargs Additional keyword arguments to be passed to `call()`.\n   *\n   * @return Output of the layer's `call` method.\n   *\n   * @exception ValueError error in case the layer is missing shape information\n   *   for its `build` call.\n   *\n   * @doc {heading: 'Models', 'subheading': 'Classes'}\n   */\n  // Porting Note: This is a replacement for __call__() in Python.\n  apply(\n      inputs: Tensor|Tensor[]|SymbolicTensor|SymbolicTensor[],\n      kwargs?: Kwargs): Tensor|Tensor[]|SymbolicTensor|SymbolicTensor[] {\n    kwargs = kwargs || {};\n\n    this.assertNotDisposed();\n\n    // Ensure inputs are all the same type.\n    const inputsList = generic_utils.toList(inputs);\n\n    let allAreSymbolic = true;\n    for (const input of inputsList) {\n      if (!(input instanceof SymbolicTensor)) {\n        allAreSymbolic = false;\n        break;\n      }\n    }\n    let noneAreSymbolic = true;\n    for (const input of inputsList) {\n      if (input instanceof SymbolicTensor) {\n        noneAreSymbolic = false;\n        break;\n      }\n    }\n\n    if (allAreSymbolic === noneAreSymbolic) {\n      throw new ValueError(\n          'Arguments to apply() must be all ' +\n          'SymbolicTensors or all Tensors');\n    }\n\n    // TODO(michaelterry): nameScope() may not be necessary.\n    return nameScope(this.name, () => {\n      // Handle laying building (weight creating, input spec locking).\n      if (!this.built) {\n        /*\n          Throw exceptions in case the input is not compatible\n          with the inputSpec specified in the layer constructor.\n         */\n        this.assertInputCompatibility(inputs);\n\n        // Collect input shapes to build layer.\n        const inputShapes: Shape[] = [];\n        for (const xElem of generic_utils.toList(inputs)) {\n          inputShapes.push(xElem.shape);\n        }\n        this.build(generic_utils.singletonOrArray(inputShapes));\n        this.built = true;\n\n        // Load weights that were specified at layer instantiation.\n        if (this.initialWeights) {\n          this.setWeights(this.initialWeights);\n        }\n\n        if (this._refCount === null && noneAreSymbolic) {\n          // The first use of this layer is a non-symbolic call, set ref count\n          // to 1 so the Layer can be properly disposed if its dispose() method\n          // is called.\n          this._refCount = 1;\n        }\n      }\n\n      /*\n        Throw exceptions in case the input is not compatible\n        with the inputSpec set at build time.\n      */\n      this.assertInputCompatibility(inputs);\n\n      // Handle mask propagation.\n      // TODO(michaelterry): Mask propagation not currently implemented.\n\n      // Actually call the layer, collecting output(s), mask(s), and shape(s).\n      if (noneAreSymbolic) {\n        let output = this.call(inputs as Tensor | Tensor[], kwargs);\n        // TODO(michaelterry): Compute the outputMask\n\n        // If the layer returns tensors from its inputs, unmodified,\n        // we copy them to avoid loss of tensor metadata.\n        const outputList: Tensor[] = generic_utils.toList(output);\n        const outputListCopy: Tensor[] = [];\n        // TODO(michaelterry): This copying may not be necessary given our eager\n        // backend.\n        for (let x of outputList) {\n          if (inputsList.indexOf(x) !== -1) {\n            x = x.clone();\n          }\n          outputListCopy.push(x);\n        }\n        output = generic_utils.singletonOrArray(outputListCopy);\n\n        if (this.activityRegularizer != null) {\n          throw new NotImplementedError(\n              'Layer invocation in the presence of activity ' +\n              'regularizer(s) is not supported yet.');\n        }\n\n        // TODO(michaelterry): Call addInboundNode()?\n        return output;\n      } else {\n        const inputShape = collectInputShape(inputs);\n        const outputShape = this.computeOutputShape(inputShape);\n        let output: SymbolicTensor|SymbolicTensor[];\n        const outputDType = guessOutputDType(inputs);\n        this.warnOnIncompatibleInputShape(\n            Array.isArray(inputs) ? inputShape[0] as Shape :\n                                    inputShape as Shape);\n\n        if (outputShape != null && outputShape.length > 0 &&\n            Array.isArray(outputShape[0])) {\n          // We have multiple output shapes. Create multiple output tensors.\n          output = (outputShape as Shape[])\n                       .map(\n                           (shape, index) => new SymbolicTensor(\n                               outputDType, shape, this,\n                               generic_utils.toList(inputs), kwargs, this.name,\n                               index));\n        } else {\n          output = new SymbolicTensor(\n              outputDType, outputShape as Shape, this,\n              generic_utils.toList(inputs), kwargs, this.name);\n        }\n\n        /*\n          Add an inbound node to the layer, so that it keeps track\n          of the call and of all new variables created during the call.\n          This also updates the layer history of the output tensor(s).\n          If the input tensor(s) had no previous history,\n          this does nothing.\n        */\n        this.addInboundNode(\n            inputs as SymbolicTensor | SymbolicTensor[], output, null, null,\n            inputShape, outputShape, kwargs);\n        this._refCount++;\n\n        if (this.activityRegularizer != null) {\n          throw new NotImplementedError(\n              'Layer invocation in the presence of activity ' +\n              'regularizer(s) is not supported yet.');\n        }\n\n        return output;\n      }\n    });\n  }\n\n  /**\n   * Check compatibility between input shape and this layer's batchInputShape.\n   *\n   * Print warning if any incompatibility is found.\n   *\n   * @param inputShape Input shape to be checked.\n   */\n  protected warnOnIncompatibleInputShape(inputShape: Shape) {\n    if (this.batchInputShape == null) {\n      return;\n    } else if (inputShape.length !== this.batchInputShape.length) {\n      console.warn(\n          `The rank of the input tensor provided (shape: ` +\n          `${JSON.stringify(inputShape)}) does not match that of the ` +\n          `batchInputShape (${JSON.stringify(this.batchInputShape)}) ` +\n          `of the layer ${this.name}`);\n    } else {\n      let dimMismatch = false;\n      this.batchInputShape.forEach((dimension, i) => {\n        if (dimension != null && inputShape[i] != null &&\n            inputShape[i] !== dimension) {\n          dimMismatch = true;\n        }\n      });\n      if (dimMismatch) {\n        console.warn(\n            `The shape of the input tensor ` +\n            `(${JSON.stringify(inputShape)}) does not ` +\n            `match the expectation of layer ${this.name}: ` +\n            `${JSON.stringify(this.batchInputShape)}`);\n      }\n    }\n  }\n\n  /**\n   * Retrieves the output shape(s) of a layer.\n   *\n   * Only applicable if the layer has only one inbound node, or if all inbound\n   * nodes have the same output shape.\n   *\n   * @returns Output shape or shapes.\n   * @throws AttributeError: if the layer is connected to more than one incoming\n   *   nodes.\n   *\n   * @doc {heading: 'Models', 'subheading': 'Classes'}\n   */\n  get outputShape(): Shape|Shape[] {\n    if (this.inboundNodes == null || this.inboundNodes.length === 0) {\n      throw new AttributeError(\n          `The layer ${this.name} has never been called and thus has no ` +\n          `defined output shape.`);\n    }\n    const allOutputShapes: string[] = [];\n    for (const node of this.inboundNodes) {\n      const shapeString = JSON.stringify(node.outputShapes);\n      if (allOutputShapes.indexOf(shapeString) === -1) {\n        allOutputShapes.push(shapeString);\n      }\n    }\n    if (allOutputShapes.length === 1) {\n      const outputShapes = this.inboundNodes[0].outputShapes;\n      if (Array.isArray(outputShapes) && Array.isArray(outputShapes[0]) &&\n          outputShapes.length === 1) {\n        return (outputShapes as Shape[])[0];\n      } else {\n        return outputShapes;\n      }\n\n    } else {\n      throw new AttributeError(\n          `The layer ${this.name} has multiple inbound nodes with different ` +\n          `output shapes. Hence the notion of \"output shape\" is ill-defined ` +\n          `for the layer.`);\n      // TODO(cais): Implement getOutputShapeAt().\n    }\n  }\n\n  /**\n   * Counts the total number of numbers (e.g., float32, int32) in the\n   * weights.\n   *\n   * @returns An integer count.\n   * @throws RuntimeError: If the layer is not built yet (in which case its\n   *   weights are not defined yet.)\n   *\n   * @doc {heading: 'Models', 'subheading': 'Classes'}\n   */\n  countParams(): number {\n    if (!this.built) {\n      throw new RuntimeError(\n          `You tried to call countParams() on ${this.name}, ` +\n          `but the layer is not built yet. Build it first by calling ` +\n          `build(batchInputShape).`);\n    }\n    return variable_utils.countParamsInWeights(this.weights);\n  }\n\n  /**\n   * Creates the layer weights.\n   *\n   * Must be implemented on all layers that have weights.\n   *\n   * Called when apply() is called to construct the weights.\n   *\n   * @param inputShape A `Shape` or array of `Shape` (unused).\n   *\n   * @doc {heading: 'Models', 'subheading': 'Classes'}\n   */\n  build(inputShape: Shape|Shape[]) {\n    this.built = true;\n  }\n\n  /**\n   * Returns the current values of the weights of the layer.\n   *\n   * @param trainableOnly Whether to get the values of only trainable weights.\n   * @returns Weight values as an `Array` of `tf.Tensor`s.\n   *\n   * @doc {heading: 'Models', 'subheading': 'Classes'}\n   */\n  getWeights(trainableOnly = false): Tensor[] {\n    return batchGetValue(trainableOnly ? this.trainableWeights : this.weights);\n  }\n\n  /**\n   * Sets the weights of the layer, from Tensors.\n   *\n   * @param weights a list of Tensors. The number of arrays and their shape\n   *   must match number of the dimensions of the weights of the layer (i.e.\n   *   it should match the output of `getWeights`).\n   *\n   * @exception ValueError If the provided weights list does not match the\n   *   layer's specifications.\n   *\n   * @doc {heading: 'Models', 'subheading': 'Classes'}\n   */\n  setWeights(weights: Tensor[]): void {\n    tidy(() => {\n      const params = this.weights;\n      if (params.length !== weights.length) {\n        // TODO(cais): Restore the following and use `providedWeights`, instead\n        // of `weights` in the error message, once the deeplearn.js bug is\n        // fixed: https://github.com/PAIR-code/deeplearnjs/issues/498 const\n        // providedWeights = JSON.stringify(weights).substr(0, 50);\n        throw new ValueError(\n            `You called setWeights(weights) on layer \"${this.name}\" ` +\n            `with a weight list of length ${weights.length}, ` +\n            `but the layer was expecting ${params.length} weights. ` +\n            `Provided weights: ${weights}...`);\n      }\n      if (params.length === 0) {\n        return;\n      }\n      const weightValueTuples: Array<[LayerVariable, Tensor]> = [];\n      const paramValues = batchGetValue(params);\n      for (let i = 0; i < paramValues.length; ++i) {\n        const pv = paramValues[i];\n        const p = params[i];\n        const w = weights[i];\n        if (!util.arraysEqual(pv.shape, w.shape)) {\n          throw new ValueError(\n              `Layer weight shape ${pv.shape} ` +\n              `not compatible with provided weight shape ${w.shape}`);\n        }\n        weightValueTuples.push([p, w]);\n      }\n      batchSetValue(weightValueTuples);\n    });\n  }\n\n  /**\n   * Adds a weight variable to the layer.\n   *\n   * @param name Name of the new weight variable.\n   * @param shape The shape of the weight.\n   * @param dtype The dtype of the weight.\n   * @param initializer An initializer instance.\n   * @param regularizer A regularizer instance.\n   * @param trainable Whether the weight should be trained via backprop or not\n   *   (assuming that the layer itself is also trainable).\n   * @param constraint An optional trainable.\n   * @return The created weight variable.\n   *\n   * @doc {heading: 'Models', 'subheading': 'Classes'}\n   */\n  protected addWeight(\n      name: string, shape: Shape, dtype?: DataType, initializer?: Initializer,\n      regularizer?: Regularizer, trainable?: boolean,\n      constraint?: Constraint): LayerVariable {\n    // Reject duplicate weight names.\n    if (this._addedWeightNames.indexOf(name) !== -1) {\n      throw new ValueError(\n          `Duplicate weight name ${name} for layer ${this.name}`);\n    }\n    this._addedWeightNames.push(name);\n\n    if (dtype == null) {\n      dtype = 'float32';\n    }\n\n    if (this.fastWeightInitDuringBuild) {\n      initializer = getInitializer('zeros');\n    }\n    const initValue = initializer.apply(shape, dtype);\n    const weight =\n        new LayerVariable(initValue, dtype, name, trainable, constraint);\n    initValue.dispose();\n    // Request backend not to dispose the weights of the model on scope() exit.\n    if (regularizer != null) {\n      this.addLoss(() => regularizer.apply(weight.read()));\n    }\n    if (trainable == null) {\n      trainable = true;\n    }\n    if (trainable) {\n      this._trainableWeights.push(weight);\n    } else {\n      this._nonTrainableWeights.push(weight);\n    }\n    return weight;\n  }\n\n  /**\n   * Set the fast-weight-initialization flag.\n   *\n   * In cases where the initialized weight values will be immediately\n   * overwritten by loaded weight values during model loading, setting\n   * the flag to `true` saves unnecessary calls to potentially expensive\n   * initializers and speeds up the loading process.\n   *\n   * @param value Target value of the flag.\n   */\n  setFastWeightInitDuringBuild(value: boolean) {\n    this.fastWeightInitDuringBuild = value;\n  }\n\n  /**\n   * Add losses to the layer.\n   *\n   * The loss may potentionally be conditional on some inputs tensors,\n   * for instance activity losses are conditional on the layer's inputs.\n   *\n   * @doc {heading: 'Models', 'subheading': 'Classes'}\n   */\n  addLoss(losses: RegularizerFn|RegularizerFn[]): void {\n    if (losses == null || Array.isArray(losses) && losses.length === 0) {\n      return;\n    }\n    // Update this.losses\n    losses = generic_utils.toList(losses);\n    if (this._losses !== undefined && this._losses !== null) {\n      this.losses.push(...losses);\n    }\n  }\n\n  /**\n   * Computes the output shape of the layer.\n   *\n   * Assumes that the layer will be built to match that input shape provided.\n   *\n   * @param inputShape A shape (tuple of integers) or a list of shape tuples\n   *   (one per output tensor of the layer). Shape tuples can include null for\n   *   free dimensions, instead of an integer.\n   *\n   * @doc {heading: 'Models', 'subheading': 'Classes'}\n   */\n  computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    return inputShape;\n  }\n\n  /**\n   * Computes an output mask tensor.\n   *\n   * @param inputs Tensor or list of tensors.\n   * @param mask Tensor or list of tensors.\n   *\n   * @return null or a tensor (or list of tensors, one per output tensor of the\n   * layer).\n   */\n  computeMask(inputs: Tensor|Tensor[], mask?: Tensor|Tensor[]): Tensor\n      |Tensor[] {\n    if (!this.supportsMasking) {\n      if (mask != null) {\n        if (Array.isArray(mask)) {\n          mask.forEach(maskElement => {\n            if (maskElement != null) {\n              throw new TypeError(\n                  `Layer ${this.name} does not support masking, ` +\n                  'but was passed an inputMask.');\n            }\n          });\n        } else {\n          throw new TypeError(\n              `Layer ${this.name} does not support masking, ` +\n              'but was passed an inputMask.');\n        }\n      }\n      // masking not explicitly supported: return null as mask\n      return null;\n    }\n    // if masking is explictly supported, by default\n    // carry over the input mask\n    return mask;\n  }\n\n  /**\n   * Internal method to create an inbound node for the layer.\n   *\n   * @param inputTensors List of input tensors.\n   * @param outputTensors List of output tensors.\n   * @param inputMasks List of input masks (a mask can be a tensor, or null).\n   * @param outputMasks List of output masks (a mask can be a tensor, or null).\n   * @param inputShapes List of input shape tuples.\n   * @param outputShapes List of output shape tuples.\n   * @param kwargs Dictionary of keyword arguments that were passed to the\n   *   `call` method of the layer at the call that created the node.\n   */\n  private addInboundNode(\n      inputTensors: SymbolicTensor|SymbolicTensor[],\n      outputTensors: SymbolicTensor|SymbolicTensor[],\n      inputMasks: Tensor|Tensor[], outputMasks: Tensor|Tensor[],\n      inputShapes: Shape|Shape[], outputShapes: Shape|Shape[],\n      kwargs: {} = null): void {\n    const inputTensorList: SymbolicTensor[] =\n        generic_utils.toList(inputTensors);\n    outputTensors = generic_utils.toList(outputTensors);\n    inputMasks = generic_utils.toList(inputMasks);\n    outputMasks = generic_utils.toList(outputMasks);\n    inputShapes = types_utils.normalizeShapeList(inputShapes);\n    outputShapes = types_utils.normalizeShapeList(outputShapes);\n\n    // Collect input tensor(s) coordinates.\n    const inboundLayers: Layer[] = [];\n    const nodeIndices: number[] = [];\n    const tensorIndices: number[] = [];\n    for (const x of inputTensorList) {\n      /*\n       * TODO(michaelterry): Keras adds this value to tensors; it's not\n       * clear whether we'll use this or not.\n       */\n      inboundLayers.push(x.sourceLayer);\n      nodeIndices.push(x.nodeIndex);\n      tensorIndices.push(x.tensorIndex);\n    }\n\n    // Create node, add it to inbound nodes.\n    // (This call has side effects.)\n    // tslint:disable-next-line:no-unused-expression\n    new Node(\n        {\n          outboundLayer: this,\n          inboundLayers,\n          nodeIndices,\n          tensorIndices,\n          inputTensors: inputTensorList,\n          outputTensors,\n          inputMasks,\n          outputMasks,\n          inputShapes,\n          outputShapes\n        },\n        kwargs);\n\n    // Update tensor history\n    for (let i = 0; i < outputTensors.length; i++) {\n      // TODO(michaelterry: _uses_learning_phase not tracked.\n      outputTensors[i].sourceLayer = this;\n      outputTensors[i].nodeIndex = this.inboundNodes.length - 1;\n      outputTensors[i].tensorIndex = i;\n    }\n  }\n\n  /**\n   * Returns the config of the layer.\n   *\n   * A layer config is a TS dictionary (serializable)\n   * containing the configuration of a layer.\n   * The same layer can be reinstantiated later\n   * (without its trained weights) from this configuration.\n   *\n   * The config of a layer does not include connectivity\n   * information, nor the layer class name.  These are handled\n   * by 'Container' (one layer of abstraction above).\n   *\n   * Porting Note: The TS dictionary follows TS naming standrds for\n   * keys, and uses tfjs-layers type-safe Enums.  Serialization methods\n   * should use a helper function to convert to the pythonic storage\n   * standard. (see serialization_utils.convertTsToPythonic)\n   *\n   * @returns TS dictionary of configuration.\n   *\n   * @doc {heading: 'Models', 'subheading': 'Classes'}\n   */\n  getConfig(): serialization.ConfigDict {\n    const config:\n        serialization.ConfigDict = {name: this.name, trainable: this.trainable};\n    if (this.batchInputShape != null) {\n      config['batchInputShape'] = this.batchInputShape;\n    }\n    if (this.dtype != null) {\n      config['dtype'] = this.dtype;\n    }\n    return config;\n  }\n\n  /**\n   * Dispose the weight variables that this Layer instance holds.\n   *\n   * @returns {number} Number of disposed variables.\n   */\n  protected disposeWeights(): number {\n    this.weights.forEach(weight => weight.dispose());\n    return this.weights.length;\n  }\n\n  protected assertNotDisposed() {\n    if (this._refCount === 0) {\n      throw new Error(`Layer '${this.name}' is already disposed.`);\n    }\n  }\n\n  /**\n   * Attempt to dispose layer's weights.\n   *\n   * This method decrease the reference count of the Layer object by 1.\n   *\n   * A Layer is reference-counted. Its reference count is incremented by 1\n   * the first item its `apply()` method is called and when it becomes a part\n   * of a new `Node` (through calling the `apply()`) method on a\n   * `tf.SymbolicTensor`).\n   *\n   * If the reference count of a Layer becomes 0, all the weights will be\n   * disposed and the underlying memory (e.g., the textures allocated in WebGL)\n   * will be freed.\n   *\n   * Note: If the reference count is greater than 0 after the decrement, the\n   * weights of the Layer will *not* be disposed.\n   *\n   * After a Layer is disposed, it cannot be used in calls such as `apply()`,\n   * `getWeights()` or `setWeights()` anymore.\n   *\n   * @returns A DisposeResult Object with the following fields:\n   *   - refCountAfterDispose: The reference count of the Container after this\n   *     `dispose()` call.\n   *   - numDisposedVariables: Number of `tf.Variable`s (i.e., weights) disposed\n   *     during this `dispose()` call.\n   * @throws {Error} If the layer is not built yet, or if the layer has already\n   *   been disposed.\n   *\n   * @doc {heading: 'Models', 'subheading': 'Classes'}\n   */\n  dispose(): DisposeResult {\n    if (!this.built) {\n      throw new Error(\n          `Cannot dispose Layer ${this.name} because it has not been ` +\n          `built yet.`);\n    }\n\n    if (this._refCount === null) {\n      throw new Error(\n          `Cannot dispose Layer ${this.name} because it has not been used ` +\n          `yet.`);\n    }\n\n    this.assertNotDisposed();\n\n    let numDisposedVariables = 0;\n    if (--this._refCount === 0) {\n      numDisposedVariables = this.disposeWeights();\n    }\n\n    return {refCountAfterDispose: this._refCount, numDisposedVariables};\n  }\n}\n\n/**\n * Collects the input shape(s) of a list of `tf.Tensor`s or\n * `tf.SymbolicTensor`s.\n *\n * TODO(michaelterry): Update PyKeras docs (backport).\n *\n * @param inputTensors List of input tensors (or single input tensor).\n *\n * @return List of shape tuples (or single tuple), one tuple per input.\n */\nfunction collectInputShape(inputTensors: SymbolicTensor|SymbolicTensor[]|Tensor|\n                           Tensor[]): Shape|Shape[] {\n  inputTensors =\n      generic_utils.toList(inputTensors) as SymbolicTensor[] | Tensor[];\n  const shapes: Shape[] = [];\n  for (const x of inputTensors) {\n    shapes.push(x.shape);\n  }\n  return generic_utils.singletonOrArray(shapes);\n}\n\n/**\n * Guesses output dtype based on inputs.\n *\n * At present, just returns 'float32' for any input.\n *\n * @param inputTensors List of input tensors (or single input tensor).\n *\n * @return The guessed DType. At present, always returns 'float32'.\n */\nfunction guessOutputDType(inputTensors: SymbolicTensor|SymbolicTensor[]|Tensor|\n                          Tensor[]): DataType {\n  return 'float32';\n}\n\n/**\n * Returns the list of input tensors necessary to compute `tensor`.\n *\n * Output will always be a list of tensors (potentially with 1 element).\n *\n * @param tensor The tensor to start from.\n * @param layer Origin layer of the tensor.\n * @param nodeIndex Origin node index of the tensor.\n *\n * @return Array of input tensors.\n */\nexport function getSourceInputs(\n    tensor: SymbolicTensor, layer?: Layer,\n    nodeIndex?: number): SymbolicTensor[] {\n  if (layer == null || (nodeIndex != null && nodeIndex > 0)) {\n    layer = tensor.sourceLayer;\n    nodeIndex = tensor.nodeIndex;\n  }\n  if (layer.inboundNodes.length === 0) {\n    return [tensor];\n  } else {\n    const node = layer.inboundNodes[nodeIndex];\n    if (node.inboundLayers.length === 0) {\n      return node.inputTensors;\n    } else {\n      const sourceTensors: SymbolicTensor[] = [];\n      for (let i = 0; i < node.inboundLayers.length; i++) {\n        const x = node.inputTensors[i];\n        const layer = node.inboundLayers[i];\n        const nodeIndex = node.nodeIndices[i];\n        const previousSources = getSourceInputs(x, layer, nodeIndex);\n        // Avoid input redundancy.\n        for (const x of previousSources) {\n          if (sourceTensors.indexOf(x) === -1) {\n            sourceTensors.push(x);\n          }\n        }\n      }\n      return sourceTensors;\n    }\n  }\n}\n"},"lineCount":null}},"error":null,"hash":"4c04133eed6e190bfe6d38d801a6ab95","cacheData":{"env":{}}}