{"id":"viLo","dependencies":[{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-backend-webgl/dist/conv_gpu.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-backend-webgl/src/conv_gpu.ts","includedInParent":true,"mtime":499162500000},{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/package.json","includedInParent":true,"mtime":1609563562293},{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-backend-webgl/package.json","includedInParent":true,"mtime":499162500000}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.Conv3DProgram=exports.Conv2DProgram=void 0;class n{constructor(n,t=!1,e=null,o=!1){this.variableNames=[\"x\",\"W\"],this.outputShape=n.outShape;const d=n.padInfo.top,i=n.padInfo.left,a=n.strideHeight,s=n.strideWidth,x=n.dilationHeight,r=n.dilationWidth,c=n.filterHeight,C=n.filterWidth,l=4*Math.floor(n.inChannels/4),w=n.inChannels%4,h=\"channelsLast\"===n.dataFormat,R=h?1:2,$=h?2:3,u=h?3:1;let g=\"\",v=\"\";e&&(g=o?`float activation(float a) {\\n          float b = getPreluActivationWeightsAtOutCoords();\\n          ${e}\\n        }`:`\\n          float activation(float x) {\\n            ${e}\\n          }\\n        `,v=\"result = activation(result);\");const f=t?\"result += getBiasAtOutCoords();\":\"\";t&&this.variableNames.push(\"bias\"),o&&this.variableNames.push(\"preluActivationWeights\"),this.userCode=`\\n      ${g}\\n\\n      const ivec2 strides = ivec2(${a}, ${s});\\n      const ivec2 pads = ivec2(${d}, ${i});\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int batch = coords[0];\\n        int d2 = coords[${u}];\\n\\n        ivec2 xRCCorner =\\n            ivec2(coords[${R}], coords[${$}]) * strides - pads;\\n        int xRCorner = xRCCorner.x;\\n        int xCCorner = xRCCorner.y;\\n\\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\\n        // ? = to be determined. : = across all values in that axis.\\n        float dotProd = 0.0;\\n        for (int wR = 0; wR < ${c}; wR++) {\\n          int xR = xRCorner + wR * ${x};\\n\\n          if (xR < 0 || xR >= ${n.inHeight}) {\\n            continue;\\n          }\\n\\n          for (int wC = 0; wC < ${C}; wC++) {\\n            int xC = xCCorner + wC * ${r};\\n\\n            if (xC < 0 || xC >= ${n.inWidth}) {\\n              continue;\\n            }\\n\\n            for (int d1 = 0; d1 < ${l}; d1 += 4) {\\n              vec4 wValues = vec4(\\n                getW(wR, wC, d1, d2),\\n                getW(wR, wC, d1 + 1, d2),\\n                getW(wR, wC, d1 + 2, d2),\\n                getW(wR, wC, d1 + 3, d2)\\n              );\\n\\n              if (${h}) {\\n                vec4 xValues = vec4(\\n                  getX(batch, xR, xC, d1),\\n                  getX(batch, xR, xC, d1 + 1),\\n                  getX(batch, xR, xC, d1 + 2),\\n                  getX(batch, xR, xC, d1 + 3)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              } else {\\n                vec4 xValues = vec4(\\n                  getX(batch, d1, xR, xC),\\n                  getX(batch, d1 + 1, xR, xC),\\n                  getX(batch, d1 + 2, xR, xC),\\n                  getX(batch, d1 + 3, xR, xC)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              }\\n            }\\n\\n            if (${1===w}) {\\n\\n              if (${h}) {\\n                dotProd +=\\n                    getX(batch, xR, xC, ${l}) *\\n                    getW(wR, wC, ${l}, d2);\\n              } else {\\n                dotProd +=\\n                    getX(batch, ${l}, xR, xC) *\\n                    getW(wR, wC, ${l}, d2);\\n              }\\n\\n            } else if (${2===w}) {\\n              vec2 wValues = vec2(\\n                getW(wR, wC, ${l}, d2),\\n                getW(wR, wC, ${l} + 1, d2)\\n              );\\n\\n              if (${h}) {\\n                vec2 xValues = vec2(\\n                  getX(batch, xR, xC, ${l}),\\n                  getX(batch, xR, xC, ${l} + 1)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              } else {\\n                vec2 xValues = vec2(\\n                  getX(batch, ${l}, xR, xC),\\n                  getX(batch, ${l} + 1, xR, xC)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              }\\n\\n            } else if (${3===w}) {\\n              vec3 wValues = vec3(\\n                getW(wR, wC, ${l}, d2),\\n                getW(wR, wC, ${l} + 1, d2),\\n                getW(wR, wC, ${l} + 2, d2)\\n              );\\n\\n              if (${h}) {\\n                vec3 xValues = vec3(\\n                  getX(batch, xR, xC, ${l}),\\n                  getX(batch, xR, xC, ${l} + 1),\\n                  getX(batch, xR, xC, ${l} + 2)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              } else {\\n                vec3 xValues = vec3(\\n                  getX(batch, ${l}, xR, xC),\\n                  getX(batch, ${l} + 1, xR, xC),\\n                  getX(batch, ${l} + 2, xR, xC)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              }\\n\\n            }\\n          }\\n        }\\n\\n        float result = dotProd;\\n        ${f}\\n        ${v}\\n        setOutput(result);\\n      }\\n    `}}exports.Conv2DProgram=n;class t{constructor(n){this.variableNames=[\"x\",\"W\"],this.outputShape=n.outShape;const t=n.padInfo.front,e=n.padInfo.top,o=n.padInfo.left,d=n.strideDepth,i=n.strideHeight,a=n.strideWidth,s=n.dilationDepth,x=n.dilationHeight,r=n.dilationWidth,c=n.filterDepth,C=n.filterHeight,l=n.filterWidth,w=4*Math.floor(n.inChannels/4),h=n.inChannels%4;this.userCode=`\\n      const ivec3 strides = ivec3(${d}, ${i}, ${a});\\n      const ivec3 pads = ivec3(${t}, ${e}, ${o});\\n\\n      void main() {\\n        ivec5 coords = getOutputCoords();\\n        int batch = coords.x;\\n        int d2 = coords.u;\\n\\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\\n        int xFCorner = xFRCCorner.x;\\n        int xRCorner = xFRCCorner.y;\\n        int xCCorner = xFRCCorner.z;\\n\\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\\n        // values in that axis.\\n        float dotProd = 0.0;\\n        for (int wF = 0; wF < ${c}; wF++) {\\n          int xF = xFCorner + wF * ${s};\\n\\n          if (xF < 0 || xF >= ${n.inDepth}) {\\n            continue;\\n          }\\n\\n          for (int wR = 0; wR < ${C}; wR++) {\\n            int xR = xRCorner + wR * ${x};\\n\\n            if (xR < 0 || xR >= ${n.inHeight}) {\\n              continue;\\n            }\\n\\n            for (int wC = 0; wC < ${l}; wC++) {\\n              int xC = xCCorner + wC * ${r};\\n\\n              if (xC < 0 || xC >= ${n.inWidth}) {\\n                continue;\\n              }\\n\\n              for (int d1 = 0; d1 < ${w}; d1 += 4) {\\n                vec4 xValues = vec4(\\n                  getX(batch, xF, xR, xC, d1),\\n                  getX(batch, xF, xR, xC, d1 + 1),\\n                  getX(batch, xF, xR, xC, d1 + 2),\\n                  getX(batch, xF, xR, xC, d1 + 3)\\n                );\\n                vec4 wValues = vec4(\\n                  getW(wF, wR, wC, d1, d2),\\n                  getW(wF, wR, wC, d1 + 1, d2),\\n                  getW(wF, wR, wC, d1 + 2, d2),\\n                  getW(wF, wR, wC, d1 + 3, d2)\\n                );\\n\\n                dotProd += dot(xValues, wValues);\\n              }\\n\\n              if (${1===h}) {\\n                dotProd +=\\n                  getX(batch, xF, xR, xC, ${w}) *\\n                  getW(wF, wR, wC, ${w}, d2);\\n              } else if (${2===h}) {\\n                vec2 xValues = vec2(\\n                  getX(batch, xF, xR, xC, ${w}),\\n                  getX(batch, xF, xR, xC, ${w} + 1)\\n                );\\n                vec2 wValues = vec2(\\n                  getW(wF, wR, wC, ${w}, d2),\\n                  getW(wF, wR, wC, ${w} + 1, d2)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              } else if (${3===h}) {\\n                vec3 xValues = vec3(\\n                  getX(batch, xF, xR, xC, ${w}),\\n                  getX(batch, xF, xR, xC, ${w} + 1),\\n                  getX(batch, xF, xR, xC, ${w} + 2)\\n                );\\n                vec3 wValues = vec3(\\n                  getW(wF, wR, wC, ${w}, d2),\\n                  getW(wF, wR, wC, ${w} + 1, d2),\\n                  getW(wF, wR, wC, ${w} + 2, d2)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              }\\n            }\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    `}}exports.Conv3DProgram=t;"},"sourceMaps":{"js":{"mappings":[{"source":"../src/conv_gpu.ts","name":null,"original":{"line":202,"column":26},"generated":{"line":1,"column":0}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":202,"column":26},"generated":{"line":1,"column":13}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":202,"column":26},"generated":{"line":1,"column":20}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":202,"column":26},"generated":{"line":1,"column":35}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":202,"column":26},"generated":{"line":1,"column":43}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":202,"column":26},"generated":{"line":1,"column":56}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":202,"column":26},"generated":{"line":1,"column":57}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":202,"column":26},"generated":{"line":1,"column":64}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":202,"column":26},"generated":{"line":1,"column":68}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":202,"column":26},"generated":{"line":1,"column":76}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":202,"column":26},"generated":{"line":1,"column":90}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":202,"column":26},"generated":{"line":1,"column":98}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":202,"column":26},"generated":{"line":1,"column":117}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":21,"column":6},"generated":{"line":1,"column":119}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":21,"column":13},"generated":{"line":1,"column":125}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":26,"column":2},"generated":{"line":1,"column":127}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":27,"column":6},"generated":{"line":1,"column":139}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":27,"column":41},"generated":{"line":1,"column":141}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":27,"column":51},"generated":{"line":1,"column":144}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":28,"column":6},"generated":{"line":1,"column":146}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":28,"column":27},"generated":{"line":1,"column":148}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":28,"column":33},"generated":{"line":1,"column":153}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":28,"column":61},"generated":{"line":1,"column":156}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":22,"column":2},"generated":{"line":1,"column":159}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":22,"column":2},"generated":{"line":1,"column":164}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":22,"column":18},"generated":{"line":1,"column":178}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":22,"column":19},"generated":{"line":1,"column":179}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":22,"column":24},"generated":{"line":1,"column":183}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":29,"column":9},"generated":{"line":1,"column":188}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":29,"column":9},"generated":{"line":1,"column":193}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":29,"column":23},"generated":{"line":1,"column":205}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":29,"column":32},"generated":{"line":1,"column":207}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":30,"column":10},"generated":{"line":1,"column":216}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":30,"column":10},"generated":{"line":1,"column":222}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":30,"column":19},"generated":{"line":1,"column":224}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":30,"column":28},"generated":{"line":1,"column":226}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":30,"column":36},"generated":{"line":1,"column":234}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":31,"column":10},"generated":{"line":1,"column":238}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":31,"column":20},"generated":{"line":1,"column":240}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":31,"column":29},"generated":{"line":1,"column":242}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":31,"column":37},"generated":{"line":1,"column":250}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":32,"column":10},"generated":{"line":1,"column":255}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":32,"column":25},"generated":{"line":1,"column":257}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":32,"column":34},"generated":{"line":1,"column":259}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":33,"column":10},"generated":{"line":1,"column":272}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":33,"column":24},"generated":{"line":1,"column":274}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":33,"column":33},"generated":{"line":1,"column":276}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":34,"column":10},"generated":{"line":1,"column":288}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":34,"column":27},"generated":{"line":1,"column":290}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":34,"column":36},"generated":{"line":1,"column":292}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":35,"column":10},"generated":{"line":1,"column":307}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":35,"column":26},"generated":{"line":1,"column":309}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":35,"column":35},"generated":{"line":1,"column":311}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":36,"column":10},"generated":{"line":1,"column":325}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":36,"column":25},"generated":{"line":1,"column":327}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":36,"column":34},"generated":{"line":1,"column":329}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":37,"column":10},"generated":{"line":1,"column":342}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":37,"column":24},"generated":{"line":1,"column":344}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":37,"column":33},"generated":{"line":1,"column":346}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":39,"column":10},"generated":{"line":1,"column":358}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":39,"column":72},"generated":{"line":1,"column":360}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":39,"column":34},"generated":{"line":1,"column":362}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":39,"column":39},"generated":{"line":1,"column":367}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":39,"column":45},"generated":{"line":1,"column":373}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":39,"column":54},"generated":{"line":1,"column":375}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":39,"column":67},"generated":{"line":1,"column":386}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":40,"column":10},"generated":{"line":1,"column":389}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":40,"column":36},"generated":{"line":1,"column":391}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":40,"column":45},"generated":{"line":1,"column":393}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":40,"column":58},"generated":{"line":1,"column":404}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":41,"column":10},"generated":{"line":1,"column":406}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":41,"column":51},"generated":{"line":1,"column":408}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":41,"column":27},"generated":{"line":1,"column":425}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":41,"column":36},"generated":{"line":1,"column":427}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":43,"column":10},"generated":{"line":1,"column":438}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":43,"column":19},"generated":{"line":1,"column":440}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":43,"column":36},"generated":{"line":1,"column":442}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":43,"column":40},"generated":{"line":1,"column":444}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":44,"column":10},"generated":{"line":1,"column":446}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":44,"column":19},"generated":{"line":1,"column":448}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":44,"column":36},"generated":{"line":1,"column":450}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":44,"column":40},"generated":{"line":1,"column":452}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":45,"column":10},"generated":{"line":1,"column":454}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":45,"column":23},"generated":{"line":1,"column":456}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":45,"column":40},"generated":{"line":1,"column":458}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":45,"column":44},"generated":{"line":1,"column":460}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":47,"column":8},"generated":{"line":1,"column":462}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":47,"column":8},"generated":{"line":1,"column":466}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":47,"column":28},"generated":{"line":1,"column":468}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":47,"column":32},"generated":{"line":1,"column":471}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":47,"column":57},"generated":{"line":1,"column":473}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":48,"column":8},"generated":{"line":1,"column":476}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":50,"column":8},"generated":{"line":1,"column":480}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":49,"column":10},"generated":{"line":1,"column":482}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":52,"column":12},"generated":{"line":1,"column":587}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":57,"column":14},"generated":{"line":1,"column":658}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":62,"column":6},"generated":{"line":1,"column":685}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":62,"column":31},"generated":{"line":1,"column":687}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":65,"column":10},"generated":{"line":1,"column":719}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":65,"column":10},"generated":{"line":1,"column":725}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":65,"column":27},"generated":{"line":1,"column":727}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":65,"column":37},"generated":{"line":1,"column":729}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":65,"column":73},"generated":{"line":1,"column":763}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":66,"column":8},"generated":{"line":1,"column":766}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":67,"column":11},"generated":{"line":1,"column":769}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":67,"column":11},"generated":{"line":1,"column":774}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":67,"column":25},"generated":{"line":1,"column":788}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":67,"column":30},"generated":{"line":1,"column":793}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":70,"column":8},"generated":{"line":1,"column":801}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":71,"column":11},"generated":{"line":1,"column":804}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":71,"column":11},"generated":{"line":1,"column":809}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":71,"column":25},"generated":{"line":1,"column":823}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":71,"column":30},"generated":{"line":1,"column":828}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":74,"column":9},"generated":{"line":1,"column":854}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":74,"column":9},"generated":{"line":1,"column":859}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":75,"column":8},"generated":{"line":1,"column":879}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":77,"column":36},"generated":{"line":1,"column":921}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":77,"column":53},"generated":{"line":1,"column":927}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":78,"column":33},"generated":{"line":1,"column":966}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":78,"column":44},"generated":{"line":1,"column":972}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":83,"column":26},"generated":{"line":1,"column":1102}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":86,"column":27},"generated":{"line":1,"column":1164}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":86,"column":46},"generated":{"line":1,"column":1178}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":93,"column":32},"generated":{"line":1,"column":1486}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":94,"column":37},"generated":{"line":1,"column":1536}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":96,"column":32},"generated":{"line":1,"column":1575}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":96,"column":41},"generated":{"line":1,"column":1577}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":100,"column":34},"generated":{"line":1,"column":1663}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":101,"column":39},"generated":{"line":1,"column":1715}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":103,"column":34},"generated":{"line":1,"column":1756}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":103,"column":43},"generated":{"line":1,"column":1758}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":107,"column":36},"generated":{"line":1,"column":1849}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":115,"column":20},"generated":{"line":1,"column":2108}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":134,"column":46},"generated":{"line":1,"column":2783}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":134,"column":18},"generated":{"line":1,"column":2787}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":136,"column":20},"generated":{"line":1,"column":2816}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":138,"column":42},"generated":{"line":1,"column":2893}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":139,"column":35},"generated":{"line":1,"column":2935}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":142,"column":34},"generated":{"line":1,"column":3031}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":143,"column":35},"generated":{"line":1,"column":3081}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":146,"column":53},"generated":{"line":1,"column":3135}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":146,"column":25},"generated":{"line":1,"column":3139}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":148,"column":31},"generated":{"line":1,"column":3213}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":149,"column":31},"generated":{"line":1,"column":3254}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":152,"column":20},"generated":{"line":1,"column":3307}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":154,"column":40},"generated":{"line":1,"column":3392}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":155,"column":40},"generated":{"line":1,"column":3438}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":160,"column":32},"generated":{"line":1,"column":3612}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":161,"column":32},"generated":{"line":1,"column":3658}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":166,"column":53},"generated":{"line":1,"column":3790}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":166,"column":25},"generated":{"line":1,"column":3794}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":168,"column":31},"generated":{"line":1,"column":3868}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":169,"column":31},"generated":{"line":1,"column":3909}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":170,"column":31},"generated":{"line":1,"column":3954}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":173,"column":20},"generated":{"line":1,"column":4007}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":175,"column":40},"generated":{"line":1,"column":4092}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":176,"column":40},"generated":{"line":1,"column":4138}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":177,"column":40},"generated":{"line":1,"column":4188}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":182,"column":32},"generated":{"line":1,"column":4362}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":183,"column":32},"generated":{"line":1,"column":4408}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":184,"column":32},"generated":{"line":1,"column":4458}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":194,"column":10},"generated":{"line":1,"column":4649}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":195,"column":10},"generated":{"line":1,"column":4663}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":202,"column":26},"generated":{"line":1,"column":4711}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":202,"column":26},"generated":{"line":1,"column":4719}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":202,"column":26},"generated":{"line":1,"column":4733}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":202,"column":6},"generated":{"line":1,"column":4735}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":202,"column":13},"generated":{"line":1,"column":4741}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":207,"column":2},"generated":{"line":1,"column":4743}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":207,"column":14},"generated":{"line":1,"column":4755}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":203,"column":2},"generated":{"line":1,"column":4758}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":203,"column":2},"generated":{"line":1,"column":4763}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":203,"column":18},"generated":{"line":1,"column":4777}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":203,"column":19},"generated":{"line":1,"column":4778}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":203,"column":24},"generated":{"line":1,"column":4782}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":208,"column":9},"generated":{"line":1,"column":4787}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":208,"column":9},"generated":{"line":1,"column":4792}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":208,"column":23},"generated":{"line":1,"column":4804}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":208,"column":32},"generated":{"line":1,"column":4806}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":209,"column":10},"generated":{"line":1,"column":4815}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":209,"column":10},"generated":{"line":1,"column":4821}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":209,"column":21},"generated":{"line":1,"column":4823}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":209,"column":30},"generated":{"line":1,"column":4825}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":209,"column":38},"generated":{"line":1,"column":4833}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":210,"column":10},"generated":{"line":1,"column":4839}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":210,"column":19},"generated":{"line":1,"column":4841}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":210,"column":28},"generated":{"line":1,"column":4843}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":210,"column":36},"generated":{"line":1,"column":4851}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":211,"column":10},"generated":{"line":1,"column":4855}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":211,"column":20},"generated":{"line":1,"column":4857}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":211,"column":29},"generated":{"line":1,"column":4859}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":211,"column":37},"generated":{"line":1,"column":4867}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":212,"column":10},"generated":{"line":1,"column":4872}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":212,"column":24},"generated":{"line":1,"column":4874}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":212,"column":33},"generated":{"line":1,"column":4876}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":213,"column":10},"generated":{"line":1,"column":4888}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":213,"column":25},"generated":{"line":1,"column":4890}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":213,"column":34},"generated":{"line":1,"column":4892}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":214,"column":10},"generated":{"line":1,"column":4905}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":214,"column":24},"generated":{"line":1,"column":4907}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":214,"column":33},"generated":{"line":1,"column":4909}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":215,"column":10},"generated":{"line":1,"column":4921}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":215,"column":26},"generated":{"line":1,"column":4923}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":215,"column":35},"generated":{"line":1,"column":4925}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":216,"column":10},"generated":{"line":1,"column":4939}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":216,"column":27},"generated":{"line":1,"column":4941}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":216,"column":36},"generated":{"line":1,"column":4943}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":217,"column":10},"generated":{"line":1,"column":4958}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":217,"column":26},"generated":{"line":1,"column":4960}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":217,"column":35},"generated":{"line":1,"column":4962}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":218,"column":10},"generated":{"line":1,"column":4976}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":218,"column":24},"generated":{"line":1,"column":4978}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":218,"column":33},"generated":{"line":1,"column":4980}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":219,"column":10},"generated":{"line":1,"column":4992}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":219,"column":25},"generated":{"line":1,"column":4994}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":219,"column":34},"generated":{"line":1,"column":4996}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":220,"column":10},"generated":{"line":1,"column":5009}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":220,"column":24},"generated":{"line":1,"column":5011}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":220,"column":33},"generated":{"line":1,"column":5013}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":222,"column":10},"generated":{"line":1,"column":5025}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":222,"column":72},"generated":{"line":1,"column":5027}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":222,"column":34},"generated":{"line":1,"column":5029}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":222,"column":39},"generated":{"line":1,"column":5034}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":222,"column":45},"generated":{"line":1,"column":5040}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":222,"column":54},"generated":{"line":1,"column":5042}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":222,"column":67},"generated":{"line":1,"column":5053}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":223,"column":10},"generated":{"line":1,"column":5056}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":223,"column":36},"generated":{"line":1,"column":5058}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":223,"column":45},"generated":{"line":1,"column":5060}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":223,"column":58},"generated":{"line":1,"column":5071}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":225,"column":9},"generated":{"line":1,"column":5073}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":225,"column":9},"generated":{"line":1,"column":5078}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":226,"column":36},"generated":{"line":1,"column":5126}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":226,"column":52},"generated":{"line":1,"column":5132}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":227,"column":8},"generated":{"line":1,"column":5138}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":228,"column":33},"generated":{"line":1,"column":5177}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":228,"column":46},"generated":{"line":1,"column":5183}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":228,"column":57},"generated":{"line":1,"column":5189}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":244,"column":32},"generated":{"line":1,"column":5750}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":245,"column":37},"generated":{"line":1,"column":5800}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":247,"column":32},"generated":{"line":1,"column":5839}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":247,"column":41},"generated":{"line":1,"column":5841}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":251,"column":34},"generated":{"line":1,"column":5926}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":252,"column":39},"generated":{"line":1,"column":5978}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":254,"column":34},"generated":{"line":1,"column":6019}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":254,"column":43},"generated":{"line":1,"column":6021}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":258,"column":36},"generated":{"line":1,"column":6113}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":259,"column":41},"generated":{"line":1,"column":6167}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":261,"column":36},"generated":{"line":1,"column":6210}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":261,"column":45},"generated":{"line":1,"column":6212}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":265,"column":38},"generated":{"line":1,"column":6309}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":282,"column":48},"generated":{"line":1,"column":6927}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":282,"column":20},"generated":{"line":1,"column":6931}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":284,"column":44},"generated":{"line":1,"column":7010}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":285,"column":37},"generated":{"line":1,"column":7054}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":286,"column":55},"generated":{"line":1,"column":7091}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":286,"column":27},"generated":{"line":1,"column":7095}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":288,"column":44},"generated":{"line":1,"column":7184}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":289,"column":44},"generated":{"line":1,"column":7234}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":292,"column":37},"generated":{"line":1,"column":7338}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":293,"column":37},"generated":{"line":1,"column":7385}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":296,"column":55},"generated":{"line":1,"column":7496}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":296,"column":27},"generated":{"line":1,"column":7500}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":298,"column":44},"generated":{"line":1,"column":7589}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":299,"column":44},"generated":{"line":1,"column":7639}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":300,"column":44},"generated":{"line":1,"column":7693}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":303,"column":37},"generated":{"line":1,"column":7797}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":304,"column":37},"generated":{"line":1,"column":7844}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":305,"column":37},"generated":{"line":1,"column":7895}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":202,"column":26},"generated":{"line":1,"column":8080}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":202,"column":26},"generated":{"line":1,"column":8088}},{"source":"../src/conv_gpu.ts","name":null,"original":{"line":202,"column":26},"generated":{"line":1,"column":8102}}],"sources":{"../src/conv_gpu.ts":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class Conv2DProgram implements GPGPUProgram {\n  variableNames = ['x', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      convInfo: backend_util.Conv2DInfo, addBias = false,\n      activation: string = null, hasPreluActivationWeights = false) {\n    this.outputShape = convInfo.outShape;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n\n    const inputDepthNearestVec4 = Math.floor(convInfo.inChannels / 4) * 4;\n    const inputDepthVec4Remainder = convInfo.inChannels % 4;\n    const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n\n    const rowDim = isChannelsLast ? 1 : 2;\n    const colDim = isChannelsLast ? 2 : 3;\n    const channelDim = isChannelsLast ? 3 : 1;\n\n    let activationSnippet = '', applyActivationSnippet = '';\n    if (activation) {\n      if (hasPreluActivationWeights) {\n        activationSnippet = `float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n      } else {\n        activationSnippet = `\n          float activation(float x) {\n            ${activation}\n          }\n        `;\n      }\n\n      applyActivationSnippet = `result = activation(result);`;\n    }\n\n    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivationWeights) {\n      this.variableNames.push('preluActivationWeights');\n    }\n\n    this.userCode = `\n      ${activationSnippet}\n\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${channelDim}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${rowDim}], coords[${colDim}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          int xR = xRCorner + wR * ${dilationHeight};\n\n          if (xR < 0 || xR >= ${convInfo.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            int xC = xCCorner + wC * ${dilationWidth};\n\n            if (xC < 0 || xC >= ${convInfo.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${inputDepthNearestVec4}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${isChannelsLast}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${inputDepthVec4Remainder === 1}) {\n\n              if (${isChannelsLast}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${inputDepthNearestVec4}) *\n                    getW(wR, wC, ${inputDepthNearestVec4}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${inputDepthNearestVec4}, xR, xC) *\n                    getW(wR, wC, ${inputDepthNearestVec4}, d2);\n              }\n\n            } else if (${inputDepthVec4Remainder === 2}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${inputDepthNearestVec4}, d2),\n                getW(wR, wC, ${inputDepthNearestVec4} + 1, d2)\n              );\n\n              if (${isChannelsLast}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${inputDepthNearestVec4}, xR, xC),\n                  getX(batch, ${inputDepthNearestVec4} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${inputDepthVec4Remainder === 3}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${inputDepthNearestVec4}, d2),\n                getW(wR, wC, ${inputDepthNearestVec4} + 1, d2),\n                getW(wR, wC, ${inputDepthNearestVec4} + 2, d2)\n              );\n\n              if (${isChannelsLast}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 1),\n                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${inputDepthNearestVec4}, xR, xC),\n                  getX(batch, ${inputDepthNearestVec4} + 1, xR, xC),\n                  getX(batch, ${inputDepthNearestVec4} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${addBiasSnippet}\n        ${applyActivationSnippet}\n        setOutput(result);\n      }\n    `;\n  }\n}\n\nexport class Conv3DProgram implements GPGPUProgram {\n  variableNames = ['x', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.outShape;\n    const padFront = convInfo.padInfo.front;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const filterDepth = convInfo.filterDepth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n\n    const inputDepthNearestVec4 = Math.floor(convInfo.inChannels / 4) * 4;\n    const inputDepthVec4Remainder = convInfo.inChannels % 4;\n\n    this.userCode = `\n      const ivec3 strides = ivec3(${strideDepth}, ${strideHeight}, ${\n        strideWidth});\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${filterDepth}; wF++) {\n          int xF = xFCorner + wF * ${dilationDepth};\n\n          if (xF < 0 || xF >= ${convInfo.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${filterHeight}; wR++) {\n            int xR = xRCorner + wR * ${dilationHeight};\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${filterWidth}; wC++) {\n              int xC = xCCorner + wC * ${dilationWidth};\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${inputDepthNearestVec4}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${inputDepthVec4Remainder === 1}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}) *\n                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2);\n              } else if (${inputDepthVec4Remainder === 2}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2),\n                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${inputDepthVec4Remainder === 3}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 1),\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2),\n                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 1, d2),\n                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n"},"lineCount":null}},"error":null,"hash":"bbe9e89a12084fdbbf9f25b2446039cc","cacheData":{"env":{}}}