{"id":"../node_modules/@tensorflow/tfjs-backend-webgl/dist/binaryop_gpu.js","dependencies":[{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-backend-webgl/dist/binaryop_gpu.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-backend-webgl/src/binaryop_gpu.ts","includedInParent":true,"mtime":499162500000},{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/package.json","includedInParent":true,"mtime":1609039238895},{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-backend-webgl/package.json","includedInParent":true,"mtime":499162500000},{"name":"@tensorflow/tfjs-core","loc":{"line":17,"column":29},"parent":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-backend-webgl/dist/binaryop_gpu.js","resolved":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-core/dist/index.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BinaryOpProgram = exports.PRELU = exports.ELU_DER = exports.MOD = exports.MIN = exports.MAX = exports.LOGICAL_OR = exports.LOGICAL_AND = exports.GREATER_EQUAL = exports.GREATER = exports.LESS_EQUAL = exports.LESS = exports.EQUAL = exports.SQUARED_DIFFERENCE = exports.POW = exports.INT_DIV = void 0;\n\nvar _tfjsCore = require(\"@tensorflow/tfjs-core\");\n\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nconst CHECK_NAN_SNIPPET = `\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n`; // We use native integer division to deal with floating point imprecision. Since\n// we implement floor division and glsl implements truncated division, we\n// correct for this by subtracting 1 from result when the result is negative and\n// there is a remainder.\n\nconst INT_DIV = `\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n`;\nexports.INT_DIV = INT_DIV;\nconst POW = `\nif(a < 0.0 && floor(b) < b){\n  return NAN;\n}\nif (b == 0.0) {\n  return 1.0;\n}\nreturn (round(mod(b, 2.0)) != 1) ?\n    pow(abs(a), b) : sign(a) * pow(abs(a), b);\n`;\nexports.POW = POW;\nconst SQUARED_DIFFERENCE = 'return (a - b) * (a - b);';\nexports.SQUARED_DIFFERENCE = SQUARED_DIFFERENCE;\nconst EQUAL = `return float(a == b);`;\nexports.EQUAL = EQUAL;\nconst LESS = `return float(a < b);`;\nexports.LESS = LESS;\nconst LESS_EQUAL = `return float(a <= b);`;\nexports.LESS_EQUAL = LESS_EQUAL;\nconst GREATER = `return float(a > b);`;\nexports.GREATER = GREATER;\nconst GREATER_EQUAL = `return float(a >= b);`;\nexports.GREATER_EQUAL = GREATER_EQUAL;\nconst LOGICAL_AND = `return float(a >= 1.0 && b >= 1.0);`;\nexports.LOGICAL_AND = LOGICAL_AND;\nconst LOGICAL_OR = `return float(a >= 1.0 || b >= 1.0);`;\nexports.LOGICAL_OR = LOGICAL_OR;\nconst MAX = CHECK_NAN_SNIPPET + `\n  return max(a, b);\n`;\nexports.MAX = MAX;\nconst MIN = CHECK_NAN_SNIPPET + `\n  return min(a, b);\n`;\nexports.MIN = MIN;\nconst MOD = `if (b == 0.0) return NAN;\n  return mod(a, b);`;\nexports.MOD = MOD;\nconst ELU_DER = `return (b >= 1.0) ? a : a * (b + 1.0);`;\nexports.ELU_DER = ELU_DER;\nconst PRELU = `return (a < 0.) ? b * a : a;`;\nexports.PRELU = PRELU;\n\nclass BinaryOpProgram {\n  constructor(op, aShape, bShape) {\n    this.variableNames = ['A', 'B'];\n    this.outputShape = _tfjsCore.backend_util.assertAndGetBroadcastShape(aShape, bShape);\n    this.userCode = `\n      float binaryOperation(float a, float b) {\n        ${op}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `;\n  }\n\n}\n\nexports.BinaryOpProgram = BinaryOpProgram;"},"sourceMaps":{"js":{"mappings":[{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":18,"column":0},"generated":{"line":8,"column":0}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":10,"column":0}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":22,"column":0},"generated":{"line":26,"column":0}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":22,"column":6},"generated":{"line":26,"column":6}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":22,"column":23},"generated":{"line":26,"column":23}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":22,"column":26},"generated":{"line":26,"column":26}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":22,"column":0},"generated":{"line":29,"column":1}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":27,"column":0},"generated":{"line":29,"column":3}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":28,"column":0},"generated":{"line":30,"column":0}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":29,"column":0},"generated":{"line":31,"column":0}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":30,"column":0},"generated":{"line":32,"column":0}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":31,"column":7},"generated":{"line":34,"column":0}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":31,"column":13},"generated":{"line":34,"column":6}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":31,"column":20},"generated":{"line":34,"column":13}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":31,"column":23},"generated":{"line":34,"column":16}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":31,"column":7},"generated":{"line":44,"column":1}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":43,"column":7},"generated":{"line":46,"column":0}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":43,"column":13},"generated":{"line":46,"column":6}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":43,"column":16},"generated":{"line":46,"column":9}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":43,"column":19},"generated":{"line":46,"column":12}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":43,"column":7},"generated":{"line":55,"column":1}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":53,"column":7},"generated":{"line":57,"column":0}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":53,"column":13},"generated":{"line":57,"column":6}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":53,"column":31},"generated":{"line":57,"column":24}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":53,"column":34},"generated":{"line":57,"column":27}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":53,"column":7},"generated":{"line":57,"column":54}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":55,"column":7},"generated":{"line":59,"column":0}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":55,"column":13},"generated":{"line":59,"column":6}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":55,"column":18},"generated":{"line":59,"column":11}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":55,"column":21},"generated":{"line":59,"column":14}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":55,"column":7},"generated":{"line":59,"column":37}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":57,"column":7},"generated":{"line":61,"column":0}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":57,"column":13},"generated":{"line":61,"column":6}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":57,"column":17},"generated":{"line":61,"column":10}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":57,"column":20},"generated":{"line":61,"column":13}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":57,"column":7},"generated":{"line":61,"column":35}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":59,"column":7},"generated":{"line":63,"column":0}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":59,"column":13},"generated":{"line":63,"column":6}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":59,"column":23},"generated":{"line":63,"column":16}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":59,"column":26},"generated":{"line":63,"column":19}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":59,"column":7},"generated":{"line":63,"column":42}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":61,"column":7},"generated":{"line":65,"column":0}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":61,"column":13},"generated":{"line":65,"column":6}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":61,"column":20},"generated":{"line":65,"column":13}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":61,"column":23},"generated":{"line":65,"column":16}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":61,"column":7},"generated":{"line":65,"column":38}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":63,"column":7},"generated":{"line":67,"column":0}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":63,"column":13},"generated":{"line":67,"column":6}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":63,"column":26},"generated":{"line":67,"column":19}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":63,"column":29},"generated":{"line":67,"column":22}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":63,"column":7},"generated":{"line":67,"column":45}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":65,"column":7},"generated":{"line":69,"column":0}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":65,"column":13},"generated":{"line":69,"column":6}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":65,"column":24},"generated":{"line":69,"column":17}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":65,"column":27},"generated":{"line":69,"column":20}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":65,"column":7},"generated":{"line":69,"column":57}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":67,"column":7},"generated":{"line":71,"column":0}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":67,"column":13},"generated":{"line":71,"column":6}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":67,"column":23},"generated":{"line":71,"column":16}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":67,"column":26},"generated":{"line":71,"column":19}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":67,"column":7},"generated":{"line":71,"column":56}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":69,"column":7},"generated":{"line":73,"column":0}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":69,"column":13},"generated":{"line":73,"column":6}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":69,"column":16},"generated":{"line":73,"column":9}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":69,"column":19},"generated":{"line":73,"column":12}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":69,"column":36},"generated":{"line":73,"column":29}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":69,"column":39},"generated":{"line":73,"column":32}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":69,"column":7},"generated":{"line":75,"column":1}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":72,"column":7},"generated":{"line":77,"column":0}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":72,"column":13},"generated":{"line":77,"column":6}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":72,"column":16},"generated":{"line":77,"column":9}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":72,"column":19},"generated":{"line":77,"column":12}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":72,"column":36},"generated":{"line":77,"column":29}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":72,"column":39},"generated":{"line":77,"column":32}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":72,"column":7},"generated":{"line":79,"column":1}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":75,"column":7},"generated":{"line":81,"column":0}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":75,"column":13},"generated":{"line":81,"column":6}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":75,"column":16},"generated":{"line":81,"column":9}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":75,"column":19},"generated":{"line":81,"column":12}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":75,"column":7},"generated":{"line":82,"column":20}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":78,"column":7},"generated":{"line":84,"column":0}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":78,"column":13},"generated":{"line":84,"column":6}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":78,"column":20},"generated":{"line":84,"column":13}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":78,"column":23},"generated":{"line":84,"column":16}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":78,"column":7},"generated":{"line":84,"column":56}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":80,"column":7},"generated":{"line":86,"column":0}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":80,"column":13},"generated":{"line":86,"column":6}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":80,"column":18},"generated":{"line":86,"column":11}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":80,"column":21},"generated":{"line":86,"column":14}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":80,"column":7},"generated":{"line":86,"column":44}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":82,"column":6},"generated":{"line":89,"column":0}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":82,"column":13},"generated":{"line":89,"column":6}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":82,"column":6},"generated":{"line":89,"column":21}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":82,"column":28},"generated":{"line":89,"column":22}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":87,"column":2},"generated":{"line":90,"column":0}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":87,"column":2},"generated":{"line":90,"column":2}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":87,"column":2},"generated":{"line":90,"column":13}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":87,"column":14},"generated":{"line":90,"column":14}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":87,"column":2},"generated":{"line":90,"column":16}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":87,"column":26},"generated":{"line":90,"column":18}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":87,"column":2},"generated":{"line":90,"column":24}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":87,"column":44},"generated":{"line":90,"column":26}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":87,"column":2},"generated":{"line":90,"column":32}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":87,"column":60},"generated":{"line":90,"column":34}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":83,"column":2},"generated":{"line":91,"column":0}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":83,"column":2},"generated":{"line":91,"column":9}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":83,"column":2},"generated":{"line":91,"column":22}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":83,"column":18},"generated":{"line":91,"column":25}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":83,"column":19},"generated":{"line":91,"column":26}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":83,"column":18},"generated":{"line":91,"column":29}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":83,"column":24},"generated":{"line":91,"column":31}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":83,"column":18},"generated":{"line":91,"column":34}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":83,"column":2},"generated":{"line":91,"column":35}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":88,"column":4},"generated":{"line":92,"column":0}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":88,"column":9},"generated":{"line":92,"column":9}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":88,"column":4},"generated":{"line":92,"column":20}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":88,"column":23},"generated":{"line":92,"column":23}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":88,"column":36},"generated":{"line":92,"column":46}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":88,"column":23},"generated":{"line":92,"column":72}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":88,"column":63},"generated":{"line":92,"column":73}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":88,"column":23},"generated":{"line":92,"column":79}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":88,"column":71},"generated":{"line":92,"column":81}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":88,"column":23},"generated":{"line":92,"column":87}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":88,"column":4},"generated":{"line":92,"column":88}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":89,"column":4},"generated":{"line":93,"column":0}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":89,"column":9},"generated":{"line":93,"column":9}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":89,"column":4},"generated":{"line":93,"column":17}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":89,"column":20},"generated":{"line":93,"column":20}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":91,"column":10},"generated":{"line":95,"column":10}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":91,"column":12},"generated":{"line":95,"column":12}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":89,"column":4},"generated":{"line":103,"column":5}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":100,"column":3},"generated":{"line":104,"column":0}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":82,"column":28},"generated":{"line":106,"column":0}}],"sources":{"../src/binaryop_gpu.ts":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nconst CHECK_NAN_SNIPPET = `\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n`;\n\n// We use native integer division to deal with floating point imprecision. Since\n// we implement floor division and glsl implements truncated division, we\n// correct for this by subtracting 1 from result when the result is negative and\n// there is a remainder.\nexport const INT_DIV = `\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n`;\n\nexport const POW = `\nif(a < 0.0 && floor(b) < b){\n  return NAN;\n}\nif (b == 0.0) {\n  return 1.0;\n}\nreturn (round(mod(b, 2.0)) != 1) ?\n    pow(abs(a), b) : sign(a) * pow(abs(a), b);\n`;\nexport const SQUARED_DIFFERENCE = 'return (a - b) * (a - b);';\n\nexport const EQUAL = `return float(a == b);`;\n\nexport const LESS = `return float(a < b);`;\n\nexport const LESS_EQUAL = `return float(a <= b);`;\n\nexport const GREATER = `return float(a > b);`;\n\nexport const GREATER_EQUAL = `return float(a >= b);`;\n\nexport const LOGICAL_AND = `return float(a >= 1.0 && b >= 1.0);`;\n\nexport const LOGICAL_OR = `return float(a >= 1.0 || b >= 1.0);`;\n\nexport const MAX = CHECK_NAN_SNIPPET + `\n  return max(a, b);\n`;\nexport const MIN = CHECK_NAN_SNIPPET + `\n  return min(a, b);\n`;\nexport const MOD = `if (b == 0.0) return NAN;\n  return mod(a, b);`;\n\nexport const ELU_DER = `return (b >= 1.0) ? a : a * (b + 1.0);`;\n\nexport const PRELU = `return (a < 0.) ? b * a : a;`;\n\nexport class BinaryOpProgram implements GPGPUProgram {\n  variableNames = ['A', 'B'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(op: string, aShape: number[], bShape: number[]) {\n    this.outputShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n    this.userCode = `\n      float binaryOperation(float a, float b) {\n        ${op}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `;\n  }\n}\n"},"lineCount":null}},"error":null,"hash":"6f1e8b093575b27c73635f448393c319","cacheData":{"env":{}}}