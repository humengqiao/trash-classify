{"id":"mFR1","dependencies":[{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/package.json","includedInParent":true,"mtime":1609563696417},{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-backend-webgl/package.json","includedInParent":true,"mtime":499162500000},{"name":"@tensorflow/tfjs-core","loc":{"line":17,"column":35},"parent":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-backend-webgl/dist/binaryop_packed_gpu.js","resolved":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-core/dist/index.js"},{"name":"./packing_util","loc":{"line":18,"column":28},"parent":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-backend-webgl/dist/binaryop_packed_gpu.js","resolved":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-backend-webgl/dist/packing_util.js"},{"name":"./shader_compiler","loc":{"line":19,"column":34},"parent":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-backend-webgl/dist/binaryop_packed_gpu.js","resolved":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-backend-webgl/dist/shader_compiler.js"}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.BinaryOpPackedProgram=exports.MOD=exports.MIN=exports.MAX=exports.LOGICAL_OR=exports.LOGICAL_AND=exports.GREATER_EQUAL=exports.GREATER=exports.LESS_EQUAL=exports.LESS=exports.NOT_EQUAL=exports.EQUAL=exports.ELU_DER=exports.PRELU=exports.POW=exports.INT_DIV=void 0;var e=require(\"@tensorflow/tfjs-core\"),n=require(\"./packing_util\"),t=require(\"./shader_compiler\");const s=\"\\n  result.r = isNaN.r > 0. ? NAN : result.r;\\n  result.g = isNaN.g > 0. ? NAN : result.g;\\n  result.b = isNaN.b > 0. ? NAN : result.b;\\n  result.a = isNaN.a > 0. ? NAN : result.a;\\n\",r=\"\\n  ivec4 ia = round(a);\\n  ivec4 ib = round(b);\\n  bvec4 cond = notEqual(ib, ivec4(0));\\n  ivec4 result = ivec4(0);\\n  vec4 s = sign(a) * sign(b);\\n\\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\\n  if (cond[0]) {\\n    result[0] = idiv(ia[0], ib[0], s[0]);\\n  }\\n  if (cond[1]) {\\n    result[1] = idiv(ia[1], ib[1], s[1]);\\n  }\\n  if (cond[2]) {\\n    result[2] = idiv(ia[2], ib[2], s[2]);\\n  }\\n  if (cond[3]) {\\n    result[3] = idiv(ia[3], ib[3], s[3]);\\n  }\\n  return vec4(result);\\n\";exports.INT_DIV=r;const o=\"\\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\\n  vec4 result = multiplier * pow(abs(a), b);\\n\\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\\n  bvec4 isExpZero = equal(b, vec4(0.0));\\n  result.r = isExpZero.r ? 1.0 : result.r;\\n  result.g = isExpZero.g ? 1.0 : result.g;\\n  result.b = isExpZero.b ? 1.0 : result.b;\\n  result.a = isExpZero.a ? 1.0 : result.a;\\n\\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\\n  \"+s+\"\\n  return result;\\n\";exports.POW=o;const a=\"\\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\\n\";exports.PRELU=a;const u=\"\\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\\n\";exports.ELU_DER=u;const c=\"\\n  return vec4(equal(a, b));\\n\";exports.EQUAL=c;const i=\"\\n  return vec4(notEqual(a, b));\\n\";exports.NOT_EQUAL=i;const l=\"\\n  return vec4(lessThan(a, b));\\n\";exports.LESS=l;const v=\"\\n  return vec4(lessThanEqual(a, b));\\n\";exports.LESS_EQUAL=v;const p=\"\\n  return vec4(greaterThan(a, b));\\n\";exports.GREATER=p;const d=\"\\n  return vec4(greaterThanEqual(a, b));\\n\";exports.GREATER_EQUAL=d;const b=\"\\n  return vec4(\\n    vec4(greaterThanEqual(a, vec4(1.0))) *\\n    vec4(greaterThanEqual(b, vec4(1.0))));\\n\";exports.LOGICAL_AND=b;const x=\"\\n  return min(\\n    vec4(greaterThanEqual(a, vec4(1.0))) +\\n    vec4(greaterThanEqual(b, vec4(1.0))),\\n    vec4(1.0));\\n\";exports.LOGICAL_OR=x;const E=\"\\n  vec4 result = vec4(max(a, b));\\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\\n  \"+s+\"\\n  return result;\\n\";exports.MAX=E;const h=\"\\n  vec4 result = vec4(min(a, b));\\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\\n  \"+s+\"\\n  return result;\\n\";exports.MIN=h;const O=\"\\n  vec4 result = mod(a, b);\\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\\n  \"+s+\"\\n  return result;\\n\";exports.MOD=O;class N{constructor(s,r,o,a=!1){this.variableNames=[\"A\",\"B\"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e.backend_util.assertAndGetBroadcastShape(r,o);const u=this.outputShape.length;let c=\"\";if(a)if(0===u||1===e.util.sizeFromShape(this.outputShape))c=\"\\n          result.y = 0.;\\n          result.z = 0.;\\n          result.w = 0.;\\n        \";else{if(c=`\\n          ${(0,t.getCoordsDataType)(u)} coords = getOutputCoords();\\n        `,1===u)c+=`\\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\\n            result.z = 0.;\\n            result.w = 0.;\\n          `;else{const e=(0,n.getChannels)(\"coords\",u);c+=`\\n            bool nextRowOutOfBounds =\\n              (${e[u-2]} + 1) >= ${this.outputShape[u-2]};\\n            bool nextColOutOfBounds =\\n              (${e[u-1]} + 1) >= ${this.outputShape[u-1]};\\n            result.y = nextColOutOfBounds ? 0. : result.y;\\n            result.z = nextRowOutOfBounds ? 0. : result.z;\\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\\n          `}}this.userCode=`\\n      vec4 binaryOperation(vec4 a, vec4 b) {\\n        ${s}\\n      }\\n\\n      void main() {\\n        vec4 a = getAAtOutCoords();\\n        vec4 b = getBAtOutCoords();\\n\\n        vec4 result = binaryOperation(a, b);\\n        ${c}\\n\\n        setOutput(result);\\n      }\\n    `}}exports.BinaryOpPackedProgram=N;"},"sourceMaps":null,"error":null,"hash":"b484af819f4e2bae9854fe4650dc63d6","cacheData":{"env":{}}}