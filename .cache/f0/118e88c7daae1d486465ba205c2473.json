{"id":"zI4s","dependencies":[{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/package.json","includedInParent":true,"mtime":1609563696417},{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-backend-webgl/package.json","includedInParent":true,"mtime":499162500000}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.DepthwiseConv2DDerInputProgram=exports.DepthwiseConv2DDerFilterProgram=void 0;class n{constructor(n){this.variableNames=[\"x\",\"dy\"],this.outputShape=n.filterShape;const t=n.strideHeight,o=n.strideWidth,e=n.padInfo.top,d=n.padInfo.left,i=n.outChannels/n.inChannels;this.userCode=`\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int wR = coords.x;\\n        int wC = coords.y;\\n        int d1 = coords.z;\\n        int dm = coords.w;\\n        int d2 = d1 * ${i} + dm;\\n\\n        float dotProd = 0.0;\\n\\n        // TO DO: Vec4 over the batch size\\n        for (int b = 0; b < ${n.batchSize}; b++) {\\n          for (int yR = 0; yR < ${n.outHeight}; yR++) {\\n            int xR = wR + yR * ${t} - ${e};\\n\\n            if (xR < 0 || xR >= ${n.inHeight}) {\\n              continue;\\n            }\\n\\n            for (int yC = 0; yC < ${n.outWidth}; yC++) {\\n              int xC = wC + yC * ${o} - ${d};\\n\\n              if (xC < 0 || xC >= ${n.inWidth}) {\\n                continue;\\n              }\\n\\n              float dyValue = getDy(b, yR, yC, d2);\\n              float xValue = getX(b, xR, xC, d1);\\n              dotProd += (xValue * dyValue);\\n            }\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    `}}exports.DepthwiseConv2DDerFilterProgram=n;class t{constructor(n){this.variableNames=[\"dy\",\"W\"],this.outputShape=n.inShape;const t=n.filterHeight,o=n.filterWidth,e=n.strideHeight,d=n.strideWidth,i=t-1-n.padInfo.top,r=o-1-n.padInfo.left,s=n.outChannels/n.inChannels;this.userCode=`\\n      const ivec2 pads = ivec2(${i}, ${r});\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int batch = coords[0];\\n        int d1 = coords[3];\\n        ivec2 dyCorner = coords.yz - pads;\\n        int dyRCorner = dyCorner.x;\\n        int dyCCorner = dyCorner.y;\\n\\n        float dotProd = 0.0;\\n\\n        for (int wR = 0; wR < ${t}; wR++) {\\n          float dyR = float(dyRCorner + wR) / ${e}.0;\\n\\n          if (dyR < 0.0 || dyR >= ${n.outHeight}.0 || fract(dyR) > 0.0) {\\n            continue;\\n          }\\n          int idyR = int(dyR);\\n\\n          int wRPerm = ${t} - 1 - wR;\\n\\n          for (int wC = 0; wC < ${o}; wC++) {\\n            float dyC = float(dyCCorner + wC) / ${d}.0;\\n\\n            if (dyC < 0.0 || dyC >= ${n.outWidth}.0 ||\\n                fract(dyC) > 0.0) {\\n              continue;\\n            }\\n            int idyC = int(dyC);\\n\\n            int wCPerm = ${o} - 1 - wC;\\n\\n            // TO DO: Vec4 over the channelMul\\n            for (int dm = 0; dm < ${s}; dm++) {\\n              int d2 = d1 * ${s} + dm;\\n              float xValue = getDy(batch, idyR, idyC, d2);\\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\\n              dotProd += xValue * wValue;\\n            }\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    `}}exports.DepthwiseConv2DDerInputProgram=t;"},"sourceMaps":null,"error":null,"hash":"0f6a0317083f60084a4594625d91588a","cacheData":{"env":{}}}