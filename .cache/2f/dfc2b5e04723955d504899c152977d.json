{"id":"k3yy","dependencies":[{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/package.json","includedInParent":true,"mtime":1609564004117},{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-data/package.json","includedInParent":true,"mtime":499162500000},{"name":"@tensorflow/tfjs-core","loc":{"line":18,"column":21},"parent":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-data/dist/datasets/csv_dataset.js","resolved":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-core/dist/index.js"},{"name":"../dataset","loc":{"line":19,"column":24},"parent":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-data/dist/datasets/csv_dataset.js","resolved":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-data/dist/dataset.js"},{"name":"./text_line_dataset","loc":{"line":20,"column":32},"parent":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-data/dist/datasets/csv_dataset.js","resolved":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-data/dist/datasets/text_line_dataset.js"}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.CSVDataset=void 0;var e=require(\"@tensorflow/tfjs-core\"),t=require(\"../dataset\"),s=require(\"./text_line_dataset\");const i='\"',l=Symbol(\"out\"),a=Symbol(\"field\"),n=Symbol(\"quote\"),o=Symbol(\"quoteafterquote\"),r=Symbol(\"quoteinquote\");class u extends t.Dataset{constructor(t,i){super(),this.input=t,this.hasHeader=!0,this.fullColumnNames=null,this.columnNamesValidated=!1,this.columnConfigs=null,this.configuredColumnsOnly=!1,this.delimiter=\",\",this.delimWhitespace=!1,this.base=new s.TextLineDataset(t),i||(i={}),this.hasHeader=!1!==i.hasHeader,this.fullColumnNames=i.columnNames,this.columnConfigs=i.columnConfigs,this.configuredColumnsOnly=i.configuredColumnsOnly,i.delimWhitespace?(e.util.assert(null==i.delimiter,()=>\"Delimiter should not be provided when delimWhitespace is true.\"),this.delimWhitespace=!0,this.delimiter=\" \"):this.delimiter=i.delimiter?i.delimiter:\",\"}async columnNames(){return this.columnNamesValidated||await this.setColumnNames(),this.configuredColumnsOnly?Object.keys(this.columnConfigs):this.fullColumnNames}async setColumnNames(){const t=await this.maybeReadHeaderLine();if(!this.fullColumnNames&&!t)throw new Error(\"Column names must be provided if there is no header line.\");this.fullColumnNames&&t&&e.util.assert(t.length===this.fullColumnNames.length,()=>\"The length of provided columnNames (\"+this.fullColumnNames.length.toString()+\") does not match the length of the header line read from file (\"+t.length.toString()+\").\"),this.fullColumnNames||(this.fullColumnNames=t);const s=this.fullColumnNames.reduce((e,t)=>(e[t]=e[t]+1||1,e),{}),i=Object.keys(s).filter(e=>s[e]>1);if(e.util.assert(0===i.length,()=>\"Duplicate column names found: \"+i.toString()),this.columnConfigs)for(const e of Object.keys(this.columnConfigs)){if(-1===this.fullColumnNames.indexOf(e))throw new Error('The key \"'+e+'\" provided in columnConfigs does not match any of the column names ('+this.fullColumnNames.toString()+\").\")}this.columnNamesValidated=!0}async maybeReadHeaderLine(){if(this.hasHeader){const e=await this.base.iterator(),t=await e.next();if(t.done)throw new Error(\"No data was found for CSV parsing.\");const s=t.value;return this.parseRow(s,!1)}return null}async iterator(){this.columnNamesValidated||await this.setColumnNames();let e=await this.base.iterator();return this.hasHeader&&(e=e.skip(1)),e.map(e=>this.makeDataElement(e))}makeDataElement(e){const t=this.parseRow(e),s={},i={};for(let l=0;l<this.fullColumnNames.length;l++){const a=this.fullColumnNames[l],n=this.columnConfigs?this.columnConfigs[a]:null;if(!this.configuredColumnsOnly||n){const o=t[l];let r=null;if(\"\"===o)if(n&&void 0!==n.default)r=n.default;else{if(n&&(n.required||n.isLabel))throw new Error(`Required column ${a} is empty in this line: ${e}`);r=void 0}else{const e=Number(o);if(isNaN(e))r=n&&\"bool\"===n.dtype?this.getBoolean(o):o;else if(n&&n.dtype)switch(n.dtype){case\"float32\":r=e;break;case\"int32\":r=Math.floor(e);break;case\"bool\":r=this.getBoolean(o);break;default:r=e}else r=e}n&&n.isLabel?i[a]=r:s[a]=r}}return 0===Object.keys(i).length?s:{xs:s,ys:i}}getBoolean(e){return\"1\"===e||\"true\"===e.toLowerCase()?1:0}parseRow(e,t=!0){const s=[];let u=0;const h=e.length;let m=l;for(let c=0;c<h;c++)switch(m){case l:switch(e.charAt(c)){case i:u=c+1,m=n;break;case this.delimiter:if(u=c+1,\" \"===this.delimiter&&this.delimWhitespace)break;s.push(\"\"),m=l;break;default:m=a,u=c}break;case a:switch(e.charAt(c)){case this.delimiter:s.push(e.substring(u,c)),m=l,u=c+1}break;case n:switch(e.charAt(c)){case i:m=o}break;case o:switch(e.charAt(c)){case this.delimiter:s.push(e.substring(u,c-1)),m=l,u=c+1;break;case i:m=n;break;default:m=r}break;case r:switch(e.charAt(c)){case i:m=n}}if(m===o?s.push(e.substring(u,h-1)):s.push(e.substring(u)),t&&s.length!==this.fullColumnNames.length)throw new Error(`Invalid row in csv file. Should have ${this.fullColumnNames.length} elements in a row, but got ${s}`);return s}}exports.CSVDataset=u;"},"sourceMaps":null,"error":null,"hash":"d82eae878751d7e6ae11b9013de9c89e","cacheData":{"env":{}}}