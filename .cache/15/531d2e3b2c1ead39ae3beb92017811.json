{"id":"pSCY","dependencies":[{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-backend-webgl/dist/segment_gpu.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-backend-webgl/src/segment_gpu.ts","includedInParent":true,"mtime":499162500000},{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/package.json","includedInParent":true,"mtime":1609563562293},{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-backend-webgl/package.json","includedInParent":true,"mtime":499162500000}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.SegmentOpProgram=void 0;class n{constructor(n,e){this.variableNames=[\"x\",\"segmentIds\"];const t=n.windowSize,i=n.batchSize,a=n.inSize,d=n.numSegments,g=d*Math.ceil(a/t);this.outputShape=[i,g];const I=4*Math.floor(t/4),l=t%4,u=\"\\n        sumValue += dot(values, segFilter);\\n    \";let r=\"\";a%t>0&&(r=`\\n        if (inIdx < 0 || inIdx >= ${a}) {\\n          return initializationValue;\\n        }\\n      `);let c=\"\";a%t>0&&(c=`\\n        if (inIdx < 0 || inIdx >= ${a}) {\\n          return -1.0;\\n        }\\n      `),this.userCode=`\\n      const float initializationValue = 0.0;\\n\\n      float getValue(int batch, int inIdx) {\\n        ${r}\\n        return getX(batch, inIdx);\\n      }\\n\\n      float getSegmentIdAtIndex(int inIdx) {\\n        ${c}\\n        return getSegmentIds(inIdx);\\n      }\\n\\n      void main() {\\n        ivec2 coords = getOutputCoords();\\n        int batch = coords[0];\\n        int outIdx = coords[1];\\n        int inOffset = int(floor(float(outIdx) / float(\\n          ${d})) * float(${t}));\\n        int currentSeg = int(mod(float(outIdx), float(${d})));\\n\\n        float sumValue = 0.0;\\n\\n        for (int i = 0; i < ${I}; i += 4) {\\n          int inIdx = inOffset + i;\\n          vec4 values = vec4(\\n            getValue(batch, inIdx),\\n            getValue(batch, inIdx + 1),\\n            getValue(batch, inIdx + 2),\\n            getValue(batch, inIdx + 3)\\n          );\\n\\n          vec4 segFilter = vec4(\\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\\n          );\\n\\n          ${u}\\n        }\\n\\n        int inIdx = inOffset + ${I};\\n        if (${1===l}) {\\n          vec4 values = vec4(\\n            getValue(batch, inIdx),\\n            initializationValue,\\n            initializationValue,\\n            initializationValue\\n          );\\n\\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\\n\\n          vec4 segFilter = vec4(\\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\\n            0,\\n            0,\\n            0\\n          );\\n\\n          ${u}\\n        } else if (${2===l}) {\\n          vec4 values = vec4(\\n            getValue(batch, inIdx),\\n            getValue(batch, inIdx + 1),\\n            initializationValue,\\n            initializationValue\\n          );\\n\\n          vec4 segFilter = vec4(\\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\\n              0,\\n              0\\n          );\\n\\n          ${u}\\n        } else if (${3===l}) {\\n          vec4 values = vec4(\\n            getValue(batch, inIdx),\\n            getValue(batch, inIdx + 1),\\n            getValue(batch, inIdx + 2),\\n            initializationValue\\n          );\\n\\n          vec4 segFilter = vec4(\\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\\n            0\\n          );\\n\\n          ${u}\\n        }\\n        setOutput(sumValue);\\n      }\\n    `}}exports.SegmentOpProgram=n;"},"sourceMaps":{"js":{"mappings":[{"source":"../src/segment_gpu.ts","name":null,"original":{"line":21,"column":29},"generated":{"line":1,"column":0}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":21,"column":29},"generated":{"line":1,"column":13}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":21,"column":29},"generated":{"line":1,"column":20}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":21,"column":29},"generated":{"line":1,"column":35}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":21,"column":29},"generated":{"line":1,"column":43}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":21,"column":29},"generated":{"line":1,"column":56}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":21,"column":29},"generated":{"line":1,"column":57}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":21,"column":29},"generated":{"line":1,"column":64}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":21,"column":29},"generated":{"line":1,"column":68}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":21,"column":29},"generated":{"line":1,"column":76}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":21,"column":29},"generated":{"line":1,"column":98}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":21,"column":6},"generated":{"line":1,"column":100}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":21,"column":13},"generated":{"line":1,"column":106}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":26,"column":2},"generated":{"line":1,"column":108}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":27,"column":6},"generated":{"line":1,"column":120}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":28,"column":6},"generated":{"line":1,"column":122}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":22,"column":2},"generated":{"line":1,"column":125}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":22,"column":2},"generated":{"line":1,"column":130}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":22,"column":18},"generated":{"line":1,"column":144}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":22,"column":19},"generated":{"line":1,"column":145}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":22,"column":24},"generated":{"line":1,"column":149}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":29,"column":10},"generated":{"line":1,"column":163}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":29,"column":10},"generated":{"line":1,"column":169}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":29,"column":23},"generated":{"line":1,"column":171}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":29,"column":33},"generated":{"line":1,"column":173}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":30,"column":10},"generated":{"line":1,"column":184}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":30,"column":22},"generated":{"line":1,"column":186}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":30,"column":32},"generated":{"line":1,"column":188}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":31,"column":10},"generated":{"line":1,"column":198}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":31,"column":19},"generated":{"line":1,"column":200}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":31,"column":29},"generated":{"line":1,"column":202}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":32,"column":10},"generated":{"line":1,"column":209}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":32,"column":24},"generated":{"line":1,"column":211}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":32,"column":34},"generated":{"line":1,"column":213}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":33,"column":10},"generated":{"line":1,"column":225}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":33,"column":20},"generated":{"line":1,"column":227}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":33,"column":34},"generated":{"line":1,"column":229}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":33,"column":39},"generated":{"line":1,"column":234}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":33,"column":44},"generated":{"line":1,"column":239}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":33,"column":53},"generated":{"line":1,"column":241}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":34,"column":9},"generated":{"line":1,"column":244}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":34,"column":9},"generated":{"line":1,"column":249}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":34,"column":23},"generated":{"line":1,"column":261}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":34,"column":24},"generated":{"line":1,"column":262}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":34,"column":35},"generated":{"line":1,"column":264}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":36,"column":10},"generated":{"line":1,"column":267}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":39,"column":10},"generated":{"line":1,"column":273}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":39,"column":63},"generated":{"line":1,"column":275}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":39,"column":34},"generated":{"line":1,"column":277}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":39,"column":39},"generated":{"line":1,"column":282}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":39,"column":45},"generated":{"line":1,"column":288}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":39,"column":58},"generated":{"line":1,"column":290}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":40,"column":10},"generated":{"line":1,"column":293}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":40,"column":36},"generated":{"line":1,"column":295}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":40,"column":49},"generated":{"line":1,"column":297}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":42,"column":10},"generated":{"line":1,"column":299}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":42,"column":26},"generated":{"line":1,"column":301}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":46,"column":8},"generated":{"line":1,"column":355}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":46,"column":8},"generated":{"line":1,"column":359}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":46,"column":32},"generated":{"line":1,"column":361}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":47,"column":8},"generated":{"line":1,"column":364}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":47,"column":17},"generated":{"line":1,"column":366}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":47,"column":30},"generated":{"line":1,"column":368}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":48,"column":6},"generated":{"line":1,"column":372}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":49,"column":36},"generated":{"line":1,"column":413}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":55,"column":8},"generated":{"line":1,"column":479}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":55,"column":8},"generated":{"line":1,"column":483}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":55,"column":36},"generated":{"line":1,"column":485}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":56,"column":8},"generated":{"line":1,"column":488}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":56,"column":17},"generated":{"line":1,"column":490}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":56,"column":30},"generated":{"line":1,"column":492}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":57,"column":6},"generated":{"line":1,"column":496}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":58,"column":36},"generated":{"line":1,"column":537}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":64,"column":9},"generated":{"line":1,"column":588}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":64,"column":9},"generated":{"line":1,"column":593}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":68,"column":10},"generated":{"line":1,"column":709}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":73,"column":10},"generated":{"line":1,"column":816}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":82,"column":12},"generated":{"line":1,"column":1067}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":82,"column":37},"generated":{"line":1,"column":1082}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":83,"column":56},"generated":{"line":1,"column":1145}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":87,"column":30},"generated":{"line":1,"column":1218}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":103,"column":12},"generated":{"line":1,"column":1821}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":106,"column":33},"generated":{"line":1,"column":1871}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":107,"column":42},"generated":{"line":1,"column":1890}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":107,"column":14},"generated":{"line":1,"column":1894}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":124,"column":12},"generated":{"line":1,"column":2324}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":125,"column":49},"generated":{"line":1,"column":2349}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":125,"column":21},"generated":{"line":1,"column":2353}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":140,"column":12},"generated":{"line":1,"column":2789}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":141,"column":49},"generated":{"line":1,"column":2814}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":141,"column":21},"generated":{"line":1,"column":2818}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":156,"column":12},"generated":{"line":1,"column":3313}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":21,"column":29},"generated":{"line":1,"column":3374}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":21,"column":29},"generated":{"line":1,"column":3382}},{"source":"../src/segment_gpu.ts","name":null,"original":{"line":21,"column":29},"generated":{"line":1,"column":3399}}],"sources":{"../src/segment_gpu.ts":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class SegmentOpProgram implements GPGPUProgram {\n  variableNames = ['x', 'segmentIds'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      segOpInfo: backend_util.segment_util.SegOpInfo,\n      segOpType: 'unsortedSegmentSum') {\n    const windowSize = segOpInfo.windowSize;\n    const batchSize = segOpInfo.batchSize;\n    const inSize = segOpInfo.inSize;\n    const numSegments = segOpInfo.numSegments;\n    const outSize = numSegments * Math.ceil(inSize / windowSize);\n    this.outputShape = [batchSize, outSize];\n\n    const initializationValue = '0.0';\n    const returnValue = `sumValue`;\n\n    const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;\n    const windowSizeVec4Remainder = windowSize % 4;\n\n    const updateSnippet = `\n        sumValue += dot(values, segFilter);\n    `;\n\n    let checkValueOutOfBounds = '';\n    if (inSize % windowSize > 0) {\n      checkValueOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return initializationValue;\n        }\n      `;\n    }\n\n    let checkSegmentIdOutOfBounds = '';\n    if (inSize % windowSize > 0) {\n      checkSegmentIdOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return -1.0;\n        }\n      `;\n    }\n\n    this.userCode = `\n      const float initializationValue = ${initializationValue};\n\n      float getValue(int batch, int inIdx) {\n        ${checkValueOutOfBounds}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${checkSegmentIdOutOfBounds}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${numSegments})) * float(${windowSize}));\n        int currentSeg = int(mod(float(outIdx), float(${numSegments})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${updateSnippet}\n        }\n\n        int inIdx = inOffset + ${windowSizeNearestVec4};\n        if (${windowSizeVec4Remainder === 1}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 2}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 3}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${updateSnippet}\n        }\n        setOutput(${returnValue});\n      }\n    `;\n  }\n}\n"},"lineCount":null}},"error":null,"hash":"7fbe7347960c9b7520de5a69ae8f6c30","cacheData":{"env":{}}}