{"id":"TApJ","dependencies":[{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/package.json","includedInParent":true,"mtime":1609563696417},{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-backend-webgl/package.json","includedInParent":true,"mtime":499162500000}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.FFTProgram=void 0;class e{constructor(e,t,n){this.variableNames=[\"real\",\"imag\"];const o=t[1];this.outputShape=t;const a=n?`2.0 * ${Math.PI}`:`-2.0 * ${Math.PI}`,i=n?`${o}.0`:\"1.0\";let l;if(\"real\"===e)l=\"return real * expR - imag * expI;\";else{if(\"imag\"!==e)throw new Error(`FFT component must be either \"real\" or \"imag\", got ${e}.`);l=\"return real * expI + imag * expR;\"}this.userCode=`\\n      const float exponentMultiplier = ${a};\\n\\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\\n        ${l}\\n      }\\n\\n      float mulMatDFT(int batch, int index) {\\n        float indexRatio = float(index) / float(${o});\\n        float exponentMultiplierTimesIndexRatio =\\n            exponentMultiplier * indexRatio;\\n\\n        float result = 0.0;\\n\\n        for (int i = 0; i < ${o}; i++) {\\n          // x = (-2|2 * PI / N) * index * i;\\n          float x = exponentMultiplierTimesIndexRatio * float(i);\\n          float expR = cos(x);\\n          float expI = sin(x);\\n          float real = getReal(batch, i);\\n          float imag = getImag(batch, i);\\n\\n          result +=\\n              unaryOpComplex(real, expR, imag, expI) / ${i};\\n        }\\n\\n        return result;\\n      }\\n\\n      void main() {\\n        ivec2 coords = getOutputCoords();\\n        setOutput(mulMatDFT(coords[0], coords[1]));\\n      }\\n    `}}exports.FFTProgram=e;"},"sourceMaps":null,"error":null,"hash":"48bed37b2713bf1ab9b248f02841077d","cacheData":{"env":{}}}