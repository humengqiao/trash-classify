{"id":"F9Be","dependencies":[{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-backend-webgl/dist/crop_and_resize_gpu.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-backend-webgl/src/crop_and_resize_gpu.ts","includedInParent":true,"mtime":499162500000},{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/package.json","includedInParent":true,"mtime":1609563562293},{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-backend-webgl/package.json","includedInParent":true,"mtime":499162500000}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.CropAndResizeProgram=void 0;class e{constructor(e,t,o,n,r){this.variableNames=[\"Image\",\"Boxes\",\"BoxInd\"],this.outputShape=[];const[a,i,s,c]=e,[l]=t,[u,f]=o;this.outputShape=[l,u,f,c];const d=\"bilinear\"===n?1:0,[x,C]=[`${i-1}.0`,`${s-1}.0`],[g,R,b]=u>1?[`${(i-1)/(u-1)}`,\"(y2-y1) * height_ratio\",`y1*${x} + float(y)*(height_scale)`]:[\"0.0\",\"0.0\",`0.5 * (y1+y2) * ${x}`],[h,p,m]=f>1?[`${(s-1)/(f-1)}`,\"(x2-x1) * width_ratio\",`x1*${C} + float(x)*(width_scale)`]:[\"0.0\",\"0.0\",`0.5 * (x1+x2) * ${C}`];this.userCode=`\\n      const float height_ratio = float(${g});\\n      const float width_ratio = float(${h});\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int y = coords[1];\\n        int x = coords[2];\\n        int d = coords[3];\\n\\n        // get box vals\\n        float y1 = getBoxes(b,0);\\n        float x1 = getBoxes(b,1);\\n        float y2 = getBoxes(b,2);\\n        float x2 = getBoxes(b,3);\\n\\n        // get image in batch index\\n        int bInd = round(getBoxInd(b));\\n        if(bInd < 0 || bInd >= ${a}) {\\n          return;\\n        }\\n\\n        float height_scale = ${R};\\n        float width_scale = ${p};\\n\\n        float in_y = ${b};\\n        if( in_y < 0.0 || in_y > ${x} ) {\\n          setOutput(float(${r}));\\n          return;\\n        }\\n        float in_x = ${m};\\n        if( in_x < 0.0 || in_x > ${C} ) {\\n          setOutput(float(${r}));\\n          return;\\n        }\\n\\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\\n        if(${d} == 1) {\\n          // Compute the four integer indices.\\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\\n\\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\\n\\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\\n\\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\\n          float newValue = top + (bottom - top) * fracCR.y;\\n          setOutput(newValue);\\n        } else {\\n          // Compute the coordinators of nearest neighbor point.\\n          ivec2 sourceNearestCR = ivec2(floor(\\n            sourceFracIndexCR + vec2(0.5,0.5)));\\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\\n          setOutput(newValue);\\n        }\\n      }\\n    `}}exports.CropAndResizeProgram=e;"},"sourceMaps":{"js":{"mappings":[{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":20,"column":33},"generated":{"line":1,"column":0}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":20,"column":33},"generated":{"line":1,"column":13}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":20,"column":33},"generated":{"line":1,"column":20}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":20,"column":33},"generated":{"line":1,"column":35}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":20,"column":33},"generated":{"line":1,"column":43}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":20,"column":33},"generated":{"line":1,"column":56}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":20,"column":33},"generated":{"line":1,"column":57}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":20,"column":33},"generated":{"line":1,"column":64}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":20,"column":33},"generated":{"line":1,"column":68}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":20,"column":33},"generated":{"line":1,"column":76}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":20,"column":33},"generated":{"line":1,"column":102}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":20,"column":6},"generated":{"line":1,"column":104}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":20,"column":13},"generated":{"line":1,"column":110}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":25,"column":2},"generated":{"line":1,"column":112}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":26,"column":6},"generated":{"line":1,"column":124}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":26,"column":52},"generated":{"line":1,"column":126}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":27,"column":6},"generated":{"line":1,"column":128}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":27,"column":34},"generated":{"line":1,"column":130}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":28,"column":6},"generated":{"line":1,"column":132}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":21,"column":2},"generated":{"line":1,"column":135}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":21,"column":2},"generated":{"line":1,"column":140}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":21,"column":18},"generated":{"line":1,"column":154}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":21,"column":19},"generated":{"line":1,"column":155}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":21,"column":28},"generated":{"line":1,"column":163}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":21,"column":37},"generated":{"line":1,"column":171}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":22,"column":2},"generated":{"line":1,"column":181}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":22,"column":2},"generated":{"line":1,"column":186}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":22,"column":26},"generated":{"line":1,"column":198}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":29,"column":10},"generated":{"line":1,"column":201}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":29,"column":11},"generated":{"line":1,"column":207}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":29,"column":18},"generated":{"line":1,"column":209}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":29,"column":31},"generated":{"line":1,"column":211}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":29,"column":43},"generated":{"line":1,"column":213}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":29,"column":52},"generated":{"line":1,"column":216}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":30,"column":11},"generated":{"line":1,"column":219}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":30,"column":25},"generated":{"line":1,"column":222}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":31,"column":11},"generated":{"line":1,"column":225}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":31,"column":23},"generated":{"line":1,"column":227}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":31,"column":36},"generated":{"line":1,"column":230}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":32,"column":9},"generated":{"line":1,"column":232}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":32,"column":9},"generated":{"line":1,"column":237}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":32,"column":23},"generated":{"line":1,"column":249}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":32,"column":24},"generated":{"line":1,"column":250}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":32,"column":34},"generated":{"line":1,"column":252}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":32,"column":46},"generated":{"line":1,"column":254}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":32,"column":57},"generated":{"line":1,"column":256}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":33,"column":10},"generated":{"line":1,"column":259}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":33,"column":10},"generated":{"line":1,"column":265}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":33,"column":32},"generated":{"line":1,"column":267}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":33,"column":21},"generated":{"line":1,"column":280}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":33,"column":45},"generated":{"line":1,"column":282}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":33,"column":49},"generated":{"line":1,"column":284}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":35,"column":11},"generated":{"line":1,"column":287}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":35,"column":29},"generated":{"line":1,"column":289}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":36,"column":8},"generated":{"line":1,"column":292}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":36,"column":12},"generated":{"line":1,"column":296}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":36,"column":26},"generated":{"line":1,"column":298}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":36,"column":36},"generated":{"line":1,"column":307}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":36,"column":49},"generated":{"line":1,"column":309}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":38,"column":11},"generated":{"line":1,"column":317}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":38,"column":24},"generated":{"line":1,"column":319}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":38,"column":37},"generated":{"line":1,"column":321}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":38,"column":44},"generated":{"line":1,"column":324}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":38,"column":57},"generated":{"line":1,"column":326}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":39,"column":8},"generated":{"line":1,"column":328}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":40,"column":14},"generated":{"line":1,"column":333}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":40,"column":28},"generated":{"line":1,"column":335}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":40,"column":34},"generated":{"line":1,"column":339}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":40,"column":47},"generated":{"line":1,"column":341}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":41,"column":10},"generated":{"line":1,"column":346}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":42,"column":16},"generated":{"line":1,"column":377}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":44,"column":8},"generated":{"line":1,"column":408}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":45,"column":10},"generated":{"line":1,"column":409}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":46,"column":10},"generated":{"line":1,"column":415}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":47,"column":29},"generated":{"line":1,"column":440}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":49,"column":11},"generated":{"line":1,"column":446}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":49,"column":23},"generated":{"line":1,"column":448}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":49,"column":35},"generated":{"line":1,"column":450}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":49,"column":42},"generated":{"line":1,"column":453}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":49,"column":54},"generated":{"line":1,"column":455}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":50,"column":8},"generated":{"line":1,"column":457}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":51,"column":14},"generated":{"line":1,"column":462}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":51,"column":27},"generated":{"line":1,"column":464}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":51,"column":33},"generated":{"line":1,"column":468}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":51,"column":45},"generated":{"line":1,"column":470}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":52,"column":10},"generated":{"line":1,"column":475}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":53,"column":16},"generated":{"line":1,"column":505}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":55,"column":8},"generated":{"line":1,"column":535}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":56,"column":10},"generated":{"line":1,"column":536}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":57,"column":10},"generated":{"line":1,"column":542}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":58,"column":29},"generated":{"line":1,"column":567}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":64,"column":9},"generated":{"line":1,"column":572}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":64,"column":9},"generated":{"line":1,"column":577}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":65,"column":41},"generated":{"line":1,"column":630}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":66,"column":40},"generated":{"line":1,"column":676}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":82,"column":33},"generated":{"line":1,"column":1138}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":86,"column":31},"generated":{"line":1,"column":1208}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":87,"column":30},"generated":{"line":1,"column":1243}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":89,"column":23},"generated":{"line":1,"column":1273}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":90,"column":35},"generated":{"line":1,"column":1313}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":91,"column":28},"generated":{"line":1,"column":1349}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":94,"column":23},"generated":{"line":1,"column":1409}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":95,"column":35},"generated":{"line":1,"column":1449}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":96,"column":28},"generated":{"line":1,"column":1485}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":101,"column":13},"generated":{"line":1,"column":1588}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":20,"column":33},"generated":{"line":1,"column":2715}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":20,"column":33},"generated":{"line":1,"column":2723}},{"source":"../src/crop_and_resize_gpu.ts","name":null,"original":{"line":20,"column":33},"generated":{"line":1,"column":2744}}],"sources":{"../src/crop_and_resize_gpu.ts":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class CropAndResizeProgram implements GPGPUProgram {\n  variableNames = ['Image', 'Boxes', 'BoxInd'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      imageShape: [number, number, number, number], boxShape: [number, number],\n      cropSize: [number, number], method: 'bilinear'|'nearest',\n      extrapolationValue: number) {\n    const [batch, imageHeight, imageWidth, depth] = imageShape;\n    const [numBoxes, ] = boxShape;\n    const [cropHeight, cropWidth] = cropSize;\n    this.outputShape = [numBoxes, cropHeight, cropWidth, depth];\n    const methodId = method === 'bilinear' ? 1 : 0;\n\n    const [inputHeightFloat, inputWidthFloat] =\n        [`${imageHeight - 1}.0`, `${imageWidth - 1}.0`];\n\n    const [heightRatio, heightScale, inY] = cropHeight > 1 ?\n        [\n          `${(imageHeight - 1) / (cropHeight - 1)}`,\n          '(y2-y1) * height_ratio',\n          `y1*${inputHeightFloat} + float(y)*(height_scale)`,\n        ] :\n        [\n          '0.0',\n          '0.0',\n          `0.5 * (y1+y2) * ${inputHeightFloat}`,\n        ];\n    const [widthRatio, widthScale, inX] = cropWidth > 1 ?\n        [\n          `${(imageWidth - 1) / (cropWidth - 1)}`,\n          '(x2-x1) * width_ratio',\n          `x1*${inputWidthFloat} + float(x)*(width_scale)`,\n        ] :\n        [\n          '0.0',\n          '0.0',\n          `0.5 * (x1+x2) * ${inputWidthFloat}`,\n        ];\n\n    // Reference implementation\n    // tslint:disable-next-line:max-line-length\n    // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/crop_and_resize_op_gpu.cu.cc\n    this.userCode = `\n      const float height_ratio = float(${heightRatio});\n      const float width_ratio = float(${widthRatio});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${batch}) {\n          return;\n        }\n\n        float height_scale = ${heightScale};\n        float width_scale = ${widthScale};\n\n        float in_y = ${inY};\n        if( in_y < 0.0 || in_y > ${inputHeightFloat} ) {\n          setOutput(float(${extrapolationValue}));\n          return;\n        }\n        float in_x = ${inX};\n        if( in_x < 0.0 || in_x > ${inputWidthFloat} ) {\n          setOutput(float(${extrapolationValue}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${methodId} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `;\n  }\n}\n"},"lineCount":null}},"error":null,"hash":"b447ccca5d8ce3f34f9c61653466f5c4","cacheData":{"env":{}}}