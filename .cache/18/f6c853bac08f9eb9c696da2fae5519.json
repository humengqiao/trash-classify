{"id":"Ps4L","dependencies":[{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-backend-webgl/dist/resize_nearest_neighbor_backprop_gpu.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-backend-webgl/src/resize_nearest_neighbor_backprop_gpu.ts","includedInParent":true,"mtime":499162500000},{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/package.json","includedInParent":true,"mtime":1609563562293},{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-backend-webgl/package.json","includedInParent":true,"mtime":499162500000}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.ResizeNearestNeigborBackpropProgram=void 0;class t{constructor(t,n,o){this.variableNames=[\"dy\"],this.outputShape=[],this.outputShape=n.shape;const[,e,a]=n.shape,[,r,i]=t.shape,s=[o&&r>1?e-1:e,o&&i>1?a-1:a],f=[o&&r>1?r-1:r,o&&i>1?i-1:i],l=s[0]/f[0],c=s[1]/f[1],d=1/l,u=1/c,y=2*Math.ceil(d)+2,h=2*Math.ceil(u)+2;this.userCode=`\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int d = coords[3];\\n        int r = coords[1];\\n        int c = coords[2];\\n\\n        float accumulator = 0.0;\\n\\n        const float heightScale = float(${l});\\n        const float widthScale = float(${c});\\n\\n        const float invHeightScale = float(${d});\\n        const float invWidthScale = float(${u});\\n\\n        const int winHeight = int(${y});\\n        const int winWidth = int(${h});\\n\\n        // Compute bounds for where in dy we will look\\n        float startRLerp = floor(float(r) * invHeightScale);\\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\\n\\n        float startCLerp = floor(float(c) * invWidthScale);\\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\\n\\n        // Loop over dy\\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\\n          int dyR = dyROffset + startDyR;\\n\\n          // Guard against the window exceeding the bounds of dy\\n          if (dyR < 0 || dyR >= ${r}) {\\n            continue;\\n          }\\n\\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\\n            int dyC = dyCOffset + startDyC;\\n\\n            // Guard against the window exceeding the bounds of dy\\n            if (dyC < 0 || dyC >= ${i}) {\\n              continue;\\n            }\\n\\n            float sourceFracRow =\\n              float(${s[0]}) *\\n                (float(dyR) / float(${f[0]}));\\n\\n            float sourceFracCol =\\n                float(${s[1]}) *\\n                  (float(dyC) / float(${f[1]}));\\n\\n            int sourceNearestRow = int(min(\\n                float(int(${e}) - 1),\\n                ${o} ? float(round(sourceFracRow)) :\\n                                  float(floor(sourceFracRow))));\\n\\n            int sourceNearestCol = int(min(\\n                float(int(${a}) - 1),\\n                ${o} ? float(round(sourceFracCol)) :\\n                                  float(floor(sourceFracCol))));\\n\\n            if (r == sourceNearestRow && c == sourceNearestCol) {\\n              accumulator += getDy(b, dyR, dyC, d);\\n            }\\n          }\\n        }\\n        // End loop over dy\\n\\n        setOutput(accumulator);\\n      }\\n    `}}exports.ResizeNearestNeigborBackpropProgram=t;"},"sourceMaps":{"js":{"mappings":[{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":21,"column":48},"generated":{"line":1,"column":0}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":21,"column":48},"generated":{"line":1,"column":13}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":21,"column":48},"generated":{"line":1,"column":20}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":21,"column":48},"generated":{"line":1,"column":35}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":21,"column":48},"generated":{"line":1,"column":43}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":21,"column":48},"generated":{"line":1,"column":56}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":21,"column":48},"generated":{"line":1,"column":57}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":21,"column":48},"generated":{"line":1,"column":64}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":21,"column":48},"generated":{"line":1,"column":68}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":21,"column":48},"generated":{"line":1,"column":76}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":21,"column":48},"generated":{"line":1,"column":117}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":21,"column":6},"generated":{"line":1,"column":119}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":21,"column":13},"generated":{"line":1,"column":125}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":26,"column":2},"generated":{"line":1,"column":127}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":26,"column":14},"generated":{"line":1,"column":139}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":26,"column":28},"generated":{"line":1,"column":141}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":26,"column":41},"generated":{"line":1,"column":143}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":22,"column":2},"generated":{"line":1,"column":146}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":22,"column":2},"generated":{"line":1,"column":151}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":22,"column":18},"generated":{"line":1,"column":165}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":22,"column":19},"generated":{"line":1,"column":166}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":23,"column":2},"generated":{"line":1,"column":172}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":23,"column":2},"generated":{"line":1,"column":177}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":23,"column":26},"generated":{"line":1,"column":189}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":27,"column":9},"generated":{"line":1,"column":192}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":27,"column":9},"generated":{"line":1,"column":197}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":27,"column":23},"generated":{"line":1,"column":209}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":27,"column":25},"generated":{"line":1,"column":211}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":28,"column":10},"generated":{"line":1,"column":217}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":28,"column":13},"generated":{"line":1,"column":223}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":28,"column":13},"generated":{"line":1,"column":224}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":28,"column":22},"generated":{"line":1,"column":226}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":28,"column":34},"generated":{"line":1,"column":229}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":28,"column":36},"generated":{"line":1,"column":231}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":29,"column":13},"generated":{"line":1,"column":238}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":29,"column":13},"generated":{"line":1,"column":239}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":29,"column":22},"generated":{"line":1,"column":241}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":29,"column":32},"generated":{"line":1,"column":244}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":29,"column":35},"generated":{"line":1,"column":246}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":35,"column":10},"generated":{"line":1,"column":252}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":35,"column":45},"generated":{"line":1,"column":254}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":36,"column":7},"generated":{"line":1,"column":255}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":36,"column":23},"generated":{"line":1,"column":258}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":36,"column":33},"generated":{"line":1,"column":260}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":36,"column":38},"generated":{"line":1,"column":262}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":36,"column":48},"generated":{"line":1,"column":264}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":36,"column":52},"generated":{"line":1,"column":266}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":37,"column":7},"generated":{"line":1,"column":268}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":37,"column":23},"generated":{"line":1,"column":271}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":37,"column":32},"generated":{"line":1,"column":273}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":37,"column":37},"generated":{"line":1,"column":275}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":37,"column":46},"generated":{"line":1,"column":277}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":37,"column":50},"generated":{"line":1,"column":279}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":40,"column":10},"generated":{"line":1,"column":282}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":40,"column":45},"generated":{"line":1,"column":284}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":41,"column":7},"generated":{"line":1,"column":285}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":41,"column":23},"generated":{"line":1,"column":288}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":41,"column":33},"generated":{"line":1,"column":290}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":41,"column":38},"generated":{"line":1,"column":292}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":41,"column":48},"generated":{"line":1,"column":294}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":41,"column":52},"generated":{"line":1,"column":296}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":42,"column":7},"generated":{"line":1,"column":298}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":42,"column":23},"generated":{"line":1,"column":301}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":42,"column":32},"generated":{"line":1,"column":303}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":42,"column":37},"generated":{"line":1,"column":305}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":42,"column":46},"generated":{"line":1,"column":307}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":42,"column":50},"generated":{"line":1,"column":309}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":45,"column":10},"generated":{"line":1,"column":312}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":45,"column":24},"generated":{"line":1,"column":314}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":45,"column":39},"generated":{"line":1,"column":316}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":45,"column":44},"generated":{"line":1,"column":319}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":45,"column":59},"generated":{"line":1,"column":321}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":46,"column":10},"generated":{"line":1,"column":324}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":46,"column":23},"generated":{"line":1,"column":326}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":46,"column":38},"generated":{"line":1,"column":328}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":46,"column":43},"generated":{"line":1,"column":331}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":46,"column":58},"generated":{"line":1,"column":333}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":48,"column":10},"generated":{"line":1,"column":336}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":48,"column":27},"generated":{"line":1,"column":338}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":48,"column":31},"generated":{"line":1,"column":340}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":49,"column":10},"generated":{"line":1,"column":342}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":49,"column":26},"generated":{"line":1,"column":344}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":49,"column":30},"generated":{"line":1,"column":346}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":53,"column":10},"generated":{"line":1,"column":348}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":53,"column":51},"generated":{"line":1,"column":350}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":53,"column":23},"generated":{"line":1,"column":352}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":53,"column":28},"generated":{"line":1,"column":357}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":53,"column":33},"generated":{"line":1,"column":362}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":53,"column":56},"generated":{"line":1,"column":365}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":54,"column":10},"generated":{"line":1,"column":367}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":54,"column":49},"generated":{"line":1,"column":369}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":54,"column":22},"generated":{"line":1,"column":371}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":54,"column":27},"generated":{"line":1,"column":376}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":54,"column":32},"generated":{"line":1,"column":381}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":54,"column":54},"generated":{"line":1,"column":384}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":56,"column":9},"generated":{"line":1,"column":386}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":56,"column":9},"generated":{"line":1,"column":391}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":66,"column":42},"generated":{"line":1,"column":659}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":67,"column":41},"generated":{"line":1,"column":706}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":69,"column":45},"generated":{"line":1,"column":759}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":70,"column":44},"generated":{"line":1,"column":809}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":72,"column":36},"generated":{"line":1,"column":853}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":73,"column":35},"generated":{"line":1,"column":894}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":87,"column":34},"generated":{"line":1,"column":1467}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":95,"column":36},"generated":{"line":1,"column":1735}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":100,"column":22},"generated":{"line":1,"column":1841}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":100,"column":37},"generated":{"line":1,"column":1843}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":101,"column":38},"generated":{"line":1,"column":1889}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":101,"column":53},"generated":{"line":1,"column":1891}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":104,"column":24},"generated":{"line":1,"column":1960}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":104,"column":39},"generated":{"line":1,"column":1962}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":105,"column":40},"generated":{"line":1,"column":2010}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":105,"column":55},"generated":{"line":1,"column":2012}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":108,"column":28},"generated":{"line":1,"column":2095}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":109,"column":18},"generated":{"line":1,"column":2124}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":113,"column":28},"generated":{"line":1,"column":2301}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":114,"column":18},"generated":{"line":1,"column":2330}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":21,"column":48},"generated":{"line":1,"column":2673}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":21,"column":48},"generated":{"line":1,"column":2681}},{"source":"../src/resize_nearest_neighbor_backprop_gpu.ts","name":null,"original":{"line":21,"column":48},"generated":{"line":1,"column":2717}}],"sources":{"../src/resize_nearest_neighbor_backprop_gpu.ts":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor4D} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeNearestNeigborBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(dy: Tensor4D, x: Tensor4D, alignCorners: boolean) {\n    this.outputShape = x.shape;\n    const [, xHeight, xWidth, ] = x.shape;\n    const [, yHeight, yWidth] = dy.shape;\n\n    // In the backwards pass, we want to find the pixels that were generated for\n    // each pixel in the input image the forward pass and add the corresponding\n    // coefficient from dy to the gradient (with some interpolation).\n\n    const effectiveXSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n      (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n    ];\n\n    const effectiveYSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n      (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n    ];\n\n    const heightScale = effectiveXSize[0] / effectiveYSize[0];\n    const widthScale = effectiveXSize[1] / effectiveYSize[1];\n\n    const invHeightScale = 1 / heightScale;\n    const invWidthScale = 1 / widthScale;\n\n    // This defines the size of the window of values around a particular\n    // index in dy that we want to search for contributions to dx.\n    const winHeight = (Math.ceil(invHeightScale) * 2) + 2;\n    const winWidth = (Math.ceil(invWidthScale) * 2) + 2;\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${heightScale});\n        const float widthScale = float(${widthScale});\n\n        const float invHeightScale = float(${invHeightScale});\n        const float invWidthScale = float(${invWidthScale});\n\n        const int winHeight = int(${winHeight});\n        const int winWidth = int(${winWidth});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${yHeight}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${yWidth}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${effectiveXSize[0]}) *\n                (float(dyR) / float(${effectiveYSize[0]}));\n\n            float sourceFracCol =\n                float(${effectiveXSize[1]}) *\n                  (float(dyC) / float(${effectiveYSize[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${xHeight}) - 1),\n                ${alignCorners} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${xWidth}) - 1),\n                ${alignCorners} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `;\n  }\n}\n"},"lineCount":null}},"error":null,"hash":"8233defa12c9e35a899c92cd3f59dc71","cacheData":{"env":{}}}