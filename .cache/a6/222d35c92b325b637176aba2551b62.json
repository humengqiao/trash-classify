{"id":"FxJ6","dependencies":[{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-layers/dist/exports.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-layers/src/exports.ts","includedInParent":true,"mtime":499162500000},{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/package.json","includedInParent":true,"mtime":1609563562293},{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-layers/package.json","includedInParent":true,"mtime":499162500000},{"name":"./base_callbacks","loc":{"line":10,"column":44},"parent":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-layers/dist/exports.js","resolved":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-layers/dist/base_callbacks.js"},{"name":"./engine/input_layer","loc":{"line":11,"column":23},"parent":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-layers/dist/exports.js","resolved":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-layers/dist/engine/input_layer.js"},{"name":"./engine/training","loc":{"line":12,"column":28},"parent":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-layers/dist/exports.js","resolved":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-layers/dist/engine/training.js"},{"name":"./models","loc":{"line":13,"column":52},"parent":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-layers/dist/exports.js","resolved":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-layers/dist/models.js"}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.model=o,exports.sequential=u,exports.loadLayersModel=l,exports.input=i,exports.registerCallbackConstructor=s;var e=require(\"./base_callbacks\"),r=require(\"./engine/input_layer\"),t=require(\"./engine/training\"),n=require(\"./models\");function o(e){return new t.LayersModel(e)}function u(e){return new n.Sequential(e)}function l(e,r){return null==r&&(r={}),(0,n.loadLayersModelInternal)(e,r)}function i(e){return(0,r.Input)(e)}function s(r,t){e.CallbackConstructorRegistry.registerCallbackConstructor(r,t)}"},"sourceMaps":{"js":{"mappings":[{"source":"../src/exports.ts","name":null,"original":{"line":270,"column":1},"generated":{"line":1,"column":0}},{"source":"../src/exports.ts","name":null,"original":{"line":270,"column":1},"generated":{"line":1,"column":13}},{"source":"../src/exports.ts","name":null,"original":{"line":270,"column":1},"generated":{"line":1,"column":20}},{"source":"../src/exports.ts","name":null,"original":{"line":270,"column":1},"generated":{"line":1,"column":35}},{"source":"../src/exports.ts","name":null,"original":{"line":270,"column":1},"generated":{"line":1,"column":43}},{"source":"../src/exports.ts","name":null,"original":{"line":270,"column":1},"generated":{"line":1,"column":56}},{"source":"../src/exports.ts","name":null,"original":{"line":270,"column":1},"generated":{"line":1,"column":57}},{"source":"../src/exports.ts","name":null,"original":{"line":270,"column":1},"generated":{"line":1,"column":64}},{"source":"../src/exports.ts","name":null,"original":{"line":270,"column":1},"generated":{"line":1,"column":68}},{"source":"../src/exports.ts","name":null,"original":{"line":270,"column":1},"generated":{"line":1,"column":76}},{"source":"../src/exports.ts","name":null,"original":{"line":270,"column":1},"generated":{"line":1,"column":82}},{"source":"../src/exports.ts","name":null,"original":{"line":270,"column":1},"generated":{"line":1,"column":84}},{"source":"../src/exports.ts","name":null,"original":{"line":270,"column":1},"generated":{"line":1,"column":92}},{"source":"../src/exports.ts","name":null,"original":{"line":270,"column":1},"generated":{"line":1,"column":103}},{"source":"../src/exports.ts","name":null,"original":{"line":270,"column":1},"generated":{"line":1,"column":105}},{"source":"../src/exports.ts","name":null,"original":{"line":270,"column":1},"generated":{"line":1,"column":113}},{"source":"../src/exports.ts","name":null,"original":{"line":270,"column":1},"generated":{"line":1,"column":129}},{"source":"../src/exports.ts","name":null,"original":{"line":270,"column":1},"generated":{"line":1,"column":131}},{"source":"../src/exports.ts","name":null,"original":{"line":270,"column":1},"generated":{"line":1,"column":139}},{"source":"../src/exports.ts","name":null,"original":{"line":270,"column":1},"generated":{"line":1,"column":145}},{"source":"../src/exports.ts","name":null,"original":{"line":270,"column":1},"generated":{"line":1,"column":147}},{"source":"../src/exports.ts","name":null,"original":{"line":270,"column":1},"generated":{"line":1,"column":155}},{"source":"../src/exports.ts","name":null,"original":{"line":270,"column":1},"generated":{"line":1,"column":183}},{"source":"../src/exports.ts","name":null,"original":{"line":17,"column":0},"generated":{"line":1,"column":185}},{"source":"../src/exports.ts","name":null,"original":{"line":17,"column":0},"generated":{"line":1,"column":189}},{"source":"../src/exports.ts","name":null,"original":{"line":17,"column":0},"generated":{"line":1,"column":191}},{"source":"../src/exports.ts","name":null,"original":{"line":17,"column":0},"generated":{"line":1,"column":199}},{"source":"../src/exports.ts","name":null,"original":{"line":19,"column":0},"generated":{"line":1,"column":219}},{"source":"../src/exports.ts","name":null,"original":{"line":19,"column":0},"generated":{"line":1,"column":221}},{"source":"../src/exports.ts","name":null,"original":{"line":19,"column":0},"generated":{"line":1,"column":229}},{"source":"../src/exports.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":1,"column":253}},{"source":"../src/exports.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":1,"column":255}},{"source":"../src/exports.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":1,"column":263}},{"source":"../src/exports.ts","name":null,"original":{"line":22,"column":0},"generated":{"line":1,"column":284}},{"source":"../src/exports.ts","name":null,"original":{"line":22,"column":0},"generated":{"line":1,"column":286}},{"source":"../src/exports.ts","name":null,"original":{"line":22,"column":0},"generated":{"line":1,"column":294}},{"source":"../src/exports.ts","name":null,"original":{"line":70,"column":6},"generated":{"line":1,"column":306}},{"source":"../src/exports.ts","name":null,"original":{"line":70,"column":16},"generated":{"line":1,"column":315}},{"source":"../src/exports.ts","name":null,"original":{"line":70,"column":22},"generated":{"line":1,"column":317}},{"source":"../src/exports.ts","name":null,"original":{"line":71,"column":9},"generated":{"line":1,"column":320}},{"source":"../src/exports.ts","name":null,"original":{"line":71,"column":9},"generated":{"line":1,"column":327}},{"source":"../src/exports.ts","name":null,"original":{"line":71,"column":13},"generated":{"line":1,"column":331}},{"source":"../src/exports.ts","name":null,"original":{"line":71,"column":9},"generated":{"line":1,"column":333}},{"source":"../src/exports.ts","name":null,"original":{"line":71,"column":25},"generated":{"line":1,"column":345}},{"source":"../src/exports.ts","name":null,"original":{"line":134,"column":6},"generated":{"line":1,"column":348}},{"source":"../src/exports.ts","name":null,"original":{"line":134,"column":16},"generated":{"line":1,"column":357}},{"source":"../src/exports.ts","name":null,"original":{"line":134,"column":27},"generated":{"line":1,"column":359}},{"source":"../src/exports.ts","name":null,"original":{"line":135,"column":9},"generated":{"line":1,"column":362}},{"source":"../src/exports.ts","name":null,"original":{"line":135,"column":9},"generated":{"line":1,"column":369}},{"source":"../src/exports.ts","name":null,"original":{"line":135,"column":13},"generated":{"line":1,"column":373}},{"source":"../src/exports.ts","name":null,"original":{"line":135,"column":9},"generated":{"line":1,"column":375}},{"source":"../src/exports.ts","name":null,"original":{"line":135,"column":24},"generated":{"line":1,"column":386}},{"source":"../src/exports.ts","name":null,"original":{"line":229,"column":6},"generated":{"line":1,"column":389}},{"source":"../src/exports.ts","name":null,"original":{"line":229,"column":16},"generated":{"line":1,"column":398}},{"source":"../src/exports.ts","name":null,"original":{"line":230,"column":4},"generated":{"line":1,"column":400}},{"source":"../src/exports.ts","name":null,"original":{"line":231,"column":4},"generated":{"line":1,"column":402}},{"source":"../src/exports.ts","name":null,"original":{"line":235,"column":9},"generated":{"line":1,"column":405}},{"source":"../src/exports.ts","name":null,"original":{"line":232,"column":17},"generated":{"line":1,"column":412}},{"source":"../src/exports.ts","name":null,"original":{"line":232,"column":6},"generated":{"line":1,"column":418}},{"source":"../src/exports.ts","name":null,"original":{"line":233,"column":4},"generated":{"line":1,"column":422}},{"source":"../src/exports.ts","name":null,"original":{"line":233,"column":14},"generated":{"line":1,"column":424}},{"source":"../src/exports.ts","name":null,"original":{"line":235,"column":9},"generated":{"line":1,"column":429}},{"source":"../src/exports.ts","name":null,"original":{"line":235,"column":33},"generated":{"line":1,"column":431}},{"source":"../src/exports.ts","name":null,"original":{"line":235,"column":33},"generated":{"line":1,"column":433}},{"source":"../src/exports.ts","name":null,"original":{"line":235,"column":33},"generated":{"line":1,"column":458}},{"source":"../src/exports.ts","name":null,"original":{"line":235,"column":50},"generated":{"line":1,"column":460}},{"source":"../src/exports.ts","name":null,"original":{"line":261,"column":6},"generated":{"line":1,"column":463}},{"source":"../src/exports.ts","name":null,"original":{"line":261,"column":16},"generated":{"line":1,"column":472}},{"source":"../src/exports.ts","name":null,"original":{"line":261,"column":22},"generated":{"line":1,"column":474}},{"source":"../src/exports.ts","name":null,"original":{"line":262,"column":9},"generated":{"line":1,"column":477}},{"source":"../src/exports.ts","name":null,"original":{"line":262,"column":9},"generated":{"line":1,"column":484}},{"source":"../src/exports.ts","name":null,"original":{"line":262,"column":15},"generated":{"line":1,"column":486}},{"source":"../src/exports.ts","name":null,"original":{"line":262,"column":15},"generated":{"line":1,"column":488}},{"source":"../src/exports.ts","name":null,"original":{"line":262,"column":15},"generated":{"line":1,"column":495}},{"source":"../src/exports.ts","name":null,"original":{"line":265,"column":6},"generated":{"line":1,"column":498}},{"source":"../src/exports.ts","name":null,"original":{"line":265,"column":16},"generated":{"line":1,"column":507}},{"source":"../src/exports.ts","name":null,"original":{"line":266,"column":4},"generated":{"line":1,"column":509}},{"source":"../src/exports.ts","name":null,"original":{"line":267,"column":4},"generated":{"line":1,"column":511}},{"source":"../src/exports.ts","name":null,"original":{"line":268,"column":30},"generated":{"line":1,"column":514}},{"source":"../src/exports.ts","name":null,"original":{"line":268,"column":30},"generated":{"line":1,"column":516}},{"source":"../src/exports.ts","name":null,"original":{"line":268,"column":30},"generated":{"line":1,"column":544}},{"source":"../src/exports.ts","name":null,"original":{"line":269,"column":6},"generated":{"line":1,"column":572}},{"source":"../src/exports.ts","name":null,"original":{"line":269,"column":22},"generated":{"line":1,"column":574}}],"sources":{"../src/exports.ts":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Exported functions.\n */\n\nimport {io} from '@tensorflow/tfjs-core';\n\nimport {BaseCallbackConstructor, CallbackConstructorRegistry} from './base_callbacks';\nimport {ContainerArgs} from './engine/container';\nimport {Input, InputConfig,} from './engine/input_layer';\nimport {SymbolicTensor} from './engine/topology';\nimport {LayersModel} from './engine/training';\nimport {loadLayersModelInternal, Sequential, SequentialArgs} from './models';\n\n// TODO(cais): Add doc string to all the public static functions in this\n//   class; include exectuable JavaScript code snippets where applicable\n//   (b/74074458).\n\n// LayersModel and related factory methods.\n\n/**\n * A model is a data structure that consists of `Layers` and defines inputs\n * and outputs.\n *\n * The key difference between `tf.model` and `tf.sequential` is that\n * `tf.model` is more generic, supporting an arbitrary graph (without\n * cycles) of layers. `tf.sequential` is less generic and supports only a linear\n * stack of layers.\n *\n * When creating a `tf.LayersModel`, specify its input(s) and output(s). Layers\n * are used to wire input(s) to output(s).\n *\n * For example, the following code snippet defines a model consisting of\n * two `dense` layers, with 10 and 4 units, respectively.\n *\n * ```js\n * // Define input, which has a size of 5 (not including batch dimension).\n * const input = tf.input({shape: [5]});\n *\n * // First dense layer uses relu activation.\n * const denseLayer1 = tf.layers.dense({units: 10, activation: 'relu'});\n * // Second dense layer uses softmax activation.\n * const denseLayer2 = tf.layers.dense({units: 4, activation: 'softmax'});\n *\n * // Obtain the output symbolic tensor by applying the layers on the input.\n * const output = denseLayer2.apply(denseLayer1.apply(input));\n *\n * // Create the model based on the inputs.\n * const model = tf.model({inputs: input, outputs: output});\n *\n * // The model can be used for training, evaluation and prediction.\n * // For example, the following line runs prediction with the model on\n * // some fake data.\n * model.predict(tf.ones([2, 5])).print();\n * ```\n * See also:\n *   `tf.sequential`, `tf.loadLayersModel`.\n *\n * @doc {heading: 'Models', subheading: 'Creation'}\n */\nexport function model(args: ContainerArgs): LayersModel {\n  return new LayersModel(args);\n}\n\n/**\n * Creates a `tf.Sequential` model.  A sequential model is any model where the\n * outputs of one layer are the inputs to the next layer, i.e. the model\n * topology is a simple 'stack' of layers, with no branching or skipping.\n *\n * This means that the first layer passed to a `tf.Sequential` model should have\n * a defined input shape. What that means is that it should have received an\n * `inputShape` or `batchInputShape` argument, or for some type of layers\n * (recurrent, Dense...) an `inputDim` argument.\n *\n * The key difference between `tf.model` and `tf.sequential` is that\n * `tf.sequential` is less generic, supporting only a linear stack of layers.\n * `tf.model` is more generic and supports an arbitrary graph (without\n * cycles) of layers.\n *\n * Examples:\n *\n * ```js\n * const model = tf.sequential();\n *\n * // First layer must have an input shape defined.\n * model.add(tf.layers.dense({units: 32, inputShape: [50]}));\n * // Afterwards, TF.js does automatic shape inference.\n * model.add(tf.layers.dense({units: 4}));\n *\n * // Inspect the inferred shape of the model's output, which equals\n * // `[null, 4]`. The 1st dimension is the undetermined batch dimension; the\n * // 2nd is the output size of the model's last layer.\n * console.log(JSON.stringify(model.outputs[0].shape));\n * ```\n *\n * It is also possible to specify a batch size (with potentially undetermined\n * batch dimension, denoted by \"null\") for the first layer using the\n * `batchInputShape` key. The following example is equivalent to the above:\n *\n * ```js\n * const model = tf.sequential();\n *\n * // First layer must have a defined input shape\n * model.add(tf.layers.dense({units: 32, batchInputShape: [null, 50]}));\n * // Afterwards, TF.js does automatic shape inference.\n * model.add(tf.layers.dense({units: 4}));\n *\n * // Inspect the inferred shape of the model's output.\n * console.log(JSON.stringify(model.outputs[0].shape));\n * ```\n *\n * You can also use an `Array` of already-constructed `Layer`s to create\n * a `tf.Sequential` model:\n *\n * ```js\n * const model = tf.sequential({\n *   layers: [tf.layers.dense({units: 32, inputShape: [50]}),\n *            tf.layers.dense({units: 4})]\n * });\n * console.log(JSON.stringify(model.outputs[0].shape));\n * ```\n *\n * @doc {heading: 'Models', subheading: 'Creation'}\n */\nexport function sequential(config?: SequentialArgs): Sequential {\n  return new Sequential(config);\n}\n\n/**\n * Load a model composed of Layer objects, including its topology and optionally\n * weights. See the Tutorial named \"How to import a Keras Model\" for usage\n * examples.\n *\n * This method is applicable to:\n *\n * 1. Models created with the `tf.layers.*`, `tf.sequential`, and\n * `tf.model` APIs of TensorFlow.js and later saved with the\n * `tf.LayersModel.save` method.\n * 2. Models converted from Keras or TensorFlow tf.keras using the\n * [tensorflowjs_converter](https://github.com/tensorflow/tfjs/tree/master/tfjs-converter).\n *\n * This mode is *not* applicable to TensorFlow `SavedModel`s or their converted\n * forms. For those models, use `tf.loadGraphModel`.\n *\n * Example 1. Load a model from an HTTP server.\n *\n * ```js\n * const model = await tf.loadLayersModel(\n *     'https://storage.googleapis.com/tfjs-models/tfjs/iris_v1/model.json');\n * model.summary();\n * ```\n *\n * Example 2: Save `model`'s topology and weights to browser [local\n * storage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage);\n * then load it back.\n *\n * ```js\n * const model = tf.sequential(\n *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\n * console.log('Prediction from original model:');\n * model.predict(tf.ones([1, 3])).print();\n *\n * const saveResults = await model.save('localstorage://my-model-1');\n *\n * const loadedModel = await tf.loadLayersModel('localstorage://my-model-1');\n * console.log('Prediction from loaded model:');\n * loadedModel.predict(tf.ones([1, 3])).print();\n * ```\n *\n * Example 3. Saving `model`'s topology and weights to browser\n * [IndexedDB](https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API);\n * then load it back.\n *\n * ```js\n * const model = tf.sequential(\n *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\n * console.log('Prediction from original model:');\n * model.predict(tf.ones([1, 3])).print();\n *\n * const saveResults = await model.save('indexeddb://my-model-1');\n *\n * const loadedModel = await tf.loadLayersModel('indexeddb://my-model-1');\n * console.log('Prediction from loaded model:');\n * loadedModel.predict(tf.ones([1, 3])).print();\n * ```\n *\n * Example 4. Load a model from user-selected files from HTML\n * [file input\n * elements](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file).\n *\n * ```js\n * // Note: this code snippet will not work without the HTML elements in the\n * //   page\n * const jsonUpload = document.getElementById('json-upload');\n * const weightsUpload = document.getElementById('weights-upload');\n *\n * const model = await tf.loadLayersModel(\n *     tf.io.browserFiles([jsonUpload.files[0], weightsUpload.files[0]]));\n * ```\n *\n * @param pathOrIOHandler Can be either of the two formats\n *   1. A string path to the `ModelAndWeightsConfig` JSON describing\n *      the model in the canonical TensorFlow.js format. For file://\n *      (tfjs-node-only), http:// and https:// schemas, the path can be\n *      either absolute or relative.\n *   2. An `tf.io.IOHandler` object that loads model artifacts with its `load`\n *      method.\n * @param options Optional configuration arguments for the model loading,\n *   including:\n *   - `strict`: Require that the provided weights exactly match those required\n *     by the layers.  Default true.  Passing false means that both extra\n *     weights and missing weights will be silently ignored.\n *   - `onProgress`: A function of the signature `(fraction: number) => void',\n *     that can be used as the progress callback for the model loading.\n * @returns A `Promise` of `tf.LayersModel`, with the topology and weights\n *     loaded.\n *\n * @doc {heading: 'Models', subheading: 'Loading'}\n */\nexport function loadLayersModel(\n    pathOrIOHandler: string|io.IOHandler,\n    options?: io.LoadOptions): Promise<LayersModel> {\n  if (options == null) {\n    options = {};\n  }\n  return loadLayersModelInternal(pathOrIOHandler, options);\n}\n\n/**\n * Used to instantiate an input to a model as a `tf.SymbolicTensor`.\n *\n * Users should call the `input` factory function for\n * consistency with other generator functions.\n *\n * Example:\n *\n * ```js\n * // Defines a simple logistic regression model with 32 dimensional input\n * // and 3 dimensional output.\n * const x = tf.input({shape: [32]});\n * const y = tf.layers.dense({units: 3, activation: 'softmax'}).apply(x);\n * const model = tf.model({inputs: x, outputs: y});\n * model.predict(tf.ones([2, 32])).print();\n * ```\n *\n * Note: `input` is only necessary when using `model`. When using\n * `sequential`, specify `inputShape` for the first layer or use `inputLayer`\n * as the first layer.\n *\n * @doc {heading: 'Models', subheading: 'Inputs'}\n */\nexport function input(config: InputConfig): SymbolicTensor {\n  return Input(config);\n}\n\nexport function registerCallbackConstructor(\n    verbosityLevel: number,\n    callbackConstructor: BaseCallbackConstructor): void {\n  CallbackConstructorRegistry.registerCallbackConstructor(\n      verbosityLevel, callbackConstructor);\n}\n"},"lineCount":null}},"error":null,"hash":"3e53b7e5a2a68ce7dbe436145d53e905","cacheData":{"env":{}}}