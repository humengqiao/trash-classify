{"id":"bI75","dependencies":[{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/package.json","includedInParent":true,"mtime":1609563696417},{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-backend-webgl/package.json","includedInParent":true,"mtime":499162500000},{"name":"./glsl_version","loc":{"line":17,"column":35},"parent":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-backend-webgl/dist/im2col_packed_gpu.js","resolved":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-backend-webgl/dist/glsl_version.js"}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.Im2ColPackedProgram=void 0;var n=require(\"./glsl_version\");class e{constructor(e,t,i){this.variableNames=[\"A\"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e;const{filterWidth:s,inChannels:o,strideWidth:r,strideHeight:d,padInfo:l,outWidth:c,dilationWidth:a,dilationHeight:f,dataFormat:$}=i,{left:h,top:p}=l,u=o*s,m=(0,n.getGlslDifferences)(),v=\"channelsLast\"===$,g=v?0:1,x=v?1:2;let D=\"\";for(let n=0;n<=1;n++)for(let i=0;i<=1;i++)D+=`\\n          blockIndex = rc.y + ${i};\\n          pos = rc.x + ${n};\\n\\n          if(blockIndex < ${e[1]} && pos < ${e[0]}) {\\n            offsetY = int(blockIndex / (${c})) * ${d} - ${p};\\n            d0 = offsetY + ${f} * (pos / ${u});\\n\\n            if(d0 < ${t[g]} && d0 >= 0) {\\n\\n              offsetX = int(mod(float(blockIndex), ${c}.) * ${r}. - ${h}.);\\n              d1 = offsetX + ${a} * (int(mod(float(pos), ${u}.) / ${o}.));\\n\\n              if(d1 < ${t[x]} && d1 >= 0) {\\n\\n                ch = int(mod(float(pos), ${o}.));\\n\\n                if (${v}) {\\n                  innerDims = vec2(d1, ch);\\n                  result[${2*n+i}] = getChannel(\\n                    getA(d0, int(innerDims.x),\\n                    int(innerDims.y)), innerDims);\\n                } else {\\n                  innerDims = vec2(d0, d1);\\n                  result[${2*n+i}] = getChannel(\\n                    getA(ch, int(innerDims.x),\\n                    int(innerDims.y)), innerDims);\\n                }\\n              }\\n            }\\n          }\\n        `;this.userCode=`\\n      void main() {\\n        ivec2 rc = getOutputCoords();\\n\\n        vec4 result = vec4(0);\\n\\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\\n        vec2 innerDims;\\n\\n        ${D}\\n\\n        ${m.output} = result;\\n      }\\n    `}}exports.Im2ColPackedProgram=e;"},"sourceMaps":null,"error":null,"hash":"d639c3c90f74e5fa9d8658101c5cc3f6","cacheData":{"env":{}}}