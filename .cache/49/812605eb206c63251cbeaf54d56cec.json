{"id":"phT7","dependencies":[{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/package.json","includedInParent":true,"mtime":1609564004117},{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-core/package.json","includedInParent":true,"mtime":499162500000},{"name":"./backends/backend","loc":{"line":17,"column":30},"parent":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-core/dist/engine.js","resolved":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-core/dist/backends/backend.js"},{"name":"./environment","loc":{"line":18,"column":50},"parent":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-core/dist/engine.js","resolved":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-core/dist/environment.js"},{"name":"./global_util","loc":{"line":19,"column":35},"parent":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-core/dist/engine.js","resolved":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-core/dist/global_util.js"},{"name":"./kernel_names","loc":{"line":20,"column":26},"parent":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-core/dist/engine.js","resolved":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-core/dist/kernel_names.js"},{"name":"./kernel_registry","loc":{"line":21,"column":61},"parent":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-core/dist/engine.js","resolved":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-core/dist/kernel_registry.js"},{"name":"./profiler","loc":{"line":22,"column":25},"parent":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-core/dist/engine.js","resolved":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-core/dist/profiler.js"},{"name":"./tape","loc":{"line":23,"column":61},"parent":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-core/dist/engine.js","resolved":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-core/dist/tape.js"},{"name":"./tensor","loc":{"line":24,"column":51},"parent":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-core/dist/engine.js","resolved":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-core/dist/tensor.js"},{"name":"./tensor_util","loc":{"line":25,"column":38},"parent":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-core/dist/engine.js","resolved":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-core/dist/tensor_util.js"},{"name":"./util","loc":{"line":27,"column":77},"parent":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-core/dist/engine.js","resolved":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-core/dist/util.js"}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.getOrMakeEngine=y,exports.add=k,exports.ENGINE=exports.Engine=void 0;var e=require(\"./backends/backend\"),t=require(\"./environment\"),s=require(\"./global_util\"),n=require(\"./kernel_names\"),r=require(\"./kernel_registry\"),a=require(\"./profiler\"),i=require(\"./tape\"),o=require(\"./tensor\"),c=require(\"./tensor_util\"),h=l(require(\"./util\"));function d(){if(\"function\"!=typeof WeakMap)return null;var e=new WeakMap;return d=function(){return e},e}function l(e){if(e&&e.__esModule)return e;if(null===e||\"object\"!=typeof e&&\"function\"!=typeof e)return{default:e};var t=d();if(t&&t.has(e))return t.get(e);var s={},n=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var a=n?Object.getOwnPropertyDescriptor(e,r):null;a&&(a.get||a.set)?Object.defineProperty(s,r,a):s[r]=e[r]}return s.default=e,t&&t.set(e,s),s}class u{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null}}dispose(){for(const e in this.registeredVariables)this.registeredVariables[e].dispose()}}class p{constructor(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new u}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then(()=>{});if(null!=this.backendInstance)return;const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const s=e[t];if(await this.initializeBackend(s).success)return void(await this.setBackend(s))}throw new Error(\"Could not initialize any backends, all backend initializations failed.\")}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make `+\"sure to await tf.ready() or await tf.setBackend() before calling other methods\");if(null==this.backendInstance){const{name:e,asyncInit:t}=this.initializeBackendsAndReturnBest();if(t)throw new Error(`The highest priority backend '${e}' has not yet been `+\"initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods\");this.setBackend(e)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(e){if(!(e in this.registry)){if(!(e in this.registryFactory))return null;{const{asyncInit:t}=this.initializeBackend(e);if(t)return null}}return this.registry[e]}findBackendFactory(e){return e in this.registryFactory?this.registryFactory[e].factory:null}registerBackend(e,t,s=1){return e in this.registryFactory?(console.warn(`${e} backend was already registered. `+\"Reusing existing backend factory.\"),!1):(this.registryFactory[e]={factory:t,priority:s},!0)}async setBackend(e){if(null==this.registryFactory[e])throw new Error(`Backend name '${e}' not found in registry`);if(this.backendName=e,null==this.registry[e]){this.backendInstance=null;const{success:t,asyncInit:s}=this.initializeBackend(e);if(!(s?await t:t))return!1}return this.backendInstance=this.registry[e],this.setupRegisteredKernels(),this.profiler=new a.Profiler(this.backendInstance),!0}setupRegisteredKernels(){(0,r.getKernelsForBackend)(this.backendName).forEach(e=>{null!=e.setupFunc&&e.setupFunc(this.backendInstance)})}disposeRegisteredKernels(e){(0,r.getKernelsForBackend)(e).forEach(t=>{null!=t.disposeFunc&&t.disposeFunc(this.registry[e])})}initializeBackend(t){const s=this.registryFactory[t];if(null==s)throw new Error(`Cannot initialize backend ${t}, no registration found.`);try{const r=s.factory();if(!r||r instanceof e.KernelBackend||\"function\"!=typeof r.then)return this.registry[t]=r,{success:!0,asyncInit:!1};{const e=++this.pendingBackendInitId,s=r.then(s=>!(e<this.pendingBackendInitId)&&(this.registry[t]=s,this.pendingBackendInit=null,!0)).catch(s=>!(e<this.pendingBackendInitId)&&(this.pendingBackendInit=null,console.warn(`Initialization of backend ${t} failed`),console.warn(s.stack||s.message),!1));return this.pendingBackendInit=s,{success:s,asyncInit:!0}}}catch(n){return console.warn(`Initialization of backend ${t} failed`),console.warn(n.stack||n.message),{success:!1,asyncInit:!1}}}removeBackend(e){if(!(e in this.registryFactory))throw new Error(`${e} backend not found in registry`);this.backendName===e&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error(\"No backend found in registry.\");return Object.keys(this.registryFactory).sort((e,t)=>this.registryFactory[t].priority-this.registryFactory[e].priority)}initializeBackendsAndReturnBest(){const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const s=e[t],{success:n,asyncInit:r}=this.initializeBackend(s);if(r||n)return{name:s,asyncInit:r}}throw new Error(\"Could not initialize any backends, all backend initializations failed.\")}moveData(e,t){const s=this.state.tensorInfo.get(t),n=s.backend,r=this.readSync(t);n.disposeData(t),s.backend=e,e.move(t,r,s.shape,s.dtype),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(e,t){let s,n=null;if(null==t){if(\"function\"!=typeof e)throw new Error(\"Please provide a function to tidy()\");t=e}else{if(\"string\"!=typeof e&&!(e instanceof String))throw new Error(\"When calling with two arguments, the first argument to tidy() must be a string\");if(\"function\"!=typeof t)throw new Error(\"When calling with two arguments, the 2nd argument to tidy() must be a function\");n=e}return this.scopedRun(()=>this.startScope(n),()=>this.endScope(s),()=>((s=t())instanceof Promise&&console.error(\"Cannot return a Promise inside of tidy.\"),s))}scopedRun(e,t,s){e();try{const e=s();return t(),e}catch(n){throw t(),n}}nextTensorId(){return p.nextTensorId++}nextVariableId(){return p.nextVariableId++}clone(e){const t=this.makeTensorFromDataId(e.dataId,e.shape,e.dtype),s={x:e};return this.addTapeNode(this.state.activeScope.name,s,[t],e=>({x:()=>{const t={x:e},s={dtype:\"float32\"};return g.runKernelFunc(t=>t.cast(e,\"float32\"),t,null,n.Cast,s)}}),[],{}),t}runKernel(e,t,s,n,r){return this.runKernelFunc(null,t,null,e,s,n,r)}shouldCheckForMemLeaks(){return this.ENV.getBool(\"IS_TEST\")}checkKernelForMemLeak(e,t,s){const n=this.backend.numDataIds();let r=0;s.forEach(e=>{r+=\"complex64\"===e.dtype?3:1});const a=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],i=n-t-r-a;if(i>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak `+`(${i} data ids) after running '${e}'`)}runKernelFunc(e,t,s,n,a,i,o){let c,h=[];const d=this.isTapeOn();null==n&&(n=null!=this.state.activeScope?this.state.activeScope.name:\"\");const l=this.state.numBytes,u=this.state.numTensors;let p;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0);const f=(0,r.getKernel)(n,this.backendName);let y,g;if(null!=f)p=(()=>{const e=this.backend.numDataIds();y=f.kernelFunc({inputs:t,attrs:a,backend:this.backend});const s=Array.isArray(y)?y:[y];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(n,e,s);const r=s.map(({dataId:e,shape:t,dtype:s})=>this.makeTensorFromDataId(e,t,s));if(d){let e=this.getTensorsForGradient(n,t,r);if(null==e){null==o&&(o=[]);const t=r.filter((e,t)=>o[t]);e=(i||[]).slice().concat(t)}h=this.saveTensorsForBackwardMode(e)}return r});else{const t=e=>{d&&(h=e.map(e=>this.keep(this.clone(e))))};p=(()=>{const s=this.backend.numDataIds();y=this.tidy(()=>e(this.backend,t));const r=Array.isArray(y)?y:[y];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(n,s,r),r})}return this.scopedRun(()=>this.state.kernelDepth++,()=>this.state.kernelDepth--,()=>{this.ENV.getBool(\"DEBUG\")||this.state.profiling?(g=this.profiler.profileKernel(n,t,()=>p()),this.ENV.getBool(\"DEBUG\")&&this.profiler.logKernelProfile(g),c=g.outputs):c=p()}),d&&this.addTapeNode(n,t,c,s,h,a),this.state.profiling&&this.state.activeProfile.kernels.push({name:n,bytesAdded:this.state.numBytes-l,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-u,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(t).map(e=>null!=t[e]?t[e].shape:null),outputShapes:c.map(e=>e.shape),kernelTimeMs:g.timeMs,extraInfo:g.extraInfo}),Array.isArray(y)?c:c[0]}saveTensorsForBackwardMode(e){return e.map(e=>this.keep(this.clone(e)))}getTensorsForGradient(e,t,s){const n=(0,r.getGradient)(e);if(null!=n){const e=n.inputsToSave||[],r=n.outputsToSave||[];let a;n.saveAllInputs?(h.assert(Array.isArray(t),()=>\"saveAllInputs is true, expected inputs to be an array.\"),a=Object.keys(t).map(e=>t[e])):a=e.map(e=>t[e]);const i=s.filter((e,t)=>r[t]);return a.concat(i)}return null}makeTensor(e,t,s,n){if(null==e)throw new Error(\"Values passed to engine.makeTensor() are null\");s=s||\"float32\",n=n||this.backend;let r=e;\"string\"===s&&h.isString(e[0])&&(r=e.map(e=>h.encodeString(e)));const a=n.write(r,t,s),i=new o.Tensor(t,s,a,this.nextTensorId());if(this.incRef(i,n),\"string\"===s){const e=this.state.tensorInfo.get(a),t=(0,h.bytesFromStringArray)(r);this.state.numBytes+=t-e.bytes,e.bytes=t}return i}makeTensorFromDataId(e,t,s,n){s=s||\"float32\";const r=new o.Tensor(t,s,e,this.nextTensorId());return this.incRef(r,n),r}makeVariable(e,t=!0,s,n){s=s||this.nextVariableId().toString(),null!=n&&n!==e.dtype&&(e=e.cast(n));const r=new o.Variable(e,t,s,this.nextTensorId());if(null!=this.state.registeredVariables[r.name])throw new Error(`Variable with name ${r.name} was already registered`);return this.state.registeredVariables[r.name]=r,this.incRef(r,this.backend),r}incRef(e,t){const s=this.state.tensorInfo.has(e.dataId)?this.state.tensorInfo.get(e.dataId).refCount:0;if(this.state.numTensors++,\"string\"===e.dtype&&this.state.numStringTensors++,0===s){this.state.numDataBuffers++;let s=0;\"complex64\"!==e.dtype&&\"string\"!==e.dtype&&(s=e.size*h.bytesPerElement(e.dtype)),this.state.tensorInfo.set(e.dataId,{backend:t||this.backend,dtype:e.dtype,shape:e.shape,bytes:s,refCount:0}),this.state.numBytes+=s}this.state.tensorInfo.get(e.dataId).refCount++,e instanceof o.Variable||this.track(e)}disposeTensor(e){if(!this.state.tensorInfo.has(e.dataId))return;this.state.numTensors--,\"string\"===e.dtype&&this.state.numStringTensors--;const t=this.state.tensorInfo.get(e.dataId);t.refCount<=1?(\"complex64\"!==e.dtype&&(this.state.numBytes-=t.bytes),this.state.numDataBuffers--,t.backend.disposeData(e.dataId),this.state.tensorInfo.delete(e.dataId)):this.state.tensorInfo.get(e.dataId).refCount--}disposeVariables(){for(const e in this.state.registeredVariables){const t=this.state.registeredVariables[e];this.disposeVariable(t)}}disposeVariable(e){this.disposeTensor(e),null!=this.state.registeredVariables[e.name]&&delete this.state.registeredVariables[e.name]}memory(){const e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,null==e.reasons&&(e.reasons=[]),e.reasons.push(\"Memory usage by string tensors is approximate (2 bytes per character)\")),e}async profile(e){this.state.profiling=!0;const t=this.state.numBytes,s=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await e(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map(e=>e.totalBytesSnapshot)),this.state.activeProfile.newBytes=this.state.numBytes-t,this.state.activeProfile.newTensors=this.state.numTensors-s;for(const n of this.state.activeProfile.kernels)n.kernelTimeMs=await n.kernelTimeMs,n.extraInfo=await n.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(e,t,s,n,a,i){const o={id:this.state.nextTapeNodeId++,kernelName:e,inputs:t,outputs:s,saved:a},c=(0,r.getGradient)(e);null!=c&&(n=c.gradFunc),null!=n&&(o.gradient=(e=>(e=e.map((e,t)=>{if(null==e){const e=s[t],n=h.makeZerosTypedArray(e.size,e.dtype);return this.makeTensor(n,e.shape,e.dtype)}return e}),n(e.length>1?e:e[0],a,i)))),this.state.activeTape.push(o)}keep(e){return e.kept=!0,e}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(e){const t={track:[],name:\"unnamed scope\",id:this.state.nextScopeId++};e&&(t.name=e),this.state.scopeStack.push(t),this.state.activeScope=t}endScope(e){const t=(0,c.getTensorsInContainer)(e),s=new Set(t.map(e=>e.id));for(let r=0;r<this.state.activeScope.track.length;r++){const e=this.state.activeScope.track[r];e.kept||s.has(e.id)||e.dispose()}const n=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],t.forEach(e=>{e.kept||e.scopeId!==n.id||this.track(e)})}gradients(e,t,s,n=!1){if(h.assert(t.length>0,()=>\"gradients() received an empty list of xs.\"),null!=s&&\"float32\"!==s.dtype)throw new Error(`dy must have 'float32' dtype, but has '${s.dtype}'`);const r=this.scopedRun(()=>this.startTape(),()=>this.endTape(),()=>this.tidy(\"forward\",e));h.assert(r instanceof o.Tensor,()=>\"The result y returned by f() must be a tensor.\");const a=(0,i.getFilteredNodesXToY)(this.state.activeTape,t,r);if(!n&&0===a.length&&t.length>0)throw new Error(\"Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.\");return this.tidy(\"backward\",()=>{const e={};e[r.id]=null==s?f(r.shape):s,(0,i.backpropagateGradients)(e,a,e=>this.tidy(e),k);const n=t.map(t=>e[t.id]);return 0===this.state.gradientDepth&&(this.state.activeTape.forEach(e=>{for(const t of e.saved)t.dispose()}),this.state.activeTape=null),{value:r,grads:n}})}customGrad(e){return h.assert(h.isFunction(e),()=>\"The f passed in customGrad(f) must be a function.\"),(...t)=>{let s;h.assert(t.every(e=>e instanceof o.Tensor),()=>\"The args passed in customGrad(f)(x1, x2,...) must all be tensors\");const n={};return t.forEach((e,t)=>{n[t]=e}),this.runKernelFunc((n,r)=>(s=e(...t,r),h.assert(s.value instanceof o.Tensor,()=>\"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor\"),h.assert(h.isFunction(s.gradFunc),()=>\"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function.\"),s.value),n,(e,n)=>{const r=s.gradFunc(e,n),a=Array.isArray(r)?r:[r];h.assert(a.length===t.length,()=>\"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...).\"),h.assert(a.every(e=>e instanceof o.Tensor),()=>\"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors.\");const i={};return a.forEach((e,t)=>{i[t]=(()=>e)}),i})}}readSync(e){return this.state.tensorInfo.get(e).backend.readSync(e)}read(e){return this.state.tensorInfo.get(e).backend.read(e)}async time(e){const t=(0,h.now)(),s=await this.backend.time(e);return s.wallMs=(0,h.now)()-t,s}track(e){return null!=this.state.activeScope&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new u;for(const e in this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}function f(e){const t=(0,h.makeOnesTypedArray)((0,h.sizeFromShape)(e),\"float32\");return g.makeTensor(t,e,\"float32\")}function y(){const e=(0,s.getGlobalNamespace)();if(null==e._tfengine){const s=new t.Environment(e);e._tfengine=new p(s)}return(0,t.setEnvironmentGlobal)(e._tfengine.ENV),(0,o.setTensorTracker)(()=>e._tfengine),e._tfengine}exports.Engine=p,p.nextTensorId=0,p.nextVariableId=0;const g=y();function k(e,t){const s={a:e,b:t};return g.runKernelFunc((s,n)=>{const r=s.add(e,t);return n([e,t]),r},s,null,n.Add)}exports.ENGINE=g;"},"sourceMaps":null,"error":null,"hash":"0e881ff578895b939b641d86e2200097","cacheData":{"env":{}}}