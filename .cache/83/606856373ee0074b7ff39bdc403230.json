{"id":"TApJ","dependencies":[{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-backend-webgl/dist/fft_gpu.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-backend-webgl/src/fft_gpu.ts","includedInParent":true,"mtime":499162500000},{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/package.json","includedInParent":true,"mtime":1609563562293},{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-backend-webgl/package.json","includedInParent":true,"mtime":499162500000}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.FFTProgram=void 0;class e{constructor(e,t,n){this.variableNames=[\"real\",\"imag\"];const o=t[1];this.outputShape=t;const a=n?`2.0 * ${Math.PI}`:`-2.0 * ${Math.PI}`,i=n?`${o}.0`:\"1.0\";let l;if(\"real\"===e)l=\"return real * expR - imag * expI;\";else{if(\"imag\"!==e)throw new Error(`FFT component must be either \"real\" or \"imag\", got ${e}.`);l=\"return real * expI + imag * expR;\"}this.userCode=`\\n      const float exponentMultiplier = ${a};\\n\\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\\n        ${l}\\n      }\\n\\n      float mulMatDFT(int batch, int index) {\\n        float indexRatio = float(index) / float(${o});\\n        float exponentMultiplierTimesIndexRatio =\\n            exponentMultiplier * indexRatio;\\n\\n        float result = 0.0;\\n\\n        for (int i = 0; i < ${o}; i++) {\\n          // x = (-2|2 * PI / N) * index * i;\\n          float x = exponentMultiplierTimesIndexRatio * float(i);\\n          float expR = cos(x);\\n          float expI = sin(x);\\n          float real = getReal(batch, i);\\n          float imag = getImag(batch, i);\\n\\n          result +=\\n              unaryOpComplex(real, expR, imag, expI) / ${i};\\n        }\\n\\n        return result;\\n      }\\n\\n      void main() {\\n        ivec2 coords = getOutputCoords();\\n        setOutput(mulMatDFT(coords[0], coords[1]));\\n      }\\n    `}}exports.FFTProgram=e;"},"sourceMaps":{"js":{"mappings":[{"source":"../src/fft_gpu.ts","name":null,"original":{"line":20,"column":23},"generated":{"line":1,"column":0}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":20,"column":23},"generated":{"line":1,"column":13}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":20,"column":23},"generated":{"line":1,"column":20}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":20,"column":23},"generated":{"line":1,"column":35}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":20,"column":23},"generated":{"line":1,"column":43}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":20,"column":23},"generated":{"line":1,"column":56}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":20,"column":23},"generated":{"line":1,"column":57}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":20,"column":23},"generated":{"line":1,"column":64}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":20,"column":23},"generated":{"line":1,"column":68}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":20,"column":23},"generated":{"line":1,"column":76}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":20,"column":23},"generated":{"line":1,"column":92}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":20,"column":6},"generated":{"line":1,"column":94}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":20,"column":13},"generated":{"line":1,"column":100}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":25,"column":2},"generated":{"line":1,"column":102}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":26,"column":6},"generated":{"line":1,"column":114}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":26,"column":32},"generated":{"line":1,"column":116}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":27,"column":6},"generated":{"line":1,"column":118}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":21,"column":2},"generated":{"line":1,"column":121}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":21,"column":2},"generated":{"line":1,"column":126}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":21,"column":18},"generated":{"line":1,"column":140}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":21,"column":19},"generated":{"line":1,"column":141}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":21,"column":27},"generated":{"line":1,"column":148}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":28,"column":10},"generated":{"line":1,"column":156}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":28,"column":10},"generated":{"line":1,"column":162}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":28,"column":21},"generated":{"line":1,"column":164}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":28,"column":32},"generated":{"line":1,"column":166}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":29,"column":9},"generated":{"line":1,"column":169}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":29,"column":9},"generated":{"line":1,"column":174}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":29,"column":23},"generated":{"line":1,"column":186}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":31,"column":10},"generated":{"line":1,"column":188}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":31,"column":10},"generated":{"line":1,"column":194}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":32,"column":8},"generated":{"line":1,"column":196}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":32,"column":27},"generated":{"line":1,"column":207}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":32,"column":32},"generated":{"line":1,"column":212}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":32,"column":49},"generated":{"line":1,"column":227}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":32,"column":54},"generated":{"line":1,"column":232}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":33,"column":10},"generated":{"line":1,"column":237}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":33,"column":30},"generated":{"line":1,"column":239}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":33,"column":43},"generated":{"line":1,"column":244}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":33,"column":58},"generated":{"line":1,"column":250}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":35,"column":8},"generated":{"line":1,"column":256}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":35,"column":8},"generated":{"line":1,"column":260}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":36,"column":8},"generated":{"line":1,"column":262}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":36,"column":22},"generated":{"line":1,"column":265}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":36,"column":8},"generated":{"line":1,"column":274}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":37,"column":6},"generated":{"line":1,"column":276}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":37,"column":17},"generated":{"line":1,"column":278}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":38,"column":11},"generated":{"line":1,"column":318}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":38,"column":11},"generated":{"line":1,"column":319}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":38,"column":29},"generated":{"line":1,"column":322}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":38,"column":15},"generated":{"line":1,"column":331}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":41,"column":12},"generated":{"line":1,"column":333}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":41,"column":12},"generated":{"line":1,"column":339}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":41,"column":16},"generated":{"line":1,"column":343}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":42,"column":64},"generated":{"line":1,"column":403}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":39,"column":6},"generated":{"line":1,"column":409}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":39,"column":17},"generated":{"line":1,"column":411}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":45,"column":9},"generated":{"line":1,"column":447}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":45,"column":9},"generated":{"line":1,"column":452}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":46,"column":41},"generated":{"line":1,"column":505}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":49,"column":10},"generated":{"line":1,"column":600}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":53,"column":50},"generated":{"line":1,"column":712}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":59,"column":30},"generated":{"line":1,"column":878}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":68,"column":57},"generated":{"line":1,"column":1234}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":20,"column":23},"generated":{"line":1,"column":1420}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":20,"column":23},"generated":{"line":1,"column":1428}},{"source":"../src/fft_gpu.ts","name":null,"original":{"line":20,"column":23},"generated":{"line":1,"column":1439}}],"sources":{"../src/fft_gpu.ts":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class FFTProgram implements GPGPUProgram {\n  variableNames = ['real', 'imag'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      component: 'real'|'imag', inputShape: [number, number],\n      inverse: boolean) {\n    const innerDim = inputShape[1];\n    this.outputShape = inputShape;\n\n    const exponentMultiplierSnippet =\n        inverse ? `2.0 * ${Math.PI}` : `-2.0 * ${Math.PI}`;\n    const resultDenominator = inverse ? `${innerDim}.0` : '1.0';\n\n    let opString: string;\n    if (component === 'real') {\n      opString = 'return real * expR - imag * expI;';\n    } else if (component === 'imag') {\n      opString = 'return real * expI + imag * expR;';\n    } else {\n      throw new Error(\n          `FFT component must be either \"real\" or \"imag\", got ${component}.`);\n    }\n\n    this.userCode = `\n      const float exponentMultiplier = ${exponentMultiplierSnippet};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${opString}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${innerDim});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${innerDim}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${resultDenominator};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `;\n  }\n}\n"},"lineCount":null}},"error":null,"hash":"85a6b30a62126d314a79621ef1d5b374","cacheData":{"env":{}}}