{"id":"UnlZ","dependencies":[{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-backend-webgl/dist/resize_bilinear_backprop_gpu.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-backend-webgl/src/resize_bilinear_backprop_gpu.ts","includedInParent":true,"mtime":499162500000},{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/package.json","includedInParent":true,"mtime":1609563562293},{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-backend-webgl/package.json","includedInParent":true,"mtime":499162500000}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.ResizeBilinearBackpropProgram=void 0;class t{constructor(t,n,e){this.variableNames=[\"dy\"],this.outputShape=[],this.outputShape=n.shape;const[,o,i]=n.shape,[,d,r]=t.shape,a=[e&&d>1?o-1:o,e&&r>1?i-1:i],f=[e&&d>1?d-1:d,e&&r>1?r-1:r],l=a[0]/f[0],s=a[1]/f[1],x=1/l,c=1/s,p=2*Math.ceil(x)+2,y=2*Math.ceil(c)+2;this.userCode=`\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int d = coords[3];\\n        int r = coords[1];\\n        int c = coords[2];\\n\\n        float accumulator = 0.0;\\n\\n        const float heightScale = float(${l});\\n        const float widthScale = float(${s});\\n\\n        const float invHeightScale = float(${x});\\n        const float invWidthScale = float(${c});\\n\\n        const int winHeight = int(${p});\\n        const int winWidth = int(${y});\\n\\n        // Compute bounds for where in dy we will look\\n        float startRLerp = floor(float(r) * invHeightScale);\\n        int startDyR = int(startRLerp - float(winHeight / 2));\\n\\n        float startCLerp = floor(float(c) * invWidthScale);\\n        int startDyC = int(startCLerp - float(winWidth / 2));\\n\\n        // Loop over dy\\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\\n          int dyR = dyROffset + startDyR;\\n\\n          // Guard against the window exceeding the bounds of dy\\n          if (dyR < 0 || dyR >= ${d}) {\\n            continue;\\n          }\\n\\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\\n            int dyC = dyCOffset + startDyC;\\n\\n            // Guard against the window exceeding the bounds of dy\\n            if (dyC < 0 || dyC >= ${r}) {\\n              continue;\\n            }\\n\\n            float dxR = float(dyR) * heightScale;\\n            int topDxRIndex = int(floor(dxR));\\n            int bottomDxRIndex = int(min(ceil(dxR), ${o-1}.0));\\n            float dxRLerp = dxR - float(topDxRIndex);\\n            float inverseDxRLerp = 1.0 - dxRLerp;\\n\\n            float dxC = float(dyC) * widthScale;\\n            int leftDxCIndex = int(floor(dxC));\\n            int rightDxCIndex = int(min(ceil(dxC), ${i-1}.0));\\n            float dxCLerp = dxC - float(leftDxCIndex);\\n            float inverseDxCLerp = 1.0 - dxCLerp;\\n\\n            if (r == topDxRIndex && c == leftDxCIndex) {\\n              // topLeft\\n              accumulator +=\\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\\n            }\\n\\n            if (r == topDxRIndex && c == rightDxCIndex) {\\n              // topRight\\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\\n            }\\n\\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\\n              // bottomLeft\\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\\n            }\\n\\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\\n              // bottomRight\\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\\n            }\\n          }\\n        }\\n        // End loop over dy\\n\\n        setOutput(accumulator);\\n      }\\n    `}}exports.ResizeBilinearBackpropProgram=t;"},"sourceMaps":{"js":{"mappings":[{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":21,"column":42},"generated":{"line":1,"column":0}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":21,"column":42},"generated":{"line":1,"column":13}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":21,"column":42},"generated":{"line":1,"column":20}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":21,"column":42},"generated":{"line":1,"column":35}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":21,"column":42},"generated":{"line":1,"column":43}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":21,"column":42},"generated":{"line":1,"column":56}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":21,"column":42},"generated":{"line":1,"column":57}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":21,"column":42},"generated":{"line":1,"column":64}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":21,"column":42},"generated":{"line":1,"column":68}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":21,"column":42},"generated":{"line":1,"column":76}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":21,"column":42},"generated":{"line":1,"column":111}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":21,"column":6},"generated":{"line":1,"column":113}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":21,"column":13},"generated":{"line":1,"column":119}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":26,"column":2},"generated":{"line":1,"column":121}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":26,"column":14},"generated":{"line":1,"column":133}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":26,"column":28},"generated":{"line":1,"column":135}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":26,"column":41},"generated":{"line":1,"column":137}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":22,"column":2},"generated":{"line":1,"column":140}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":22,"column":2},"generated":{"line":1,"column":145}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":22,"column":18},"generated":{"line":1,"column":159}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":22,"column":19},"generated":{"line":1,"column":160}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":23,"column":2},"generated":{"line":1,"column":166}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":23,"column":2},"generated":{"line":1,"column":171}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":23,"column":26},"generated":{"line":1,"column":183}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":27,"column":9},"generated":{"line":1,"column":186}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":27,"column":9},"generated":{"line":1,"column":191}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":27,"column":23},"generated":{"line":1,"column":203}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":27,"column":25},"generated":{"line":1,"column":205}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":28,"column":10},"generated":{"line":1,"column":211}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":28,"column":13},"generated":{"line":1,"column":217}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":28,"column":13},"generated":{"line":1,"column":218}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":28,"column":22},"generated":{"line":1,"column":220}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":28,"column":34},"generated":{"line":1,"column":223}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":28,"column":36},"generated":{"line":1,"column":225}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":29,"column":13},"generated":{"line":1,"column":232}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":29,"column":13},"generated":{"line":1,"column":233}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":29,"column":22},"generated":{"line":1,"column":235}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":29,"column":32},"generated":{"line":1,"column":238}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":29,"column":35},"generated":{"line":1,"column":240}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":35,"column":10},"generated":{"line":1,"column":246}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":35,"column":45},"generated":{"line":1,"column":248}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":36,"column":7},"generated":{"line":1,"column":249}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":36,"column":23},"generated":{"line":1,"column":252}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":36,"column":33},"generated":{"line":1,"column":254}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":36,"column":38},"generated":{"line":1,"column":256}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":36,"column":48},"generated":{"line":1,"column":258}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":36,"column":52},"generated":{"line":1,"column":260}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":37,"column":7},"generated":{"line":1,"column":262}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":37,"column":23},"generated":{"line":1,"column":265}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":37,"column":32},"generated":{"line":1,"column":267}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":37,"column":37},"generated":{"line":1,"column":269}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":37,"column":46},"generated":{"line":1,"column":271}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":37,"column":50},"generated":{"line":1,"column":273}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":40,"column":10},"generated":{"line":1,"column":276}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":40,"column":45},"generated":{"line":1,"column":278}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":41,"column":7},"generated":{"line":1,"column":279}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":41,"column":23},"generated":{"line":1,"column":282}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":41,"column":33},"generated":{"line":1,"column":284}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":41,"column":38},"generated":{"line":1,"column":286}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":41,"column":48},"generated":{"line":1,"column":288}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":41,"column":52},"generated":{"line":1,"column":290}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":42,"column":7},"generated":{"line":1,"column":292}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":42,"column":23},"generated":{"line":1,"column":295}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":42,"column":32},"generated":{"line":1,"column":297}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":42,"column":37},"generated":{"line":1,"column":299}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":42,"column":46},"generated":{"line":1,"column":301}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":42,"column":50},"generated":{"line":1,"column":303}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":45,"column":10},"generated":{"line":1,"column":306}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":45,"column":24},"generated":{"line":1,"column":308}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":45,"column":39},"generated":{"line":1,"column":310}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":45,"column":44},"generated":{"line":1,"column":313}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":45,"column":59},"generated":{"line":1,"column":315}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":46,"column":10},"generated":{"line":1,"column":318}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":46,"column":23},"generated":{"line":1,"column":320}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":46,"column":38},"generated":{"line":1,"column":322}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":46,"column":43},"generated":{"line":1,"column":325}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":46,"column":58},"generated":{"line":1,"column":327}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":48,"column":10},"generated":{"line":1,"column":330}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":48,"column":27},"generated":{"line":1,"column":332}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":48,"column":31},"generated":{"line":1,"column":334}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":49,"column":10},"generated":{"line":1,"column":336}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":49,"column":26},"generated":{"line":1,"column":338}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":49,"column":30},"generated":{"line":1,"column":340}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":53,"column":10},"generated":{"line":1,"column":342}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":53,"column":51},"generated":{"line":1,"column":344}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":53,"column":23},"generated":{"line":1,"column":346}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":53,"column":28},"generated":{"line":1,"column":351}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":53,"column":33},"generated":{"line":1,"column":356}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":53,"column":56},"generated":{"line":1,"column":359}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":54,"column":10},"generated":{"line":1,"column":361}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":54,"column":49},"generated":{"line":1,"column":363}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":54,"column":22},"generated":{"line":1,"column":365}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":54,"column":27},"generated":{"line":1,"column":370}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":54,"column":32},"generated":{"line":1,"column":375}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":54,"column":54},"generated":{"line":1,"column":378}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":56,"column":9},"generated":{"line":1,"column":380}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":56,"column":9},"generated":{"line":1,"column":385}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":66,"column":42},"generated":{"line":1,"column":653}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":67,"column":41},"generated":{"line":1,"column":700}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":69,"column":45},"generated":{"line":1,"column":753}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":70,"column":44},"generated":{"line":1,"column":803}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":72,"column":36},"generated":{"line":1,"column":847}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":73,"column":35},"generated":{"line":1,"column":888}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":87,"column":34},"generated":{"line":1,"column":1447}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":95,"column":36},"generated":{"line":1,"column":1715}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":101,"column":54},"generated":{"line":1,"column":1917}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":101,"column":64},"generated":{"line":1,"column":1919}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":107,"column":53},"generated":{"line":1,"column":2188}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":107,"column":62},"generated":{"line":1,"column":2190}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":21,"column":42},"generated":{"line":1,"column":3167}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":21,"column":42},"generated":{"line":1,"column":3175}},{"source":"../src/resize_bilinear_backprop_gpu.ts","name":null,"original":{"line":21,"column":42},"generated":{"line":1,"column":3205}}],"sources":{"../src/resize_bilinear_backprop_gpu.ts":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor4D} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeBilinearBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(dy: Tensor4D, x: Tensor4D, alignCorners: boolean) {\n    this.outputShape = x.shape;\n    const [, xHeight, xWidth, ] = x.shape;\n    const [, yHeight, yWidth] = dy.shape;\n\n    // In the backwards pass, we want to find the pixels that were generated for\n    // each pixel in the input image the forward pass and add the corresponding\n    // coefficient from dy to the gradient (with some interpolation).\n\n    const effectiveXSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n      (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n    ];\n\n    const effectiveYSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n      (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n    ];\n\n    const heightScale = effectiveXSize[0] / effectiveYSize[0];\n    const widthScale = effectiveXSize[1] / effectiveYSize[1];\n\n    const invHeightScale = 1 / heightScale;\n    const invWidthScale = 1 / widthScale;\n\n    // This defines the size of the window of values around a particular\n    // index in dy that we want to search for contributions to dx.\n    const winHeight = (Math.ceil(invHeightScale) * 2) + 2;\n    const winWidth = (Math.ceil(invWidthScale) * 2) + 2;\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${heightScale});\n        const float widthScale = float(${widthScale});\n\n        const float invHeightScale = float(${invHeightScale});\n        const float invWidthScale = float(${invWidthScale});\n\n        const int winHeight = int(${winHeight});\n        const int winWidth = int(${winWidth});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${yHeight}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${yWidth}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${xHeight - 1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${xWidth - 1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `;\n  }\n}\n"},"lineCount":null}},"error":null,"hash":"392aec0c3f37d25eb6d6c43991b2d485","cacheData":{"env":{}}}