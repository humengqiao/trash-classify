{"id":"Ej1v","dependencies":[{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-backend-webgl/dist/lrn_packed_gpu.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-backend-webgl/src/lrn_packed_gpu.ts","includedInParent":true,"mtime":499162500000},{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/package.json","includedInParent":true,"mtime":1609563562293},{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-backend-webgl/package.json","includedInParent":true,"mtime":499162500000}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.LRNPackedProgram=void 0;class e{constructor(e,n,t,o,a){this.variableNames=[\"x\"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;const r=n,c=e[3]-1;let s;this.outputShape=e;const u=`float(${t}) + float(${o}) * sum`;s=.5===a?`inversesqrt(${u})`:1===a?`1.0/(${u})`:`exp(log(${u}) * float(-${a}));`,this.userCode=`\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords.x;\\n        int r = coords.y;\\n        int c = coords.z;\\n        int d = coords.w;\\n\\n        bool hasNextCol = d < ${this.outputShape[3]};\\n        bool hasNextRow = c < ${this.outputShape[2]};\\n\\n        vec4 sum = vec4(0.);\\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\\n\\n        vec4 xAtOutputCoords = vec4(\\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\\n          hasNextCol ?\\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\\n          hasNextRow ?\\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\\n          (hasNextRow && hasNextCol) ?\\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\\n        );\\n\\n        int firstChannel = d - ${r};\\n        vec2 cache = vec2(0.);\\n        if(firstChannel >= 0){\\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\\n            if(hasNextRow){\\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\\n            }\\n        }\\n\\n        ivec2 depth = ivec2(d, d + 1);\\n        for (int j = - ${r}; j <= ${r}; j++) {\\n          ivec2 idx = depth + j;\\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${c}));\\n\\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\\n\\n          if(depthInRange || depthPlusOneInRange){\\n            vec4 z = vec4(0.);\\n            vec4 xFragAtCurrentDepth;\\n            z.xz = cache.xy;\\n            if(depthPlusOneInRange && hasNextCol){\\n              xFragAtCurrentDepth = idx.y != d ?\\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\\n              if(hasNextRow){\\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\\n              }\\n            }\\n            cache.xy = z.yw;\\n            sum += z * z;\\n          }\\n        }\\n        vec4 result = xAtOutputCoords * ${s};\\n        setOutput(result);\\n      }\\n    `}}exports.LRNPackedProgram=e;"},"sourceMaps":{"js":{"mappings":[{"source":"../src/lrn_packed_gpu.ts","name":null,"original":{"line":20,"column":29},"generated":{"line":1,"column":0}},{"source":"../src/lrn_packed_gpu.ts","name":null,"original":{"line":20,"column":29},"generated":{"line":1,"column":13}},{"source":"../src/lrn_packed_gpu.ts","name":null,"original":{"line":20,"column":29},"generated":{"line":1,"column":20}},{"source":"../src/lrn_packed_gpu.ts","name":null,"original":{"line":20,"column":29},"generated":{"line":1,"column":35}},{"source":"../src/lrn_packed_gpu.ts","name":null,"original":{"line":20,"column":29},"generated":{"line":1,"column":43}},{"source":"../src/lrn_packed_gpu.ts","name":null,"original":{"line":20,"column":29},"generated":{"line":1,"column":56}},{"source":"../src/lrn_packed_gpu.ts","name":null,"original":{"line":20,"column":29},"generated":{"line":1,"column":57}},{"source":"../src/lrn_packed_gpu.ts","name":null,"original":{"line":20,"column":29},"generated":{"line":1,"column":64}},{"source":"../src/lrn_packed_gpu.ts","name":null,"original":{"line":20,"column":29},"generated":{"line":1,"column":68}},{"source":"../src/lrn_packed_gpu.ts","name":null,"original":{"line":20,"column":29},"generated":{"line":1,"column":76}},{"source":"../src/lrn_packed_gpu.ts","name":null,"original":{"line":20,"column":29},"generated":{"line":1,"column":98}},{"source":"../src/lrn_packed_gpu.ts","name":null,"original":{"line":20,"column":6},"generated":{"line":1,"column":100}},{"source":"../src/lrn_packed_gpu.ts","name":null,"original":{"line":20,"column":13},"generated":{"line":1,"column":106}},{"source":"../src/lrn_packed_gpu.ts","name":null,"original":{"line":27,"column":2},"generated":{"line":1,"column":108}},{"source":"../src/lrn_packed_gpu.ts","name":null,"original":{"line":28,"column":6},"generated":{"line":1,"column":120}},{"source":"../src/lrn_packed_gpu.ts","name":null,"original":{"line":28,"column":24},"generated":{"line":1,"column":122}},{"source":"../src/lrn_packed_gpu.ts","name":null,"original":{"line":28,"column":40},"generated":{"line":1,"column":124}},{"source":"../src/lrn_packed_gpu.ts","name":null,"original":{"line":28,"column":54},"generated":{"line":1,"column":126}},{"source":"../src/lrn_packed_gpu.ts","name":null,"original":{"line":29,"column":6},"generated":{"line":1,"column":128}},{"source":"../src/lrn_packed_gpu.ts","name":null,"original":{"line":21,"column":2},"generated":{"line":1,"column":131}},{"source":"../src/lrn_packed_gpu.ts","name":null,"original":{"line":21,"column":2},"generated":{"line":1,"column":136}},{"source":"../src/lrn_packed_gpu.ts","name":null,"original":{"line":21,"column":18},"generated":{"line":1,"column":150}},{"source":"../src/lrn_packed_gpu.ts","name":null,"original":{"line":21,"column":19},"generated":{"line":1,"column":151}},{"source":"../src/lrn_packed_gpu.ts","name":null,"original":{"line":22,"column":2},"generated":{"line":1,"column":156}},{"source":"../src/lrn_packed_gpu.ts","name":null,"original":{"line":22,"column":2},"generated":{"line":1,"column":161}},{"source":"../src/lrn_packed_gpu.ts","name":null,"original":{"line":22,"column":26},"generated":{"line":1,"column":173}},{"source":"../src/lrn_packed_gpu.ts","name":null,"original":{"line":24,"column":2},"generated":{"line":1,"column":176}},{"source":"../src/lrn_packed_gpu.ts","name":null,"original":{"line":24,"column":2},"generated":{"line":1,"column":181}},{"source":"../src/lrn_packed_gpu.ts","name":null,"original":{"line":24,"column":17},"generated":{"line":1,"column":195}},{"source":"../src/lrn_packed_gpu.ts","name":null,"original":{"line":25,"column":2},"generated":{"line":1,"column":197}},{"source":"../src/lrn_packed_gpu.ts","name":null,"original":{"line":25,"column":2},"generated":{"line":1,"column":202}},{"source":"../src/lrn_packed_gpu.ts","name":null,"original":{"line":25,"column":17},"generated":{"line":1,"column":216}},{"source":"../src/lrn_packed_gpu.ts","name":null,"original":{"line":30,"column":10},"generated":{"line":1,"column":218}},{"source":"../src/lrn_packed_gpu.ts","name":null,"original":{"line":30,"column":10},"generated":{"line":1,"column":224}},{"source":"../src/lrn_packed_gpu.ts","name":null,"original":{"line":30,"column":16},"generated":{"line":1,"column":226}},{"source":"../src/lrn_packed_gpu.ts","name":null,"original":{"line":31,"column":10},"generated":{"line":1,"column":228}},{"source":"../src/lrn_packed_gpu.ts","name":null,"original":{"line":31,"column":17},"generated":{"line":1,"column":230}},{"source":"../src/lrn_packed_gpu.ts","name":null,"original":{"line":31,"column":24},"generated":{"line":1,"column":232}},{"source":"../src/lrn_packed_gpu.ts","name":null,"original":{"line":31,"column":29},"generated":{"line":1,"column":235}},{"source":"../src/lrn_packed_gpu.ts","name":null,"original":{"line":38,"column":8},"generated":{"line":1,"column":237}},{"source":"../src/lrn_packed_gpu.ts","name":null,"original":{"line":38,"column":8},"generated":{"line":1,"column":241}},{"source":"../src/lrn_packed_gpu.ts","name":null,"original":{"line":32,"column":9},"generated":{"line":1,"column":243}},{"source":"../src/lrn_packed_gpu.ts","name":null,"original":{"line":32,"column":9},"generated":{"line":1,"column":248}},{"source":"../src/lrn_packed_gpu.ts","name":null,"original":{"line":32,"column":23},"generated":{"line":1,"column":260}},{"source":"../src/lrn_packed_gpu.ts","name":null,"original":{"line":39,"column":10},"generated":{"line":1,"column":262}},{"source":"../src/lrn_packed_gpu.ts","name":null,"original":{"line":39,"column":10},"generated":{"line":1,"column":268}},{"source":"../src/lrn_packed_gpu.ts","name":null,"original":{"line":39,"column":27},"generated":{"line":1,"column":279}},{"source":"../src/lrn_packed_gpu.ts","name":null,"original":{"line":39,"column":44},"generated":{"line":1,"column":293}},{"source":"../src/lrn_packed_gpu.ts","name":null,"original":{"line":41,"column":6},"generated":{"line":1,"column":304}},{"source":"../src/lrn_packed_gpu.ts","name":null,"original":{"line":40,"column":17},"generated":{"line":1,"column":306}},{"source":"../src/lrn_packed_gpu.ts","name":null,"original":{"line":40,"column":8},"generated":{"line":1,"column":311}},{"source":"../src/lrn_packed_gpu.ts","name":null,"original":{"line":41,"column":35},"generated":{"line":1,"column":328}},{"source":"../src/lrn_packed_gpu.ts","name":null,"original":{"line":42,"column":24},"generated":{"line":1,"column":333}},{"source":"../src/lrn_packed_gpu.ts","name":null,"original":{"line":42,"column":15},"generated":{"line":1,"column":337}},{"source":"../src/lrn_packed_gpu.ts","name":null,"original":{"line":43,"column":28},"generated":{"line":1,"column":347}},{"source":"../src/lrn_packed_gpu.ts","name":null,"original":{"line":45,"column":31},"generated":{"line":1,"column":363}},{"source":"../src/lrn_packed_gpu.ts","name":null,"original":{"line":45,"column":50},"generated":{"line":1,"column":378}},{"source":"../src/lrn_packed_gpu.ts","name":null,"original":{"line":48,"column":9},"generated":{"line":1,"column":385}},{"source":"../src/lrn_packed_gpu.ts","name":null,"original":{"line":48,"column":9},"generated":{"line":1,"column":390}},{"source":"../src/lrn_packed_gpu.ts","name":null,"original":{"line":56,"column":32},"generated":{"line":1,"column":608}},{"source":"../src/lrn_packed_gpu.ts","name":null,"original":{"line":56,"column":37},"generated":{"line":1,"column":613}},{"source":"../src/lrn_packed_gpu.ts","name":null,"original":{"line":56,"column":49},"generated":{"line":1,"column":625}},{"source":"../src/lrn_packed_gpu.ts","name":null,"original":{"line":57,"column":32},"generated":{"line":1,"column":663}},{"source":"../src/lrn_packed_gpu.ts","name":null,"original":{"line":57,"column":37},"generated":{"line":1,"column":668}},{"source":"../src/lrn_packed_gpu.ts","name":null,"original":{"line":57,"column":49},"generated":{"line":1,"column":680}},{"source":"../src/lrn_packed_gpu.ts","name":null,"original":{"line":72,"column":33},"generated":{"line":1,"column":1211}},{"source":"../src/lrn_packed_gpu.ts","name":null,"original":{"line":83,"column":25},"generated":{"line":1,"column":1622}},{"source":"../src/lrn_packed_gpu.ts","name":null,"original":{"line":83,"column":38},"generated":{"line":1,"column":1633}},{"source":"../src/lrn_packed_gpu.ts","name":null,"original":{"line":86,"column":61},"generated":{"line":1,"column":1808}},{"source":"../src/lrn_packed_gpu.ts","name":null,"original":{"line":107,"column":42},"generated":{"line":1,"column":2616}},{"source":"../src/lrn_packed_gpu.ts","name":null,"original":{"line":20,"column":29},"generated":{"line":1,"column":2665}},{"source":"../src/lrn_packed_gpu.ts","name":null,"original":{"line":20,"column":29},"generated":{"line":1,"column":2673}},{"source":"../src/lrn_packed_gpu.ts","name":null,"original":{"line":20,"column":29},"generated":{"line":1,"column":2690}}],"sources":{"../src/lrn_packed_gpu.ts":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class LRNPackedProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[] = [];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(\n      xShape: number[], radius: number, bias: number, alpha: number,\n      beta: number) {\n    const rad = radius;\n    const maxD = xShape[3] - 1;\n    this.outputShape = xShape;\n\n    // optimize pow(bias + alpha * sum, -beta)\n    // src: https://github.com/tensorflow/tensorflow/..\n    // blob/26033a1644a9c4a5fbe3170ab2e864b6a4ccd4ca/..\n    // tensorflow/core/kernels/mkl_lrn_op.cc#L320\n    let powOperator;\n    const basis = `float(${bias}) + float(${alpha}) * sum`;\n    if (beta === 0.5) {\n      powOperator = `inversesqrt(${basis})`;\n    } else if (beta === 1.0) {\n      powOperator = `1.0/(${basis})`;\n    } else {\n      powOperator = `exp(log(${basis}) * float(-${beta}));`;\n    }\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${rad};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${rad}; j <= ${rad}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${maxD}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${powOperator};\n        setOutput(result);\n      }\n    `;\n  }\n}\n"},"lineCount":null}},"error":null,"hash":"868694ac9a144526e085d7ea1288fb59","cacheData":{"env":{}}}