{"id":"UNBn","dependencies":[{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-backend-webgl/dist/lrn_gpu.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-backend-webgl/src/lrn_gpu.ts","includedInParent":true,"mtime":499162500000},{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/package.json","includedInParent":true,"mtime":1609563562293},{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-backend-webgl/package.json","includedInParent":true,"mtime":499162500000}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.LRNProgram=void 0;class t{constructor(t,o,n,s,e){this.variableNames=[\"x\"],this.outputShape=[];const r=o,i=t[3]-1;let a;this.outputShape=t;const d=`float(${n}) + float(${s}) * sum`;a=.5===e?`inversesqrt(${d})`:1===e?`1.0/(${d})`:`exp(log(${d}) * float(-${e}));`,this.userCode=`\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int r = coords[1];\\n        int c = coords[2];\\n        int d = coords[3];\\n        float x = getX(b, r, c, d);\\n        float sum = 0.0;\\n        for (int j = -${r}; j <= ${r}; j++) {\\n          int idx = d + j;\\n          if (idx >= 0 && idx <=  ${i}) {\\n            float z = getX(b, r, c, idx);\\n            sum += z * z;\\n          }\\n        }\\n        float val = x * ${a};\\n        setOutput(val);\\n      }\\n    `}}exports.LRNProgram=t;"},"sourceMaps":{"js":{"mappings":[{"source":"../src/lrn_gpu.ts","name":null,"original":{"line":20,"column":23},"generated":{"line":1,"column":0}},{"source":"../src/lrn_gpu.ts","name":null,"original":{"line":20,"column":23},"generated":{"line":1,"column":13}},{"source":"../src/lrn_gpu.ts","name":null,"original":{"line":20,"column":23},"generated":{"line":1,"column":20}},{"source":"../src/lrn_gpu.ts","name":null,"original":{"line":20,"column":23},"generated":{"line":1,"column":35}},{"source":"../src/lrn_gpu.ts","name":null,"original":{"line":20,"column":23},"generated":{"line":1,"column":43}},{"source":"../src/lrn_gpu.ts","name":null,"original":{"line":20,"column":23},"generated":{"line":1,"column":56}},{"source":"../src/lrn_gpu.ts","name":null,"original":{"line":20,"column":23},"generated":{"line":1,"column":57}},{"source":"../src/lrn_gpu.ts","name":null,"original":{"line":20,"column":23},"generated":{"line":1,"column":64}},{"source":"../src/lrn_gpu.ts","name":null,"original":{"line":20,"column":23},"generated":{"line":1,"column":68}},{"source":"../src/lrn_gpu.ts","name":null,"original":{"line":20,"column":23},"generated":{"line":1,"column":76}},{"source":"../src/lrn_gpu.ts","name":null,"original":{"line":20,"column":23},"generated":{"line":1,"column":92}},{"source":"../src/lrn_gpu.ts","name":null,"original":{"line":20,"column":6},"generated":{"line":1,"column":94}},{"source":"../src/lrn_gpu.ts","name":null,"original":{"line":20,"column":13},"generated":{"line":1,"column":100}},{"source":"../src/lrn_gpu.ts","name":null,"original":{"line":25,"column":2},"generated":{"line":1,"column":102}},{"source":"../src/lrn_gpu.ts","name":null,"original":{"line":26,"column":6},"generated":{"line":1,"column":114}},{"source":"../src/lrn_gpu.ts","name":null,"original":{"line":26,"column":24},"generated":{"line":1,"column":116}},{"source":"../src/lrn_gpu.ts","name":null,"original":{"line":26,"column":40},"generated":{"line":1,"column":118}},{"source":"../src/lrn_gpu.ts","name":null,"original":{"line":26,"column":54},"generated":{"line":1,"column":120}},{"source":"../src/lrn_gpu.ts","name":null,"original":{"line":27,"column":6},"generated":{"line":1,"column":122}},{"source":"../src/lrn_gpu.ts","name":null,"original":{"line":21,"column":2},"generated":{"line":1,"column":125}},{"source":"../src/lrn_gpu.ts","name":null,"original":{"line":21,"column":2},"generated":{"line":1,"column":130}},{"source":"../src/lrn_gpu.ts","name":null,"original":{"line":21,"column":18},"generated":{"line":1,"column":144}},{"source":"../src/lrn_gpu.ts","name":null,"original":{"line":21,"column":19},"generated":{"line":1,"column":145}},{"source":"../src/lrn_gpu.ts","name":null,"original":{"line":22,"column":2},"generated":{"line":1,"column":150}},{"source":"../src/lrn_gpu.ts","name":null,"original":{"line":22,"column":2},"generated":{"line":1,"column":155}},{"source":"../src/lrn_gpu.ts","name":null,"original":{"line":22,"column":26},"generated":{"line":1,"column":167}},{"source":"../src/lrn_gpu.ts","name":null,"original":{"line":28,"column":10},"generated":{"line":1,"column":170}},{"source":"../src/lrn_gpu.ts","name":null,"original":{"line":28,"column":10},"generated":{"line":1,"column":176}},{"source":"../src/lrn_gpu.ts","name":null,"original":{"line":28,"column":16},"generated":{"line":1,"column":178}},{"source":"../src/lrn_gpu.ts","name":null,"original":{"line":29,"column":10},"generated":{"line":1,"column":180}},{"source":"../src/lrn_gpu.ts","name":null,"original":{"line":29,"column":17},"generated":{"line":1,"column":182}},{"source":"../src/lrn_gpu.ts","name":null,"original":{"line":29,"column":24},"generated":{"line":1,"column":184}},{"source":"../src/lrn_gpu.ts","name":null,"original":{"line":29,"column":29},"generated":{"line":1,"column":187}},{"source":"../src/lrn_gpu.ts","name":null,"original":{"line":36,"column":8},"generated":{"line":1,"column":189}},{"source":"../src/lrn_gpu.ts","name":null,"original":{"line":36,"column":8},"generated":{"line":1,"column":193}},{"source":"../src/lrn_gpu.ts","name":null,"original":{"line":30,"column":9},"generated":{"line":1,"column":195}},{"source":"../src/lrn_gpu.ts","name":null,"original":{"line":30,"column":9},"generated":{"line":1,"column":200}},{"source":"../src/lrn_gpu.ts","name":null,"original":{"line":30,"column":23},"generated":{"line":1,"column":212}},{"source":"../src/lrn_gpu.ts","name":null,"original":{"line":37,"column":10},"generated":{"line":1,"column":214}},{"source":"../src/lrn_gpu.ts","name":null,"original":{"line":37,"column":10},"generated":{"line":1,"column":220}},{"source":"../src/lrn_gpu.ts","name":null,"original":{"line":37,"column":27},"generated":{"line":1,"column":231}},{"source":"../src/lrn_gpu.ts","name":null,"original":{"line":37,"column":44},"generated":{"line":1,"column":245}},{"source":"../src/lrn_gpu.ts","name":null,"original":{"line":39,"column":6},"generated":{"line":1,"column":256}},{"source":"../src/lrn_gpu.ts","name":null,"original":{"line":38,"column":17},"generated":{"line":1,"column":258}},{"source":"../src/lrn_gpu.ts","name":null,"original":{"line":38,"column":8},"generated":{"line":1,"column":263}},{"source":"../src/lrn_gpu.ts","name":null,"original":{"line":39,"column":35},"generated":{"line":1,"column":280}},{"source":"../src/lrn_gpu.ts","name":null,"original":{"line":40,"column":24},"generated":{"line":1,"column":285}},{"source":"../src/lrn_gpu.ts","name":null,"original":{"line":40,"column":15},"generated":{"line":1,"column":289}},{"source":"../src/lrn_gpu.ts","name":null,"original":{"line":41,"column":28},"generated":{"line":1,"column":299}},{"source":"../src/lrn_gpu.ts","name":null,"original":{"line":43,"column":31},"generated":{"line":1,"column":315}},{"source":"../src/lrn_gpu.ts","name":null,"original":{"line":43,"column":50},"generated":{"line":1,"column":330}},{"source":"../src/lrn_gpu.ts","name":null,"original":{"line":46,"column":9},"generated":{"line":1,"column":337}},{"source":"../src/lrn_gpu.ts","name":null,"original":{"line":46,"column":9},"generated":{"line":1,"column":342}},{"source":"../src/lrn_gpu.ts","name":null,"original":{"line":55,"column":24},"generated":{"line":1,"column":617}},{"source":"../src/lrn_gpu.ts","name":null,"original":{"line":55,"column":37},"generated":{"line":1,"column":628}},{"source":"../src/lrn_gpu.ts","name":null,"original":{"line":57,"column":36},"generated":{"line":1,"column":704}},{"source":"../src/lrn_gpu.ts","name":null,"original":{"line":62,"column":26},"generated":{"line":1,"column":831}},{"source":"../src/lrn_gpu.ts","name":null,"original":{"line":20,"column":23},"generated":{"line":1,"column":877}},{"source":"../src/lrn_gpu.ts","name":null,"original":{"line":20,"column":23},"generated":{"line":1,"column":885}},{"source":"../src/lrn_gpu.ts","name":null,"original":{"line":20,"column":23},"generated":{"line":1,"column":896}}],"sources":{"../src/lrn_gpu.ts":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class LRNProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      xShape: number[], radius: number, bias: number, alpha: number,\n      beta: number) {\n    const rad = radius;\n    const maxD = xShape[3] - 1;\n    this.outputShape = xShape;\n\n    // optimize pow(bias + alpha * sum, -beta)\n    // src: https://github.com/tensorflow/tensorflow/..\n    // blob/26033a1644a9c4a5fbe3170ab2e864b6a4ccd4ca/..\n    // tensorflow/core/kernels/mkl_lrn_op.cc#L320\n    let powOperator;\n    const basis = `float(${bias}) + float(${alpha}) * sum`;\n    if (beta === 0.5) {\n      powOperator = `inversesqrt(${basis})`;\n    } else if (beta === 1.0) {\n      powOperator = `1.0/(${basis})`;\n    } else {\n      powOperator = `exp(log(${basis}) * float(-${beta}));`;\n    }\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${rad}; j <= ${rad}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${maxD}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${powOperator};\n        setOutput(val);\n      }\n    `;\n  }\n}\n"},"lineCount":null}},"error":null,"hash":"daf43c402e86959843f1b9ae7d18ee37","cacheData":{"env":{}}}