{"id":"Ceu1","dependencies":[{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-layers/dist/exports_layers.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-layers/src/exports_layers.ts","includedInParent":true,"mtime":499162500000},{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/package.json","includedInParent":true,"mtime":1609563562293},{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-layers/package.json","includedInParent":true,"mtime":499162500000},{"name":"./engine/input_layer","loc":{"line":10,"column":27},"parent":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-layers/dist/exports_layers.js","resolved":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-layers/dist/engine/input_layer.js"},{"name":"./engine/topology","loc":{"line":11,"column":22},"parent":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-layers/dist/exports_layers.js","resolved":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js"},{"name":"./exports","loc":{"line":12,"column":22},"parent":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-layers/dist/exports_layers.js","resolved":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-layers/dist/exports.js"},{"name":"./layers/advanced_activations","loc":{"line":13,"column":70},"parent":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-layers/dist/exports_layers.js","resolved":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-layers/dist/layers/advanced_activations.js"},{"name":"./layers/convolutional","loc":{"line":14,"column":99},"parent":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-layers/dist/exports_layers.js","resolved":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js"},{"name":"./layers/convolutional_depthwise","loc":{"line":15,"column":32},"parent":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-layers/dist/exports_layers.js","resolved":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional_depthwise.js"},{"name":"./layers/convolutional_recurrent","loc":{"line":16,"column":43},"parent":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-layers/dist/exports_layers.js","resolved":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional_recurrent.js"},{"name":"./layers/core","loc":{"line":17,"column":111},"parent":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-layers/dist/exports_layers.js","resolved":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-layers/dist/layers/core.js"},{"name":"./layers/embeddings","loc":{"line":18,"column":26},"parent":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-layers/dist/exports_layers.js","resolved":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-layers/dist/layers/embeddings.js"},{"name":"./layers/merge","loc":{"line":19,"column":75},"parent":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-layers/dist/exports_layers.js","resolved":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-layers/dist/layers/merge.js"},{"name":"./layers/noise","loc":{"line":20,"column":61},"parent":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-layers/dist/exports_layers.js","resolved":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-layers/dist/layers/noise.js"},{"name":"./layers/normalization","loc":{"line":21,"column":55},"parent":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-layers/dist/exports_layers.js","resolved":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js"},{"name":"./layers/padding","loc":{"line":22,"column":30},"parent":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-layers/dist/exports_layers.js","resolved":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-layers/dist/layers/padding.js"},{"name":"./layers/pooling","loc":{"line":23,"column":199},"parent":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-layers/dist/exports_layers.js","resolved":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-layers/dist/layers/pooling.js"},{"name":"./layers/recurrent","loc":{"line":24,"column":102},"parent":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-layers/dist/exports_layers.js","resolved":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js"},{"name":"./layers/wrappers","loc":{"line":25,"column":47},"parent":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-layers/dist/exports_layers.js","resolved":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-layers/dist/layers/wrappers.js"}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.inputLayer=w,exports.elu=m,exports.reLU=v,exports.leakyReLU=P,exports.prelu=D,exports.softmax=b,exports.thresholdedReLU=y,exports.conv1d=N,exports.conv2d=C,exports.conv2dTranspose=R,exports.conv3d=L,exports.separableConv2d=M,exports.cropping2D=q,exports.upSampling2d=h,exports.depthwiseConv2d=S,exports.activation=A,exports.dense=U,exports.dropout=G,exports.spatialDropout1d=T,exports.flatten=k,exports.repeatVector=z,exports.reshape=_,exports.permute=j,exports.embedding=O,exports.add=B,exports.average=E,exports.concatenate=V,exports.maximum=F,exports.minimum=I,exports.multiply=Z,exports.dot=H,exports.batchNormalization=J,exports.layerNormalization=K,exports.zeroPadding2d=Q,exports.averagePooling1d=W,exports.avgPool1d=X,exports.avgPooling1d=Y,exports.averagePooling2d=$,exports.avgPool2d=ee,exports.avgPooling2d=ne,exports.averagePooling3d=re,exports.avgPool3d=oe,exports.avgPooling3d=te,exports.globalAveragePooling1d=ue,exports.globalAveragePooling2d=ie,exports.globalMaxPooling1d=ae,exports.globalMaxPooling2d=le,exports.maxPooling1d=se,exports.maxPooling2d=pe,exports.maxPooling3d=ce,exports.gru=xe,exports.gruCell=fe,exports.lstm=de,exports.lstmCell=ge,exports.simpleRNN=we,exports.simpleRNNCell=me,exports.convLstm2d=ve,exports.convLstm2dCell=Pe,exports.rnn=De,exports.stackedRNNCells=be,exports.bidirectional=ye,exports.timeDistributed=Ne,exports.gaussianNoise=qe,exports.gaussianDropout=he,exports.alphaDropout=Se,exports.masking=Ae,Object.defineProperty(exports,\"Layer\",{enumerable:!0,get:function(){return n.Layer}}),Object.defineProperty(exports,\"input\",{enumerable:!0,get:function(){return r.input}}),Object.defineProperty(exports,\"RNN\",{enumerable:!0,get:function(){return d.RNN}}),Object.defineProperty(exports,\"RNNCell\",{enumerable:!0,get:function(){return d.RNNCell}}),exports.maxPool2d=exports.maxPool1d=exports.globalMaxPool2d=exports.globalMaxPool1d=void 0;var e=require(\"./engine/input_layer\"),n=require(\"./engine/topology\"),r=require(\"./exports\"),o=require(\"./layers/advanced_activations\"),t=require(\"./layers/convolutional\"),u=require(\"./layers/convolutional_depthwise\"),i=require(\"./layers/convolutional_recurrent\"),a=require(\"./layers/core\"),l=require(\"./layers/embeddings\"),s=require(\"./layers/merge\"),p=require(\"./layers/noise\"),c=require(\"./layers/normalization\"),x=require(\"./layers/padding\"),f=require(\"./layers/pooling\"),d=require(\"./layers/recurrent\"),g=require(\"./layers/wrappers\");function w(n){return new e.InputLayer(n)}function m(e){return new o.ELU(e)}function v(e){return new o.ReLU(e)}function P(e){return new o.LeakyReLU(e)}function D(e){return new o.PReLU(e)}function b(e){return new o.Softmax(e)}function y(e){return new o.ThresholdedReLU(e)}function N(e){return new t.Conv1D(e)}function C(e){return new t.Conv2D(e)}function R(e){return new t.Conv2DTranspose(e)}function L(e){return new t.Conv3D(e)}function M(e){return new t.SeparableConv2D(e)}function q(e){return new t.Cropping2D(e)}function h(e){return new t.UpSampling2D(e)}function S(e){return new u.DepthwiseConv2D(e)}function A(e){return new a.Activation(e)}function U(e){return new a.Dense(e)}function G(e){return new a.Dropout(e)}function T(e){return new a.SpatialDropout1D(e)}function k(e){return new a.Flatten(e)}function z(e){return new a.RepeatVector(e)}function _(e){return new a.Reshape(e)}function j(e){return new a.Permute(e)}function O(e){return new l.Embedding(e)}function B(e){return new s.Add(e)}function E(e){return new s.Average(e)}function V(e){return new s.Concatenate(e)}function F(e){return new s.Maximum(e)}function I(e){return new s.Minimum(e)}function Z(e){return new s.Multiply(e)}function H(e){return new s.Dot(e)}function J(e){return new c.BatchNormalization(e)}function K(e){return new c.LayerNormalization(e)}function Q(e){return new x.ZeroPadding2D(e)}function W(e){return new f.AveragePooling1D(e)}function X(e){return W(e)}function Y(e){return W(e)}function $(e){return new f.AveragePooling2D(e)}function ee(e){return $(e)}function ne(e){return $(e)}function re(e){return new f.AveragePooling3D(e)}function oe(e){return re(e)}function te(e){return re(e)}function ue(e){return new f.GlobalAveragePooling1D(e)}function ie(e){return new f.GlobalAveragePooling2D(e)}function ae(e){return new f.GlobalMaxPooling1D(e)}function le(e){return new f.GlobalMaxPooling2D(e)}function se(e){return new f.MaxPooling1D(e)}function pe(e){return new f.MaxPooling2D(e)}function ce(e){return new f.MaxPooling3D(e)}function xe(e){return new d.GRU(e)}function fe(e){return new d.GRUCell(e)}function de(e){return new d.LSTM(e)}function ge(e){return new d.LSTMCell(e)}function we(e){return new d.SimpleRNN(e)}function me(e){return new d.SimpleRNNCell(e)}function ve(e){return new i.ConvLSTM2D(e)}function Pe(e){return new i.ConvLSTM2DCell(e)}function De(e){return new d.RNN(e)}function be(e){return new d.StackedRNNCells(e)}function ye(e){return new g.Bidirectional(e)}function Ne(e){return new g.TimeDistributed(e)}const Ce=ae;exports.globalMaxPool1d=Ce;const Re=le;exports.globalMaxPool2d=Re;const Le=se;exports.maxPool1d=Le;const Me=pe;function qe(e){return new p.GaussianNoise(e)}function he(e){return new p.GaussianDropout(e)}function Se(e){return new p.AlphaDropout(e)}function Ae(e){return new a.Masking(e)}exports.maxPool2d=Me;"},"sourceMaps":{"js":{"mappings":[{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":0}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":13}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":20}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":35}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":43}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":56}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":57}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":64}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":68}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":76}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":87}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":89}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":97}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":101}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":103}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":111}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":116}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":118}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":126}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":136}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":138}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":146}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":152}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":154}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":162}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":170}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":172}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":180}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":196}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":198}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":206}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":213}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":215}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":223}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":230}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":232}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":240}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":256}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":258}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":266}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":273}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":275}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":283}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":299}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":301}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":309}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":320}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":322}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":330}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":343}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":345}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":353}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":369}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":371}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":379}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":390}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":392}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":400}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":406}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":408}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":416}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":424}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":426}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":434}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":451}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":453}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":461}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":469}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":471}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":479}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":492}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":494}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":502}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":510}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":512}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":520}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":528}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":530}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":538}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":548}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":550}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":558}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":562}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":564}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":572}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":580}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":582}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":590}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":602}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":604}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":612}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":620}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":622}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":630}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":638}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":640}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":648}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":657}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":659}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":667}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":671}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":673}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":681}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":700}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":702}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":710}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":729}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":731}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":739}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":753}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":755}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":763}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":780}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":782}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":790}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":800}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":802}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":810}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":823}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":825}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":833}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":850}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":852}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":860}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":870}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":873}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":881}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":894}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":897}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":905}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":922}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":925}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":933}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":943}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":946}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":954}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":967}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":970}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":978}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1001}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1004}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1012}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1035}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1038}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1046}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1065}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1068}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1076}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1095}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1098}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1106}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1119}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1122}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1130}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1143}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1146}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1154}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1167}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1170}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1178}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1182}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1185}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1193}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1201}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1204}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1212}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1217}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1220}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1228}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1237}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1240}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1248}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1258}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1261}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1269}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1283}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1286}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1294}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1305}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1308}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1316}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1331}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1334}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1342}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1346}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1349}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1357}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1373}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1376}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1384}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1398}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1401}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1409}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1425}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1428}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1436}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1450}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1453}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1461}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1477}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1480}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1488}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1501}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1504}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1512}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1520}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1523}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1530}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1545}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1553}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1561}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1562}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1574}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1576}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1580}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1591}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1598}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1600}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1609}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1616}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1631}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1639}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1647}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1648}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1660}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1662}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1666}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1677}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1684}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1686}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1695}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1702}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1717}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1725}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1731}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1732}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1744}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1746}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1750}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1761}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1768}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1770}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1777}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1784}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1799}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1807}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1817}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1818}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1830}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1832}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1836}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1847}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1854}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1856}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1867}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1875}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1885}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1893}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1903}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1911}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1927}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1935}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":1956}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":11,"column":0},"generated":{"line":1,"column":1958}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":11,"column":0},"generated":{"line":1,"column":1962}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":11,"column":0},"generated":{"line":1,"column":1964}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":11,"column":0},"generated":{"line":1,"column":1972}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":12,"column":0},"generated":{"line":1,"column":1996}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":12,"column":0},"generated":{"line":1,"column":1998}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":12,"column":0},"generated":{"line":1,"column":2006}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":13,"column":0},"generated":{"line":1,"column":2027}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":13,"column":0},"generated":{"line":1,"column":2029}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":13,"column":0},"generated":{"line":1,"column":2037}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":14,"column":0},"generated":{"line":1,"column":2050}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":14,"column":0},"generated":{"line":1,"column":2052}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":14,"column":0},"generated":{"line":1,"column":2060}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":15,"column":0},"generated":{"line":1,"column":2093}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":15,"column":0},"generated":{"line":1,"column":2095}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":15,"column":0},"generated":{"line":1,"column":2103}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":16,"column":0},"generated":{"line":1,"column":2129}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":16,"column":0},"generated":{"line":1,"column":2131}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":16,"column":0},"generated":{"line":1,"column":2139}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":17,"column":0},"generated":{"line":1,"column":2175}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":17,"column":0},"generated":{"line":1,"column":2177}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":17,"column":0},"generated":{"line":1,"column":2185}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":18,"column":0},"generated":{"line":1,"column":2221}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":18,"column":0},"generated":{"line":1,"column":2223}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":18,"column":0},"generated":{"line":1,"column":2231}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":19,"column":0},"generated":{"line":1,"column":2248}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":19,"column":0},"generated":{"line":1,"column":2250}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":19,"column":0},"generated":{"line":1,"column":2258}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":20,"column":0},"generated":{"line":1,"column":2281}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":20,"column":0},"generated":{"line":1,"column":2283}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":20,"column":0},"generated":{"line":1,"column":2291}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":1,"column":2309}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":1,"column":2311}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":1,"column":2319}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":22,"column":0},"generated":{"line":1,"column":2337}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":22,"column":0},"generated":{"line":1,"column":2339}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":22,"column":0},"generated":{"line":1,"column":2347}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":23,"column":0},"generated":{"line":1,"column":2373}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":23,"column":0},"generated":{"line":1,"column":2375}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":23,"column":0},"generated":{"line":1,"column":2383}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":24,"column":0},"generated":{"line":1,"column":2403}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":24,"column":0},"generated":{"line":1,"column":2405}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":24,"column":0},"generated":{"line":1,"column":2413}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":25,"column":0},"generated":{"line":1,"column":2433}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":25,"column":0},"generated":{"line":1,"column":2435}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":25,"column":0},"generated":{"line":1,"column":2443}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":26,"column":0},"generated":{"line":1,"column":2465}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":26,"column":0},"generated":{"line":1,"column":2467}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":26,"column":0},"generated":{"line":1,"column":2475}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":67,"column":6},"generated":{"line":1,"column":2496}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":67,"column":16},"generated":{"line":1,"column":2505}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":67,"column":27},"generated":{"line":1,"column":2507}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":68,"column":9},"generated":{"line":1,"column":2510}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":68,"column":9},"generated":{"line":1,"column":2517}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":68,"column":13},"generated":{"line":1,"column":2521}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":68,"column":9},"generated":{"line":1,"column":2523}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":68,"column":24},"generated":{"line":1,"column":2534}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":97,"column":6},"generated":{"line":1,"column":2537}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":97,"column":16},"generated":{"line":1,"column":2546}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":97,"column":20},"generated":{"line":1,"column":2548}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":98,"column":9},"generated":{"line":1,"column":2551}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":98,"column":9},"generated":{"line":1,"column":2558}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":98,"column":13},"generated":{"line":1,"column":2562}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":98,"column":9},"generated":{"line":1,"column":2564}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":98,"column":17},"generated":{"line":1,"column":2568}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":118,"column":6},"generated":{"line":1,"column":2571}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":118,"column":16},"generated":{"line":1,"column":2580}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":118,"column":21},"generated":{"line":1,"column":2582}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":119,"column":9},"generated":{"line":1,"column":2585}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":119,"column":9},"generated":{"line":1,"column":2592}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":119,"column":13},"generated":{"line":1,"column":2596}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":119,"column":9},"generated":{"line":1,"column":2598}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":119,"column":18},"generated":{"line":1,"column":2603}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":142,"column":6},"generated":{"line":1,"column":2606}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":142,"column":16},"generated":{"line":1,"column":2615}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":142,"column":26},"generated":{"line":1,"column":2617}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":143,"column":9},"generated":{"line":1,"column":2620}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":143,"column":9},"generated":{"line":1,"column":2627}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":143,"column":13},"generated":{"line":1,"column":2631}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":143,"column":9},"generated":{"line":1,"column":2633}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":143,"column":23},"generated":{"line":1,"column":2643}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":167,"column":6},"generated":{"line":1,"column":2646}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":167,"column":16},"generated":{"line":1,"column":2655}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":167,"column":22},"generated":{"line":1,"column":2657}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":168,"column":9},"generated":{"line":1,"column":2660}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":168,"column":9},"generated":{"line":1,"column":2667}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":168,"column":13},"generated":{"line":1,"column":2671}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":168,"column":9},"generated":{"line":1,"column":2673}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":168,"column":19},"generated":{"line":1,"column":2679}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":187,"column":6},"generated":{"line":1,"column":2682}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":187,"column":16},"generated":{"line":1,"column":2691}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":187,"column":24},"generated":{"line":1,"column":2693}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":188,"column":9},"generated":{"line":1,"column":2696}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":188,"column":9},"generated":{"line":1,"column":2703}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":188,"column":13},"generated":{"line":1,"column":2707}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":188,"column":9},"generated":{"line":1,"column":2709}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":188,"column":21},"generated":{"line":1,"column":2717}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":215,"column":6},"generated":{"line":1,"column":2720}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":215,"column":16},"generated":{"line":1,"column":2729}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":215,"column":32},"generated":{"line":1,"column":2731}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":216,"column":9},"generated":{"line":1,"column":2734}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":216,"column":9},"generated":{"line":1,"column":2741}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":216,"column":13},"generated":{"line":1,"column":2745}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":216,"column":9},"generated":{"line":1,"column":2747}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":216,"column":29},"generated":{"line":1,"column":2763}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":241,"column":6},"generated":{"line":1,"column":2766}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":241,"column":16},"generated":{"line":1,"column":2775}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":241,"column":23},"generated":{"line":1,"column":2777}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":242,"column":9},"generated":{"line":1,"column":2780}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":242,"column":9},"generated":{"line":1,"column":2787}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":242,"column":13},"generated":{"line":1,"column":2791}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":242,"column":9},"generated":{"line":1,"column":2793}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":242,"column":20},"generated":{"line":1,"column":2800}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":263,"column":6},"generated":{"line":1,"column":2803}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":263,"column":16},"generated":{"line":1,"column":2812}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":263,"column":23},"generated":{"line":1,"column":2814}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":264,"column":9},"generated":{"line":1,"column":2817}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":264,"column":9},"generated":{"line":1,"column":2824}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":264,"column":13},"generated":{"line":1,"column":2828}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":264,"column":9},"generated":{"line":1,"column":2830}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":264,"column":20},"generated":{"line":1,"column":2837}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":302,"column":6},"generated":{"line":1,"column":2840}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":302,"column":16},"generated":{"line":1,"column":2849}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":302,"column":32},"generated":{"line":1,"column":2851}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":303,"column":9},"generated":{"line":1,"column":2854}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":303,"column":9},"generated":{"line":1,"column":2861}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":303,"column":13},"generated":{"line":1,"column":2865}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":303,"column":9},"generated":{"line":1,"column":2867}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":303,"column":29},"generated":{"line":1,"column":2883}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":324,"column":6},"generated":{"line":1,"column":2886}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":324,"column":16},"generated":{"line":1,"column":2895}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":324,"column":23},"generated":{"line":1,"column":2897}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":325,"column":9},"generated":{"line":1,"column":2900}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":325,"column":9},"generated":{"line":1,"column":2907}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":325,"column":13},"generated":{"line":1,"column":2911}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":325,"column":9},"generated":{"line":1,"column":2913}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":325,"column":20},"generated":{"line":1,"column":2920}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":357,"column":6},"generated":{"line":1,"column":2923}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":357,"column":16},"generated":{"line":1,"column":2932}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":357,"column":32},"generated":{"line":1,"column":2934}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":358,"column":9},"generated":{"line":1,"column":2937}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":358,"column":9},"generated":{"line":1,"column":2944}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":358,"column":13},"generated":{"line":1,"column":2948}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":358,"column":9},"generated":{"line":1,"column":2950}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":358,"column":29},"generated":{"line":1,"column":2966}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":392,"column":6},"generated":{"line":1,"column":2969}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":392,"column":16},"generated":{"line":1,"column":2978}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":392,"column":27},"generated":{"line":1,"column":2980}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":393,"column":9},"generated":{"line":1,"column":2983}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":393,"column":9},"generated":{"line":1,"column":2990}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":393,"column":13},"generated":{"line":1,"column":2994}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":393,"column":9},"generated":{"line":1,"column":2996}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":393,"column":24},"generated":{"line":1,"column":3007}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":420,"column":6},"generated":{"line":1,"column":3010}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":420,"column":16},"generated":{"line":1,"column":3019}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":420,"column":29},"generated":{"line":1,"column":3021}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":421,"column":9},"generated":{"line":1,"column":3024}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":421,"column":9},"generated":{"line":1,"column":3031}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":421,"column":13},"generated":{"line":1,"column":3035}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":421,"column":9},"generated":{"line":1,"column":3037}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":421,"column":26},"generated":{"line":1,"column":3050}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":436,"column":6},"generated":{"line":1,"column":3053}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":436,"column":16},"generated":{"line":1,"column":3062}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":436,"column":32},"generated":{"line":1,"column":3064}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":437,"column":9},"generated":{"line":1,"column":3067}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":437,"column":9},"generated":{"line":1,"column":3074}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":437,"column":13},"generated":{"line":1,"column":3078}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":437,"column":9},"generated":{"line":1,"column":3080}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":437,"column":29},"generated":{"line":1,"column":3096}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":473,"column":6},"generated":{"line":1,"column":3099}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":473,"column":16},"generated":{"line":1,"column":3108}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":473,"column":27},"generated":{"line":1,"column":3110}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":474,"column":9},"generated":{"line":1,"column":3113}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":474,"column":9},"generated":{"line":1,"column":3120}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":474,"column":13},"generated":{"line":1,"column":3124}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":474,"column":9},"generated":{"line":1,"column":3126}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":474,"column":24},"generated":{"line":1,"column":3137}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":510,"column":6},"generated":{"line":1,"column":3140}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":510,"column":16},"generated":{"line":1,"column":3149}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":510,"column":22},"generated":{"line":1,"column":3151}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":511,"column":9},"generated":{"line":1,"column":3154}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":511,"column":9},"generated":{"line":1,"column":3161}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":511,"column":13},"generated":{"line":1,"column":3165}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":511,"column":9},"generated":{"line":1,"column":3167}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":511,"column":19},"generated":{"line":1,"column":3173}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":524,"column":6},"generated":{"line":1,"column":3176}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":524,"column":16},"generated":{"line":1,"column":3185}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":524,"column":24},"generated":{"line":1,"column":3187}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":525,"column":9},"generated":{"line":1,"column":3190}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":525,"column":9},"generated":{"line":1,"column":3197}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":525,"column":13},"generated":{"line":1,"column":3201}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":525,"column":9},"generated":{"line":1,"column":3203}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":525,"column":21},"generated":{"line":1,"column":3211}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":560,"column":6},"generated":{"line":1,"column":3214}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":560,"column":16},"generated":{"line":1,"column":3223}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":560,"column":33},"generated":{"line":1,"column":3225}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":561,"column":9},"generated":{"line":1,"column":3228}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":561,"column":9},"generated":{"line":1,"column":3235}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":561,"column":13},"generated":{"line":1,"column":3239}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":561,"column":9},"generated":{"line":1,"column":3241}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":561,"column":30},"generated":{"line":1,"column":3258}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":583,"column":6},"generated":{"line":1,"column":3261}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":583,"column":16},"generated":{"line":1,"column":3270}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":583,"column":24},"generated":{"line":1,"column":3272}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":584,"column":9},"generated":{"line":1,"column":3275}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":584,"column":9},"generated":{"line":1,"column":3282}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":584,"column":13},"generated":{"line":1,"column":3286}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":584,"column":9},"generated":{"line":1,"column":3288}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":584,"column":21},"generated":{"line":1,"column":3296}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":601,"column":6},"generated":{"line":1,"column":3299}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":601,"column":16},"generated":{"line":1,"column":3308}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":601,"column":29},"generated":{"line":1,"column":3310}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":602,"column":9},"generated":{"line":1,"column":3313}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":602,"column":9},"generated":{"line":1,"column":3320}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":602,"column":13},"generated":{"line":1,"column":3324}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":602,"column":9},"generated":{"line":1,"column":3326}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":602,"column":26},"generated":{"line":1,"column":3339}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":628,"column":6},"generated":{"line":1,"column":3342}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":628,"column":16},"generated":{"line":1,"column":3351}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":628,"column":24},"generated":{"line":1,"column":3353}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":629,"column":9},"generated":{"line":1,"column":3356}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":629,"column":9},"generated":{"line":1,"column":3363}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":629,"column":13},"generated":{"line":1,"column":3367}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":629,"column":9},"generated":{"line":1,"column":3369}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":629,"column":21},"generated":{"line":1,"column":3377}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":660,"column":6},"generated":{"line":1,"column":3380}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":660,"column":16},"generated":{"line":1,"column":3389}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":660,"column":24},"generated":{"line":1,"column":3391}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":661,"column":9},"generated":{"line":1,"column":3394}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":661,"column":9},"generated":{"line":1,"column":3401}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":661,"column":13},"generated":{"line":1,"column":3405}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":661,"column":9},"generated":{"line":1,"column":3407}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":661,"column":21},"generated":{"line":1,"column":3415}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":675,"column":6},"generated":{"line":1,"column":3418}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":675,"column":16},"generated":{"line":1,"column":3427}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":675,"column":26},"generated":{"line":1,"column":3429}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":676,"column":9},"generated":{"line":1,"column":3432}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":676,"column":9},"generated":{"line":1,"column":3439}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":676,"column":13},"generated":{"line":1,"column":3443}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":676,"column":9},"generated":{"line":1,"column":3445}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":676,"column":23},"generated":{"line":1,"column":3455}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":701,"column":6},"generated":{"line":1,"column":3458}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":701,"column":16},"generated":{"line":1,"column":3467}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":701,"column":20},"generated":{"line":1,"column":3469}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":702,"column":9},"generated":{"line":1,"column":3472}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":702,"column":9},"generated":{"line":1,"column":3479}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":702,"column":13},"generated":{"line":1,"column":3483}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":702,"column":9},"generated":{"line":1,"column":3485}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":702,"column":17},"generated":{"line":1,"column":3489}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":723,"column":6},"generated":{"line":1,"column":3492}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":723,"column":16},"generated":{"line":1,"column":3501}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":723,"column":24},"generated":{"line":1,"column":3503}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":724,"column":9},"generated":{"line":1,"column":3506}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":724,"column":9},"generated":{"line":1,"column":3513}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":724,"column":13},"generated":{"line":1,"column":3517}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":724,"column":9},"generated":{"line":1,"column":3519}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":724,"column":21},"generated":{"line":1,"column":3527}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":747,"column":6},"generated":{"line":1,"column":3530}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":747,"column":16},"generated":{"line":1,"column":3539}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":747,"column":28},"generated":{"line":1,"column":3541}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":748,"column":9},"generated":{"line":1,"column":3544}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":748,"column":9},"generated":{"line":1,"column":3551}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":748,"column":13},"generated":{"line":1,"column":3555}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":748,"column":9},"generated":{"line":1,"column":3557}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":748,"column":25},"generated":{"line":1,"column":3569}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":769,"column":6},"generated":{"line":1,"column":3572}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":769,"column":16},"generated":{"line":1,"column":3581}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":769,"column":24},"generated":{"line":1,"column":3583}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":770,"column":9},"generated":{"line":1,"column":3586}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":770,"column":9},"generated":{"line":1,"column":3593}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":770,"column":13},"generated":{"line":1,"column":3597}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":770,"column":9},"generated":{"line":1,"column":3599}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":770,"column":21},"generated":{"line":1,"column":3607}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":791,"column":6},"generated":{"line":1,"column":3610}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":791,"column":16},"generated":{"line":1,"column":3619}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":791,"column":24},"generated":{"line":1,"column":3621}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":792,"column":9},"generated":{"line":1,"column":3624}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":792,"column":9},"generated":{"line":1,"column":3631}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":792,"column":13},"generated":{"line":1,"column":3635}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":792,"column":9},"generated":{"line":1,"column":3637}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":792,"column":21},"generated":{"line":1,"column":3645}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":814,"column":6},"generated":{"line":1,"column":3648}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":814,"column":16},"generated":{"line":1,"column":3657}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":814,"column":25},"generated":{"line":1,"column":3659}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":815,"column":9},"generated":{"line":1,"column":3662}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":815,"column":9},"generated":{"line":1,"column":3669}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":815,"column":13},"generated":{"line":1,"column":3673}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":815,"column":9},"generated":{"line":1,"column":3675}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":815,"column":22},"generated":{"line":1,"column":3684}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":840,"column":6},"generated":{"line":1,"column":3687}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":840,"column":16},"generated":{"line":1,"column":3696}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":840,"column":20},"generated":{"line":1,"column":3698}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":841,"column":9},"generated":{"line":1,"column":3701}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":841,"column":9},"generated":{"line":1,"column":3708}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":841,"column":13},"generated":{"line":1,"column":3712}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":841,"column":9},"generated":{"line":1,"column":3714}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":841,"column":17},"generated":{"line":1,"column":3718}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":867,"column":6},"generated":{"line":1,"column":3721}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":867,"column":16},"generated":{"line":1,"column":3730}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":867,"column":35},"generated":{"line":1,"column":3732}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":868,"column":9},"generated":{"line":1,"column":3735}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":868,"column":9},"generated":{"line":1,"column":3742}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":868,"column":13},"generated":{"line":1,"column":3746}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":868,"column":9},"generated":{"line":1,"column":3748}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":868,"column":32},"generated":{"line":1,"column":3767}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":891,"column":6},"generated":{"line":1,"column":3770}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":891,"column":16},"generated":{"line":1,"column":3779}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":891,"column":35},"generated":{"line":1,"column":3781}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":892,"column":9},"generated":{"line":1,"column":3784}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":892,"column":9},"generated":{"line":1,"column":3791}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":892,"column":13},"generated":{"line":1,"column":3795}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":892,"column":9},"generated":{"line":1,"column":3797}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":892,"column":32},"generated":{"line":1,"column":3816}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":919,"column":6},"generated":{"line":1,"column":3819}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":919,"column":16},"generated":{"line":1,"column":3828}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":919,"column":30},"generated":{"line":1,"column":3830}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":920,"column":9},"generated":{"line":1,"column":3833}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":920,"column":9},"generated":{"line":1,"column":3840}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":920,"column":13},"generated":{"line":1,"column":3844}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":920,"column":9},"generated":{"line":1,"column":3846}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":920,"column":27},"generated":{"line":1,"column":3860}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":936,"column":6},"generated":{"line":1,"column":3863}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":936,"column":16},"generated":{"line":1,"column":3872}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":936,"column":33},"generated":{"line":1,"column":3874}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":937,"column":9},"generated":{"line":1,"column":3877}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":937,"column":9},"generated":{"line":1,"column":3884}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":937,"column":13},"generated":{"line":1,"column":3888}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":937,"column":9},"generated":{"line":1,"column":3890}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":937,"column":30},"generated":{"line":1,"column":3907}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":939,"column":6},"generated":{"line":1,"column":3910}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":939,"column":16},"generated":{"line":1,"column":3919}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":939,"column":26},"generated":{"line":1,"column":3921}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":940,"column":9},"generated":{"line":1,"column":3924}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":940,"column":9},"generated":{"line":1,"column":3931}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":940,"column":26},"generated":{"line":1,"column":3933}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":944,"column":6},"generated":{"line":1,"column":3936}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":944,"column":16},"generated":{"line":1,"column":3945}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":944,"column":29},"generated":{"line":1,"column":3947}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":945,"column":9},"generated":{"line":1,"column":3950}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":945,"column":9},"generated":{"line":1,"column":3957}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":945,"column":26},"generated":{"line":1,"column":3959}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":971,"column":6},"generated":{"line":1,"column":3962}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":971,"column":16},"generated":{"line":1,"column":3971}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":971,"column":33},"generated":{"line":1,"column":3973}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":972,"column":9},"generated":{"line":1,"column":3976}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":972,"column":9},"generated":{"line":1,"column":3983}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":972,"column":13},"generated":{"line":1,"column":3987}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":972,"column":9},"generated":{"line":1,"column":3989}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":972,"column":30},"generated":{"line":1,"column":4006}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":974,"column":6},"generated":{"line":1,"column":4009}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":974,"column":16},"generated":{"line":1,"column":4018}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":974,"column":26},"generated":{"line":1,"column":4021}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":975,"column":9},"generated":{"line":1,"column":4024}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":975,"column":9},"generated":{"line":1,"column":4031}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":975,"column":26},"generated":{"line":1,"column":4033}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":979,"column":6},"generated":{"line":1,"column":4036}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":979,"column":16},"generated":{"line":1,"column":4045}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":979,"column":29},"generated":{"line":1,"column":4048}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":980,"column":9},"generated":{"line":1,"column":4051}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":980,"column":9},"generated":{"line":1,"column":4058}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":980,"column":26},"generated":{"line":1,"column":4060}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1004,"column":6},"generated":{"line":1,"column":4063}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1004,"column":16},"generated":{"line":1,"column":4072}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1004,"column":33},"generated":{"line":1,"column":4075}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1005,"column":9},"generated":{"line":1,"column":4078}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1005,"column":9},"generated":{"line":1,"column":4085}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1005,"column":13},"generated":{"line":1,"column":4089}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1005,"column":9},"generated":{"line":1,"column":4091}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1005,"column":30},"generated":{"line":1,"column":4108}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1007,"column":6},"generated":{"line":1,"column":4111}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1007,"column":16},"generated":{"line":1,"column":4120}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1007,"column":26},"generated":{"line":1,"column":4123}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1008,"column":9},"generated":{"line":1,"column":4126}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1008,"column":9},"generated":{"line":1,"column":4133}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1008,"column":26},"generated":{"line":1,"column":4136}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1012,"column":6},"generated":{"line":1,"column":4139}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1012,"column":16},"generated":{"line":1,"column":4148}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1012,"column":29},"generated":{"line":1,"column":4151}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1013,"column":9},"generated":{"line":1,"column":4154}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1013,"column":9},"generated":{"line":1,"column":4161}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1013,"column":26},"generated":{"line":1,"column":4164}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1025,"column":6},"generated":{"line":1,"column":4167}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1025,"column":16},"generated":{"line":1,"column":4176}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1025,"column":39},"generated":{"line":1,"column":4179}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1026,"column":9},"generated":{"line":1,"column":4182}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1026,"column":9},"generated":{"line":1,"column":4189}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1026,"column":13},"generated":{"line":1,"column":4193}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1026,"column":9},"generated":{"line":1,"column":4195}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1026,"column":36},"generated":{"line":1,"column":4218}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1043,"column":6},"generated":{"line":1,"column":4221}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1043,"column":16},"generated":{"line":1,"column":4230}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1043,"column":39},"generated":{"line":1,"column":4233}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1044,"column":9},"generated":{"line":1,"column":4236}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1044,"column":9},"generated":{"line":1,"column":4243}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1044,"column":13},"generated":{"line":1,"column":4247}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1044,"column":9},"generated":{"line":1,"column":4249}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1044,"column":36},"generated":{"line":1,"column":4272}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1056,"column":6},"generated":{"line":1,"column":4275}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1056,"column":16},"generated":{"line":1,"column":4284}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1056,"column":35},"generated":{"line":1,"column":4287}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1057,"column":9},"generated":{"line":1,"column":4290}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1057,"column":9},"generated":{"line":1,"column":4297}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1057,"column":13},"generated":{"line":1,"column":4301}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1057,"column":9},"generated":{"line":1,"column":4303}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1057,"column":32},"generated":{"line":1,"column":4322}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1074,"column":6},"generated":{"line":1,"column":4325}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1074,"column":16},"generated":{"line":1,"column":4334}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1074,"column":35},"generated":{"line":1,"column":4337}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1075,"column":9},"generated":{"line":1,"column":4340}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1075,"column":9},"generated":{"line":1,"column":4347}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1075,"column":13},"generated":{"line":1,"column":4351}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1075,"column":9},"generated":{"line":1,"column":4353}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1075,"column":32},"generated":{"line":1,"column":4372}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1087,"column":6},"generated":{"line":1,"column":4375}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1087,"column":16},"generated":{"line":1,"column":4384}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1087,"column":29},"generated":{"line":1,"column":4387}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1088,"column":9},"generated":{"line":1,"column":4390}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1088,"column":9},"generated":{"line":1,"column":4397}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1088,"column":13},"generated":{"line":1,"column":4401}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1088,"column":9},"generated":{"line":1,"column":4403}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1088,"column":26},"generated":{"line":1,"column":4416}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1112,"column":6},"generated":{"line":1,"column":4419}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1112,"column":16},"generated":{"line":1,"column":4428}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1112,"column":29},"generated":{"line":1,"column":4431}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1113,"column":9},"generated":{"line":1,"column":4434}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1113,"column":9},"generated":{"line":1,"column":4441}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1113,"column":13},"generated":{"line":1,"column":4445}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1113,"column":9},"generated":{"line":1,"column":4447}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1113,"column":26},"generated":{"line":1,"column":4460}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1137,"column":6},"generated":{"line":1,"column":4463}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1137,"column":16},"generated":{"line":1,"column":4472}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1137,"column":29},"generated":{"line":1,"column":4475}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1138,"column":9},"generated":{"line":1,"column":4478}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1138,"column":9},"generated":{"line":1,"column":4485}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1138,"column":13},"generated":{"line":1,"column":4489}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1138,"column":9},"generated":{"line":1,"column":4491}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1138,"column":26},"generated":{"line":1,"column":4504}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1166,"column":6},"generated":{"line":1,"column":4507}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1166,"column":16},"generated":{"line":1,"column":4516}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1166,"column":20},"generated":{"line":1,"column":4519}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1167,"column":9},"generated":{"line":1,"column":4522}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1167,"column":9},"generated":{"line":1,"column":4529}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1167,"column":13},"generated":{"line":1,"column":4533}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1167,"column":9},"generated":{"line":1,"column":4535}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1167,"column":17},"generated":{"line":1,"column":4539}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1215,"column":6},"generated":{"line":1,"column":4542}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1215,"column":16},"generated":{"line":1,"column":4551}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1215,"column":24},"generated":{"line":1,"column":4554}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1216,"column":9},"generated":{"line":1,"column":4557}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1216,"column":9},"generated":{"line":1,"column":4564}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1216,"column":13},"generated":{"line":1,"column":4568}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1216,"column":9},"generated":{"line":1,"column":4570}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1216,"column":21},"generated":{"line":1,"column":4578}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1242,"column":6},"generated":{"line":1,"column":4581}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1242,"column":16},"generated":{"line":1,"column":4590}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1242,"column":21},"generated":{"line":1,"column":4593}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1243,"column":9},"generated":{"line":1,"column":4596}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1243,"column":9},"generated":{"line":1,"column":4603}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1243,"column":13},"generated":{"line":1,"column":4607}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1243,"column":9},"generated":{"line":1,"column":4609}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1243,"column":18},"generated":{"line":1,"column":4614}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1291,"column":6},"generated":{"line":1,"column":4617}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1291,"column":16},"generated":{"line":1,"column":4626}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1291,"column":25},"generated":{"line":1,"column":4629}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1292,"column":9},"generated":{"line":1,"column":4632}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1292,"column":9},"generated":{"line":1,"column":4639}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1292,"column":13},"generated":{"line":1,"column":4643}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1292,"column":9},"generated":{"line":1,"column":4645}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1292,"column":22},"generated":{"line":1,"column":4654}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1319,"column":6},"generated":{"line":1,"column":4657}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1319,"column":16},"generated":{"line":1,"column":4666}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1319,"column":26},"generated":{"line":1,"column":4669}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1320,"column":9},"generated":{"line":1,"column":4672}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1320,"column":9},"generated":{"line":1,"column":4679}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1320,"column":13},"generated":{"line":1,"column":4683}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1320,"column":9},"generated":{"line":1,"column":4685}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1320,"column":23},"generated":{"line":1,"column":4695}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1368,"column":6},"generated":{"line":1,"column":4698}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1368,"column":16},"generated":{"line":1,"column":4707}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1368,"column":30},"generated":{"line":1,"column":4710}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1369,"column":9},"generated":{"line":1,"column":4713}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1369,"column":9},"generated":{"line":1,"column":4720}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1369,"column":13},"generated":{"line":1,"column":4724}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1369,"column":9},"generated":{"line":1,"column":4726}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1369,"column":27},"generated":{"line":1,"column":4740}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1399,"column":6},"generated":{"line":1,"column":4743}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1399,"column":16},"generated":{"line":1,"column":4752}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1399,"column":27},"generated":{"line":1,"column":4755}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1400,"column":9},"generated":{"line":1,"column":4758}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1400,"column":9},"generated":{"line":1,"column":4765}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1400,"column":13},"generated":{"line":1,"column":4769}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1400,"column":9},"generated":{"line":1,"column":4771}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1400,"column":24},"generated":{"line":1,"column":4782}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1436,"column":6},"generated":{"line":1,"column":4785}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1436,"column":16},"generated":{"line":1,"column":4794}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1436,"column":31},"generated":{"line":1,"column":4797}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1437,"column":9},"generated":{"line":1,"column":4800}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1437,"column":9},"generated":{"line":1,"column":4807}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1437,"column":13},"generated":{"line":1,"column":4811}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1437,"column":9},"generated":{"line":1,"column":4813}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1437,"column":28},"generated":{"line":1,"column":4828}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1500,"column":6},"generated":{"line":1,"column":4831}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1500,"column":16},"generated":{"line":1,"column":4840}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1500,"column":20},"generated":{"line":1,"column":4843}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1501,"column":9},"generated":{"line":1,"column":4846}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1501,"column":9},"generated":{"line":1,"column":4853}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1501,"column":13},"generated":{"line":1,"column":4857}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1501,"column":9},"generated":{"line":1,"column":4859}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1501,"column":17},"generated":{"line":1,"column":4863}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1511,"column":6},"generated":{"line":1,"column":4866}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1511,"column":16},"generated":{"line":1,"column":4875}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1511,"column":32},"generated":{"line":1,"column":4878}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1512,"column":9},"generated":{"line":1,"column":4881}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1512,"column":9},"generated":{"line":1,"column":4888}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1512,"column":13},"generated":{"line":1,"column":4892}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1512,"column":9},"generated":{"line":1,"column":4894}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1512,"column":29},"generated":{"line":1,"column":4910}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1518,"column":6},"generated":{"line":1,"column":4913}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1518,"column":16},"generated":{"line":1,"column":4922}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1518,"column":30},"generated":{"line":1,"column":4925}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1519,"column":9},"generated":{"line":1,"column":4928}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1519,"column":9},"generated":{"line":1,"column":4935}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1519,"column":13},"generated":{"line":1,"column":4939}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1519,"column":9},"generated":{"line":1,"column":4941}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1519,"column":27},"generated":{"line":1,"column":4955}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1568,"column":6},"generated":{"line":1,"column":4958}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1568,"column":16},"generated":{"line":1,"column":4967}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1568,"column":32},"generated":{"line":1,"column":4970}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1569,"column":9},"generated":{"line":1,"column":4973}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1569,"column":9},"generated":{"line":1,"column":4980}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1569,"column":13},"generated":{"line":1,"column":4984}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1569,"column":9},"generated":{"line":1,"column":4986}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1569,"column":29},"generated":{"line":1,"column":5002}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1573,"column":7},"generated":{"line":1,"column":5005}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1573,"column":13},"generated":{"line":1,"column":5011}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1573,"column":31},"generated":{"line":1,"column":5014}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":5017}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":5025}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":5041}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1574,"column":7},"generated":{"line":1,"column":5044}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1574,"column":13},"generated":{"line":1,"column":5050}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1574,"column":31},"generated":{"line":1,"column":5053}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":5056}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":5064}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":5080}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1575,"column":7},"generated":{"line":1,"column":5083}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1575,"column":13},"generated":{"line":1,"column":5089}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1575,"column":25},"generated":{"line":1,"column":5092}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":5095}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":5103}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":5113}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1576,"column":7},"generated":{"line":1,"column":5116}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1576,"column":13},"generated":{"line":1,"column":5122}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1576,"column":25},"generated":{"line":1,"column":5125}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1603,"column":6},"generated":{"line":1,"column":5128}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1603,"column":16},"generated":{"line":1,"column":5137}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1603,"column":30},"generated":{"line":1,"column":5140}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":9},"generated":{"line":1,"column":5143}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":9},"generated":{"line":1,"column":5150}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":13},"generated":{"line":1,"column":5154}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":9},"generated":{"line":1,"column":5156}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1604,"column":27},"generated":{"line":1,"column":5170}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1631,"column":6},"generated":{"line":1,"column":5173}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1631,"column":16},"generated":{"line":1,"column":5182}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1631,"column":32},"generated":{"line":1,"column":5185}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1632,"column":9},"generated":{"line":1,"column":5188}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1632,"column":9},"generated":{"line":1,"column":5195}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1632,"column":13},"generated":{"line":1,"column":5199}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1632,"column":9},"generated":{"line":1,"column":5201}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1632,"column":29},"generated":{"line":1,"column":5217}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1666,"column":6},"generated":{"line":1,"column":5220}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1666,"column":16},"generated":{"line":1,"column":5229}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1666,"column":29},"generated":{"line":1,"column":5232}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1667,"column":9},"generated":{"line":1,"column":5235}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1667,"column":9},"generated":{"line":1,"column":5242}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1667,"column":13},"generated":{"line":1,"column":5246}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1667,"column":9},"generated":{"line":1,"column":5248}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1667,"column":26},"generated":{"line":1,"column":5261}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1693,"column":6},"generated":{"line":1,"column":5264}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1693,"column":16},"generated":{"line":1,"column":5273}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1693,"column":24},"generated":{"line":1,"column":5276}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1694,"column":9},"generated":{"line":1,"column":5279}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1694,"column":9},"generated":{"line":1,"column":5286}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1694,"column":13},"generated":{"line":1,"column":5290}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1694,"column":9},"generated":{"line":1,"column":5292}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1694,"column":21},"generated":{"line":1,"column":5300}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":5303}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":5311}},{"source":"../src/exports_layers.ts","name":null,"original":{"line":1695,"column":1},"generated":{"line":1,"column":5321}}],"sources":{"../src/exports_layers.ts":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\nimport {InputLayer, InputLayerArgs} from './engine/input_layer';\nimport {Layer, LayerArgs} from './engine/topology';\nimport {input} from './exports';\nimport {ELU, ELULayerArgs, LeakyReLU, LeakyReLULayerArgs, PReLU, PReLULayerArgs, ReLU, ReLULayerArgs, Softmax, SoftmaxLayerArgs, ThresholdedReLU, ThresholdedReLULayerArgs} from './layers/advanced_activations';\nimport {Conv1D, Conv2D, Conv2DTranspose, Conv3D, ConvLayerArgs, Cropping2D, Cropping2DLayerArgs, SeparableConv2D, SeparableConvLayerArgs, UpSampling2D, UpSampling2DLayerArgs} from './layers/convolutional';\nimport {DepthwiseConv2D, DepthwiseConv2DLayerArgs} from './layers/convolutional_depthwise';\nimport {ConvLSTM2D, ConvLSTM2DArgs, ConvLSTM2DCell, ConvLSTM2DCellArgs} from './layers/convolutional_recurrent';\nimport {Activation, ActivationLayerArgs, Dense, DenseLayerArgs, Dropout, DropoutLayerArgs, Flatten, FlattenLayerArgs, Masking, MaskingArgs, Permute, PermuteLayerArgs, RepeatVector, RepeatVectorLayerArgs, Reshape, ReshapeLayerArgs, SpatialDropout1D, SpatialDropout1DLayerConfig} from './layers/core';\nimport {Embedding, EmbeddingLayerArgs} from './layers/embeddings';\nimport {Add, Average, Concatenate, ConcatenateLayerArgs, Dot, DotLayerArgs, Maximum, Minimum, Multiply} from './layers/merge';\nimport {AlphaDropout, AlphaDropoutArgs, GaussianDropout, GaussianDropoutArgs, GaussianNoise, GaussianNoiseArgs} from './layers/noise';\nimport {BatchNormalization, BatchNormalizationLayerArgs, LayerNormalization, LayerNormalizationLayerArgs} from './layers/normalization';\nimport {ZeroPadding2D, ZeroPadding2DLayerArgs} from './layers/padding';\nimport {AveragePooling1D, AveragePooling2D, AveragePooling3D, GlobalAveragePooling1D, GlobalAveragePooling2D, GlobalMaxPooling1D, GlobalMaxPooling2D, GlobalPooling2DLayerArgs, MaxPooling1D, MaxPooling2D, MaxPooling3D, Pooling1DLayerArgs, Pooling2DLayerArgs, Pooling3DLayerArgs} from './layers/pooling';\nimport {GRU, GRUCell, GRUCellLayerArgs, GRULayerArgs, LSTM, LSTMCell, LSTMCellLayerArgs, LSTMLayerArgs, RNN, RNNCell, RNNLayerArgs, SimpleRNN, SimpleRNNCell, SimpleRNNCellLayerArgs, SimpleRNNLayerArgs, StackedRNNCells, StackedRNNCellsArgs} from './layers/recurrent';\nimport {Bidirectional, BidirectionalLayerArgs, TimeDistributed, WrapperLayerArgs} from './layers/wrappers';\n\n// TODO(cais): Add doc string to all the public static functions in this\n//   class; include exectuable JavaScript code snippets where applicable\n//   (b/74074458).\n\n// Input Layer.\n/**\n * An input layer is an entry point into a `tf.LayersModel`.\n *\n * `InputLayer` is generated automatically for `tf.Sequential`` models by\n * specifying the `inputshape` or `batchInputShape` for the first layer.  It\n * should not be specified explicitly. However, it can be useful sometimes,\n * e.g., when constructing a sequential model from a subset of another\n * sequential model's layers. Like the code snippet below shows.\n *\n * ```js\n * // Define a model which simply adds two inputs.\n * const model1 = tf.sequential();\n * model1.add(tf.layers.dense({inputShape: [4], units: 3, activation: 'relu'}));\n * model1.add(tf.layers.dense({units: 1, activation: 'sigmoid'}));\n * model1.summary();\n * model1.predict(tf.zeros([1, 4])).print();\n *\n * // Construct another model, reusing the second layer of `model1` while\n * // not using the first layer of `model1`. Note that you cannot add the second\n * // layer of `model` directly as the first layer of the new sequential model,\n * // because doing so will lead to an error related to the fact that the layer\n * // is not an input layer. Instead, you need to create an `inputLayer` and add\n * // it to the new sequential model before adding the reused layer.\n * const model2 = tf.sequential();\n * // Use an inputShape that matches the input shape of `model1`'s second\n * // layer.\n * model2.add(tf.layers.inputLayer({inputShape: [3]}));\n * model2.add(model1.layers[1]);\n * model2.summary();\n * model2.predict(tf.zeros([1, 3])).print();\n * ```\n *\n * @doc {heading: 'Layers', subheading: 'Inputs', namespace: 'layers'}\n */\nexport function inputLayer(args: InputLayerArgs): Layer {\n  return new InputLayer(args);\n}\n\n// Advanced Activation Layers.\n\n/**\n * Exponetial Linear Unit (ELU).\n *\n * It follows:\n * `f(x) =  alpha * (exp(x) - 1.) for x < 0`,\n * `f(x) = x for x >= 0`.\n *\n * Input shape:\n *   Arbitrary. Use the configuration `inputShape` when using this layer as the\n *   first layer in a model.\n *\n * Output shape:\n *   Same shape as the input.\n *\n * References:\n *   - [Fast and Accurate Deep Network Learning by Exponential Linear Units\n * (ELUs)](https://arxiv.org/abs/1511.07289v1)\n *\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Advanced Activation',\n *   namespace: 'layers'\n * }\n */\nexport function elu(args?: ELULayerArgs): Layer {\n  return new ELU(args);\n}\n\n/**\n * Rectified Linear Unit activation function.\n *\n * Input shape:\n *   Arbitrary. Use the config field `inputShape` (Array of integers, does\n *   not include the sample axis) when using this layer as the first layer\n *   in a model.\n *\n * Output shape:\n *   Same shape as the input.\n *\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Advanced Activation',\n *   namespace: 'layers'\n * }\n */\nexport function reLU(args?: ReLULayerArgs): Layer {\n  return new ReLU(args);\n}\n\n/**\n * Leaky version of a rectified linear unit.\n *\n * It allows a small gradient when the unit is not active:\n * `f(x) = alpha * x for x < 0.`\n * `f(x) = x for x >= 0.`\n *\n * Input shape:\n *   Arbitrary. Use the configuration `inputShape` when using this layer as the\n *   first layer in a model.\n *\n * Output shape:\n *   Same shape as the input.\n *\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Advanced Activation',\n *   namespace: 'layers'\n * }\n */\nexport function leakyReLU(args?: LeakyReLULayerArgs): Layer {\n  return new LeakyReLU(args);\n}\n\n/**\n * Parameterized version of a leaky rectified linear unit.\n *\n * It follows\n * `f(x) = alpha * x for x < 0.`\n * `f(x) = x for x >= 0.`\n * wherein `alpha` is a trainable weight.\n *\n * Input shape:\n *   Arbitrary. Use the configuration `inputShape` when using this layer as the\n *   first layer in a model.\n *\n * Output shape:\n *   Same shape as the input.\n *\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Advanced Activation',\n *   namespace: 'layers'\n * }\n */\nexport function prelu(args?: PReLULayerArgs): Layer {\n  return new PReLU(args);\n}\n\n/**\n * Softmax activation layer.\n *\n * Input shape:\n *   Arbitrary. Use the configuration `inputShape` when using this layer as the\n *   first layer in a model.\n *\n * Output shape:\n *   Same shape as the input.\n *\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Advanced Activation',\n *   namespace: 'layers'\n * }\n */\nexport function softmax(args?: SoftmaxLayerArgs): Layer {\n  return new Softmax(args);\n}\n\n/**\n * Thresholded Rectified Linear Unit.\n *\n * It follows:\n * `f(x) = x for x > theta`,\n * `f(x) = 0 otherwise`.\n *\n * Input shape:\n *   Arbitrary. Use the configuration `inputShape` when using this layer as the\n *   first layer in a model.\n *\n * Output shape:\n *   Same shape as the input.\n *\n * References:\n *   - [Zero-Bias Autoencoders and the Benefits of Co-Adapting\n * Features](http://arxiv.org/abs/1402.3337)\n *\n * @doc {\n *   heading: 'Layers',\n *   subheading: 'Advanced Activation',\n *   namespace: 'layers'\n * }\n */\nexport function thresholdedReLU(args?: ThresholdedReLULayerArgs): Layer {\n  return new ThresholdedReLU(args);\n}\n\n// Convolutional Layers.\n\n/**\n * 1D convolution layer (e.g., temporal convolution).\n *\n * This layer creates a convolution kernel that is convolved\n * with the layer input over a single spatial (or temporal) dimension\n * to produce a tensor of outputs.\n *\n * If `use_bias` is True, a bias vector is created and added to the outputs.\n *\n * If `activation` is not `null`, it is applied to the outputs as well.\n *\n * When using this layer as the first layer in a model, provide an\n * `inputShape` argument `Array` or `null`.\n *\n * For example, `inputShape` would be:\n * - `[10, 128]` for sequences of 10 vectors of 128-dimensional vectors\n * - `[null, 128]` for variable-length sequences of 128-dimensional vectors.\n *\n * @doc {heading: 'Layers', subheading: 'Convolutional',  namespace: 'layers'}\n */\nexport function conv1d(args: ConvLayerArgs): Layer {\n  return new Conv1D(args);\n}\n\n/**\n * 2D convolution layer (e.g. spatial convolution over images).\n *\n * This layer creates a convolution kernel that is convolved\n * with the layer input to produce a tensor of outputs.\n *\n * If `useBias` is True, a bias vector is created and added to the outputs.\n *\n * If `activation` is not `null`, it is applied to the outputs as well.\n *\n * When using this layer as the first layer in a model,\n * provide the keyword argument `inputShape`\n * (Array of integers, does not include the sample axis),\n * e.g. `inputShape=[128, 128, 3]` for 128x128 RGB pictures\n * in `dataFormat='channelsLast'`.\n *\n * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}\n */\nexport function conv2d(args: ConvLayerArgs): Layer {\n  return new Conv2D(args);\n}\n\n/**\n * Transposed convolutional layer (sometimes called Deconvolution).\n *\n * The need for transposed convolutions generally arises\n * from the desire to use a transformation going in the opposite direction of\n * a normal convolution, i.e., from something that has the shape of the output\n * of some convolution to something that has the shape of its input while\n * maintaining a connectivity pattern that is compatible with said\n * convolution.\n *\n * When using this layer as the first layer in a model, provide the\n * configuration `inputShape` (`Array` of integers, does not include the\n * sample axis), e.g., `inputShape: [128, 128, 3]` for 128x128 RGB pictures in\n * `dataFormat: 'channelsLast'`.\n *\n * Input shape:\n *   4D tensor with shape:\n *   `[batch, channels, rows, cols]` if `dataFormat` is `'channelsFirst'`.\n *   or 4D tensor with shape\n *   `[batch, rows, cols, channels]` if `dataFormat` is `'channelsLast`.\n *\n * Output shape:\n *   4D tensor with shape:\n *   `[batch, filters, newRows, newCols]` if `dataFormat` is\n * `'channelsFirst'`. or 4D tensor with shape:\n *   `[batch, newRows, newCols, filters]` if `dataFormat` is `'channelsLast'`.\n *\n * References:\n *   - [A guide to convolution arithmetic for deep\n * learning](https://arxiv.org/abs/1603.07285v1)\n *   - [Deconvolutional\n * Networks](http://www.matthewzeiler.com/pubs/cvpr2010/cvpr2010.pdf)\n *\n * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}\n */\nexport function conv2dTranspose(args: ConvLayerArgs): Layer {\n  return new Conv2DTranspose(args);\n}\n\n/**\n * 3D convolution layer (e.g. spatial convolution over volumes).\n *\n * This layer creates a convolution kernel that is convolved\n * with the layer input to produce a tensor of outputs.\n *\n * If `useBias` is True, a bias vector is created and added to the outputs.\n *\n * If `activation` is not `null`, it is applied to the outputs as well.\n *\n * When using this layer as the first layer in a model,\n * provide the keyword argument `inputShape`\n * (Array of integers, does not include the sample axis),\n * e.g. `inputShape=[128, 128, 128, 1]` for 128x128x128 grayscale volumes\n * in `dataFormat='channelsLast'`.\n *\n * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}\n */\nexport function conv3d(args: ConvLayerArgs): Layer {\n  return new Conv3D(args);\n}\n\n/**\n * Depthwise separable 2D convolution.\n *\n * Separable convolution consists of first performing\n * a depthwise spatial convolution\n * (which acts on each input channel separately)\n * followed by a pointwise convolution which mixes together the resulting\n * output channels. The `depthMultiplier` argument controls how many\n * output channels are generated per input channel in the depthwise step.\n *\n * Intuitively, separable convolutions can be understood as\n * a way to factorize a convolution kernel into two smaller kernels,\n * or as an extreme version of an Inception block.\n *\n * Input shape:\n *   4D tensor with shape:\n *     `[batch, channels, rows, cols]` if data_format='channelsFirst'\n *   or 4D tensor with shape:\n *     `[batch, rows, cols, channels]` if data_format='channelsLast'.\n *\n * Output shape:\n *   4D tensor with shape:\n *     `[batch, filters, newRows, newCols]` if data_format='channelsFirst'\n *   or 4D tensor with shape:\n *     `[batch, newRows, newCols, filters]` if data_format='channelsLast'.\n *     `rows` and `cols` values might have changed due to padding.\n *\n * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}\n */\nexport function separableConv2d(args: SeparableConvLayerArgs): Layer {\n  return new SeparableConv2D(args);\n}\n\n/**\n * Cropping layer for 2D input (e.g., image).\n *\n * This layer can crop an input\n * at the top, bottom, left and right side of an image tensor.\n *\n * Input shape:\n *   4D tensor with shape:\n *   - If `dataFormat` is `\"channelsLast\"`:\n *     `[batch, rows, cols, channels]`\n *   - If `data_format` is `\"channels_first\"`:\n *     `[batch, channels, rows, cols]`.\n *\n * Output shape:\n *   4D with shape:\n *   - If `dataFormat` is `\"channelsLast\"`:\n *     `[batch, croppedRows, croppedCols, channels]`\n *    - If `dataFormat` is `\"channelsFirst\"`:\n *     `[batch, channels, croppedRows, croppedCols]`.\n *\n * Examples\n * ```js\n *\n * const model = tf.sequential();\n * model.add(tf.layers.cropping2D({cropping:[[2, 2], [2, 2]],\n *                                inputShape: [128, 128, 3]}));\n * //now output shape is [batch, 124, 124, 3]\n * ```\n *\n * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}\n */\nexport function cropping2D(args: Cropping2DLayerArgs): Layer {\n  return new Cropping2D(args);\n}\n\n/**\n * Upsampling layer for 2D inputs.\n *\n * Repeats the rows and columns of the data\n * by size[0] and size[1] respectively.\n *\n *\n * Input shape:\n *    4D tensor with shape:\n *     - If `dataFormat` is `\"channelsLast\"`:\n *         `[batch, rows, cols, channels]`\n *     - If `dataFormat` is `\"channelsFirst\"`:\n *        `[batch, channels, rows, cols]`\n *\n * Output shape:\n *     4D tensor with shape:\n *     - If `dataFormat` is `\"channelsLast\"`:\n *        `[batch, upsampledRows, upsampledCols, channels]`\n *     - If `dataFormat` is `\"channelsFirst\"`:\n *         `[batch, channels, upsampledRows, upsampledCols]`\n *\n *\n * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}\n */\nexport function upSampling2d(args: UpSampling2DLayerArgs): Layer {\n  return new UpSampling2D(args);\n}\n\n// Convolutional(depthwise) Layers.\n\n/**\n * Depthwise separable 2D convolution.\n *\n * Depthwise Separable convolutions consists in performing just the first step\n * in a depthwise spatial convolution (which acts on each input channel\n * separately). The `depthMultplier` argument controls how many output channels\n * are generated per input channel in the depthwise step.\n *\n * @doc {heading: 'Layers', subheading: 'Convolutional', namespace: 'layers'}\n */\nexport function depthwiseConv2d(args: DepthwiseConv2DLayerArgs): Layer {\n  return new DepthwiseConv2D(args);\n}\n\n// Basic Layers.\n\n/**\n * Applies an activation function to an output.\n *\n * This layer applies element-wise activation function.  Other layers, notably\n * `dense` can also apply activation functions.  Use this isolated activation\n * function to extract the values before and after the\n * activation. For instance:\n *\n * ```js\n * const input = tf.input({shape: [5]});\n * const denseLayer = tf.layers.dense({units: 1});\n * const activationLayer = tf.layers.activation({activation: 'relu6'});\n *\n * // Obtain the output symbolic tensors by applying the layers in order.\n * const denseOutput = denseLayer.apply(input);\n * const activationOutput = activationLayer.apply(denseOutput);\n *\n * // Create the model based on the inputs.\n * const model = tf.model({\n *     inputs: input,\n *     outputs: [denseOutput, activationOutput]\n * });\n *\n * // Collect both outputs and print separately.\n * const [denseOut, activationOut] = model.predict(tf.randomNormal([6, 5]));\n * denseOut.print();\n * activationOut.print();\n * ```\n *\n * @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'}\n */\nexport function activation(args: ActivationLayerArgs): Layer {\n  return new Activation(args);\n}\n\n/**\n * Creates a dense (fully connected) layer.\n *\n * This layer implements the operation:\n *   `output = activation(dot(input, kernel) + bias)`\n *\n * `activation` is the element-wise activation function\n *   passed as the `activation` argument.\n *\n * `kernel` is a weights matrix created by the layer.\n *\n * `bias` is a bias vector created by the layer (only applicable if `useBias`\n * is `true`).\n *\n * **Input shape:**\n *\n *   nD `tf.Tensor` with shape: `(batchSize, ..., inputDim)`.\n *\n *   The most common situation would be\n *   a 2D input with shape `(batchSize, inputDim)`.\n *\n * **Output shape:**\n *\n *   nD tensor with shape: `(batchSize, ..., units)`.\n *\n *   For instance, for a 2D input with shape `(batchSize, inputDim)`,\n *   the output would have shape `(batchSize, units)`.\n *\n * Note: if the input to the layer has a rank greater than 2, then it is\n * flattened prior to the initial dot product with the kernel.\n *\n * @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'}\n */\nexport function dense(args: DenseLayerArgs): Layer {\n  return new Dense(args);\n}\n\n/**\n * Applies\n * [dropout](http://www.cs.toronto.edu/~rsalakhu/papers/srivastava14a.pdf) to\n * the input.\n *\n * Dropout consists in randomly setting a fraction `rate` of input units to 0 at\n * each update during training time, which helps prevent overfitting.\n *\n * @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'}\n */\nexport function dropout(args: DropoutLayerArgs): Layer {\n  return new Dropout(args);\n}\n\n/**\n * Spatial 1D version of Dropout.\n *\n * This Layer type performs the same function as the Dropout layer, but it drops\n * entire 1D feature maps instead of individual elements. For example, if an\n * input example consists of 3 timesteps and the feature map for each timestep\n * has a size of 4, a `spatialDropout1d` layer may zero out the feature maps\n * of the 1st timesteps and 2nd timesteps completely while sparing all feature\n * elements of the 3rd timestep.\n *\n * If adjacent frames (timesteps) are strongly correlated (as is normally the\n * case in early convolution layers), regular dropout will not regularize the\n * activation and will otherwise just result in merely an effective learning\n * rate decrease. In this case, `spatialDropout1d` will help promote\n * independence among feature maps and should be used instead.\n *\n * **Arguments:**\n *   rate: A floating-point number >=0 and <=1. Fraction of the input elements\n *     to drop.\n *\n * **Input shape:**\n *   3D tensor with shape `(samples, timesteps, channels)`.\n *\n * **Output shape:**\n *   Same as the input shape.\n *\n * References:\n *   - [Efficient Object Localization Using Convolutional\n *      Networks](https://arxiv.org/abs/1411.4280)\n *\n * @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'}\n */\nexport function spatialDropout1d(args: SpatialDropout1DLayerConfig): Layer {\n  return new SpatialDropout1D(args);\n}\n\n/**\n * Flattens the input. Does not affect the batch size.\n *\n * A `Flatten` layer flattens each batch in its inputs to 1D (making the output\n * 2D).\n *\n * For example:\n *\n * ```js\n * const input = tf.input({shape: [4, 3]});\n * const flattenLayer = tf.layers.flatten();\n * // Inspect the inferred output shape of the flatten layer, which\n * // equals `[null, 12]`. The 2nd dimension is 4 * 3, i.e., the result of the\n * // flattening. (The 1st dimension is the undermined batch size.)\n * console.log(JSON.stringify(flattenLayer.apply(input).shape));\n * ```\n *\n * @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'}\n */\nexport function flatten(args?: FlattenLayerArgs): Layer {\n  return new Flatten(args);\n}\n\n/**\n * Repeats the input n times in a new dimension.\n *\n * ```js\n *  const model = tf.sequential();\n *  model.add(tf.layers.repeatVector({n: 4, inputShape: [2]}));\n *  const x = tf.tensor2d([[10, 20]]);\n *  // Use the model to do inference on a data point the model hasn't see\n *  model.predict(x).print();\n *  // output shape is now [batch, 2, 4]\n * ```\n *\n * @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'}\n */\nexport function repeatVector(args: RepeatVectorLayerArgs): Layer {\n  return new RepeatVector(args);\n}\n\n/**\n * Reshapes an input to a certain shape.\n *\n * ```js\n * const input = tf.input({shape: [4, 3]});\n * const reshapeLayer = tf.layers.reshape({targetShape: [2, 6]});\n * // Inspect the inferred output shape of the Reshape layer, which\n * // equals `[null, 2, 6]`. (The 1st dimension is the undermined batch size.)\n * console.log(JSON.stringify(reshapeLayer.apply(input).shape));\n * ```\n *\n * Input shape:\n *   Arbitrary, although all dimensions in the input shape must be fixed.\n *   Use the configuration `inputShape` when using this layer as the\n *   first layer in a model.\n *\n *\n * Output shape:\n *   [batchSize, targetShape[0], targetShape[1], ...,\n *    targetShape[targetShape.length - 1]].\n *\n * @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'}\n */\nexport function reshape(args: ReshapeLayerArgs): Layer {\n  return new Reshape(args);\n}\n\n/**\n * Permutes the dimensions of the input according to a given pattern.\n *\n * Useful for, e.g., connecting RNNs and convnets together.\n *\n * Example:\n *\n * ```js\n * const model = tf.sequential();\n * model.add(tf.layers.permute({\n *   dims: [2, 1],\n *   inputShape: [10, 64]\n * }));\n * console.log(model.outputShape);\n * // Now model's output shape is [null, 64, 10], where null is the\n * // unpermuted sample (batch) dimension.\n * ```\n *\n * Input shape:\n *   Arbitrary. Use the configuration field `inputShape` when using this\n *   layer as the first layer in a model.\n *\n * Output shape:\n *   Same rank as the input shape, but with the dimensions re-ordered (i.e.,\n *   permuted) according to the `dims` configuration of this layer.\n *\n * @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'}\n */\nexport function permute(args: PermuteLayerArgs): Layer {\n  return new Permute(args);\n}\n\n/**\n * Maps positive integers (indices) into dense vectors of fixed size.\n * eg. [[4], [20]] -> [[0.25, 0.1], [0.6, -0.2]]\n *\n * **Input shape:** 2D tensor with shape: `[batchSize, sequenceLength]`.\n *\n * **Output shape:** 3D tensor with shape: `[batchSize, sequenceLength,\n * outputDim]`.\n *\n * @doc {heading: 'Layers', subheading: 'Basic', namespace: 'layers'}\n */\nexport function embedding(args: EmbeddingLayerArgs): Layer {\n  return new Embedding(args);\n}\n\n// Merge Layers.\n\n/**\n * Layer that performs element-wise addition on an `Array` of inputs.\n *\n * It takes as input a list of tensors, all of the same shape, and returns a\n * single tensor (also of the same shape). The inputs are specified as an\n * `Array` when the `apply` method of the `Add` layer instance is called. For\n * example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const addLayer = tf.layers.add();\n * const sum = addLayer.apply([input1, input2]);\n * console.log(JSON.stringify(sum.shape));\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'}\n */\nexport function add(args?: LayerArgs): Layer {\n  return new Add(args);\n}\n\n/**\n * Layer that performs element-wise averaging on an `Array` of inputs.\n *\n * It takes as input a list of tensors, all of the same shape, and returns a\n * single tensor (also of the same shape). For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const averageLayer = tf.layers.average();\n * const average = averageLayer.apply([input1, input2]);\n * console.log(JSON.stringify(average.shape));\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'}\n */\nexport function average(args?: LayerArgs): Layer {\n  return new Average(args);\n}\n\n/**\n * Layer that concatenates an `Array` of inputs.\n *\n * It takes a list of tensors, all of the same shape except for the\n * concatenation axis, and returns a single tensor, the concatenation\n * of all inputs. For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 3]});\n * const concatLayer = tf.layers.concatenate();\n * const output = concatLayer.apply([input1, input2]);\n * console.log(JSON.stringify(output.shape));\n * // You get [null, 2, 5], with the first dimension as the undetermined batch\n * // dimension. The last dimension (5) is the result of concatenating the\n * // last dimensions of the inputs (2 and 3).\n * ```\n *\n * @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'}\n */\nexport function concatenate(args?: ConcatenateLayerArgs): Layer {\n  return new Concatenate(args);\n}\n\n/**\n * Layer that computes the element-wise maximum an `Array` of inputs.\n *\n * It takes as input a list of tensors, all of the same shape and returns a\n * single tensor (also of the same shape). For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const maxLayer = tf.layers.maximum();\n * const max = maxLayer.apply([input1, input2]);\n * console.log(JSON.stringify(max.shape));\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'}\n */\nexport function maximum(args?: LayerArgs): Layer {\n  return new Maximum(args);\n}\n\n/**\n * Layer that computes the element-wise minimum of an `Array` of inputs.\n *\n * It takes as input a list of tensors, all of the same shape and returns a\n * single tensor (also of the same shape). For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const minLayer = tf.layers.minimum();\n * const min = minLayer.apply([input1, input2]);\n * console.log(JSON.stringify(min.shape));\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'}\n */\nexport function minimum(args?: LayerArgs): Layer {\n  return new Minimum(args);\n}\n\n/**\n * Layer that multiplies (element-wise) an `Array` of inputs.\n *\n * It takes as input an Array of tensors, all of the same\n * shape, and returns a single tensor (also of the same shape).\n * For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const input3 = tf.input({shape: [2, 2]});\n * const multiplyLayer = tf.layers.multiply();\n * const product = multiplyLayer.apply([input1, input2, input3]);\n * console.log(product.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n *\n * @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'}\n */\nexport function multiply(args?: LayerArgs): Layer {\n  return new Multiply(args);\n}\n\n/**\n * Layer that computes a dot product between samples in two tensors.\n *\n * E.g., if applied to a list of two tensors `a` and `b` both of shape\n * `[batchSize, n]`, the output will be a tensor of shape `[batchSize, 1]`,\n * where each entry at index `[i, 0]` will be the dot product between\n * `a[i, :]` and `b[i, :]`.\n *\n * Example:\n *\n * ```js\n * const dotLayer = tf.layers.dot({axes: -1});\n * const x1 = tf.tensor2d([[10, 20], [30, 40]]);\n * const x2 = tf.tensor2d([[-1, -2], [-3, -4]]);\n *\n * // Invoke the layer's apply() method in eager (imperative) mode.\n * const y = dotLayer.apply([x1, x2]);\n * y.print();\n * ```\n *\n * @doc {heading: 'Layers', subheading: 'Merge', namespace: 'layers'}\n */\nexport function dot(args: DotLayerArgs): Layer {\n  return new Dot(args);\n}\n\n// Normalization Layers.\n\n/**\n * Batch normalization layer (Ioffe and Szegedy, 2014).\n *\n * Normalize the activations of the previous layer at each batch,\n * i.e. applies a transformation that maintains the mean activation\n * close to 0 and the activation standard deviation close to 1.\n *\n * Input shape:\n *   Arbitrary. Use the keyword argument `inputShape` (Array of integers, does\n *   not include the sample axis) when calling the constructor of this class,\n *   if this layer is used as a first layer in a model.\n *\n * Output shape:\n *   Same shape as input.\n *\n * References:\n *   - [Batch Normalization: Accelerating Deep Network Training by Reducing\n * Internal Covariate Shift](https://arxiv.org/abs/1502.03167)\n *\n * @doc {heading: 'Layers', subheading: 'Normalization', namespace: 'layers'}\n */\nexport function batchNormalization(args?: BatchNormalizationLayerArgs): Layer {\n  return new BatchNormalization(args);\n}\n\n/**\n * Layer-normalization layer (Ba et al., 2016).\n *\n * Normalizes the activations of the previous layer for each given example in a\n * batch independently, instead of across a batch like in `batchNormalization`.\n * In other words, this layer applies a transformation that maintanis the mean\n * activation within each example close to0 and activation variance close to 1.\n *\n * Input shape:\n *   Arbitrary. Use the argument `inputShape` when using this layer as the first\n *   layer in a model.\n *\n * Output shape:\n *   Same as input.\n *\n * References:\n *   - [Layer Normalization](https://arxiv.org/abs/1607.06450)\n *\n * @doc {heading: 'Layers', subheading: 'Normalization', namespace: 'layers'}\n */\nexport function layerNormalization(args?: LayerNormalizationLayerArgs): Layer {\n  return new LayerNormalization(args);\n}\n\n// Padding Layers.\n\n/**\n * Zero-padding layer for 2D input (e.g., image).\n *\n * This layer can add rows and columns of zeros\n * at the top, bottom, left and right side of an image tensor.\n *\n * Input shape:\n *   4D tensor with shape:\n *   - If `dataFormat` is `\"channelsLast\"`:\n *     `[batch, rows, cols, channels]`\n *   - If `data_format` is `\"channels_first\"`:\n *     `[batch, channels, rows, cols]`.\n *\n * Output shape:\n *   4D with shape:\n *   - If `dataFormat` is `\"channelsLast\"`:\n *     `[batch, paddedRows, paddedCols, channels]`\n *    - If `dataFormat` is `\"channelsFirst\"`:\n *     `[batch, channels, paddedRows, paddedCols]`.\n *\n * @doc {heading: 'Layers', subheading: 'Padding', namespace: 'layers'}\n */\nexport function zeroPadding2d(args?: ZeroPadding2DLayerArgs): Layer {\n  return new ZeroPadding2D(args);\n}\n\n// Pooling Layers.\n\n/**\n * Average pooling operation for spatial data.\n *\n * Input shape: `[batchSize, inLength, channels]`\n *\n * Output shape: `[batchSize, pooledLength, channels]`\n *\n * `tf.avgPool1d` is an alias.\n *\n * @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'}\n */\nexport function averagePooling1d(args: Pooling1DLayerArgs): Layer {\n  return new AveragePooling1D(args);\n}\nexport function avgPool1d(args: Pooling1DLayerArgs): Layer {\n  return averagePooling1d(args);\n}\n// For backwards compatibility.\n// See https://github.com/tensorflow/tfjs/issues/152\nexport function avgPooling1d(args: Pooling1DLayerArgs): Layer {\n  return averagePooling1d(args);\n}\n\n/**\n * Average pooling operation for spatial data.\n *\n * Input shape:\n *  - If `dataFormat === CHANNEL_LAST`:\n *      4D tensor with shape:\n *      `[batchSize, rows, cols, channels]`\n *  - If `dataFormat === CHANNEL_FIRST`:\n *      4D tensor with shape:\n *      `[batchSize, channels, rows, cols]`\n *\n * Output shape\n *  - If `dataFormat === CHANNEL_LAST`:\n *      4D tensor with shape:\n *      `[batchSize, pooleRows, pooledCols, channels]`\n *  - If `dataFormat === CHANNEL_FIRST`:\n *      4D tensor with shape:\n *      `[batchSize, channels, pooleRows, pooledCols]`\n *\n * `tf.avgPool2d` is an alias.\n *\n * @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'}\n */\nexport function averagePooling2d(args: Pooling2DLayerArgs): Layer {\n  return new AveragePooling2D(args);\n}\nexport function avgPool2d(args: Pooling2DLayerArgs): Layer {\n  return averagePooling2d(args);\n}\n// For backwards compatibility.\n// See https://github.com/tensorflow/tfjs/issues/152\nexport function avgPooling2d(args: Pooling2DLayerArgs): Layer {\n  return averagePooling2d(args);\n}\n\n/**\n * Average pooling operation for 3D data.\n *\n * Input shape\n *   - If `dataFormat === channelsLast`:\n *       5D tensor with shape:\n *       `[batchSize, depths, rows, cols, channels]`\n *   - If `dataFormat === channelsFirst`:\n *      4D tensor with shape:\n *       `[batchSize, channels, depths, rows, cols]`\n *\n * Output shape\n *   - If `dataFormat=channelsLast`:\n *       5D tensor with shape:\n *       `[batchSize, pooledDepths, pooledRows, pooledCols, channels]`\n *   - If `dataFormat=channelsFirst`:\n *       5D tensor with shape:\n *       `[batchSize, channels, pooledDepths, pooledRows, pooledCols]`\n *\n * @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'}\n */\nexport function averagePooling3d(args: Pooling3DLayerArgs): Layer {\n  return new AveragePooling3D(args);\n}\nexport function avgPool3d(args: Pooling3DLayerArgs): Layer {\n  return averagePooling3d(args);\n}\n// For backwards compatibility.\n// See https://github.com/tensorflow/tfjs/issues/152\nexport function avgPooling3d(args: Pooling3DLayerArgs): Layer {\n  return averagePooling3d(args);\n}\n\n/**\n * Global average pooling operation for temporal data.\n *\n * Input Shape: 3D tensor with shape: `[batchSize, steps, features]`.\n *\n * Output Shape:2D tensor with shape: `[batchSize, features]`.\n *\n * @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'}\n */\nexport function globalAveragePooling1d(args?: LayerArgs): Layer {\n  return new GlobalAveragePooling1D(args);\n}\n\n/**\n * Global average pooling operation for spatial data.\n *\n * Input shape:\n *   - If `dataFormat` is `CHANNEL_LAST`:\n *       4D tensor with shape: `[batchSize, rows, cols, channels]`.\n *   - If `dataFormat` is `CHANNEL_FIRST`:\n *       4D tensor with shape: `[batchSize, channels, rows, cols]`.\n *\n * Output shape:\n *   2D tensor with shape: `[batchSize, channels]`.\n *\n * @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'}\n */\nexport function globalAveragePooling2d(args: GlobalPooling2DLayerArgs): Layer {\n  return new GlobalAveragePooling2D(args);\n}\n\n/**\n * Global max pooling operation for temporal data.\n *\n * Input Shape: 3D tensor with shape: `[batchSize, steps, features]`.\n *\n * Output Shape:2D tensor with shape: `[batchSize, features]`.\n *\n * @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'}\n */\nexport function globalMaxPooling1d(args?: LayerArgs): Layer {\n  return new GlobalMaxPooling1D(args);\n}\n\n/**\n * Global max pooling operation for spatial data.\n *\n * Input shape:\n *   - If `dataFormat` is `CHANNEL_LAST`:\n *       4D tensor with shape: `[batchSize, rows, cols, channels]`.\n *   - If `dataFormat` is `CHANNEL_FIRST`:\n *       4D tensor with shape: `[batchSize, channels, rows, cols]`.\n *\n * Output shape:\n *   2D tensor with shape: `[batchSize, channels]`.\n *\n * @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'}\n */\nexport function globalMaxPooling2d(args: GlobalPooling2DLayerArgs): Layer {\n  return new GlobalMaxPooling2D(args);\n}\n\n/**\n * Max pooling operation for temporal data.\n *\n * Input shape:  `[batchSize, inLength, channels]`\n *\n * Output shape: `[batchSize, pooledLength, channels]`\n *\n * @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'}\n */\nexport function maxPooling1d(args: Pooling1DLayerArgs): Layer {\n  return new MaxPooling1D(args);\n}\n\n/**\n * Max pooling operation for spatial data.\n *\n * Input shape\n *   - If `dataFormat === CHANNEL_LAST`:\n *       4D tensor with shape:\n *       `[batchSize, rows, cols, channels]`\n *   - If `dataFormat === CHANNEL_FIRST`:\n *      4D tensor with shape:\n *       `[batchSize, channels, rows, cols]`\n *\n * Output shape\n *   - If `dataFormat=CHANNEL_LAST`:\n *       4D tensor with shape:\n *       `[batchSize, pooleRows, pooledCols, channels]`\n *   - If `dataFormat=CHANNEL_FIRST`:\n *       4D tensor with shape:\n *       `[batchSize, channels, pooleRows, pooledCols]`\n *\n * @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'}\n */\nexport function maxPooling2d(args: Pooling2DLayerArgs): Layer {\n  return new MaxPooling2D(args);\n}\n\n/**\n * Max pooling operation for 3D data.\n *\n * Input shape\n *   - If `dataFormat === channelsLast`:\n *       5D tensor with shape:\n *       `[batchSize, depths, rows, cols, channels]`\n *   - If `dataFormat === channelsFirst`:\n *      5D tensor with shape:\n *       `[batchSize, channels, depths, rows, cols]`\n *\n * Output shape\n *   - If `dataFormat=channelsLast`:\n *       5D tensor with shape:\n *       `[batchSize, pooledDepths, pooledRows, pooledCols, channels]`\n *   - If `dataFormat=channelsFirst`:\n *       5D tensor with shape:\n *       `[batchSize, channels, pooledDepths, pooledRows, pooledCols]`\n *\n * @doc {heading: 'Layers', subheading: 'Pooling', namespace: 'layers'}\n */\nexport function maxPooling3d(args: Pooling3DLayerArgs): Layer {\n  return new MaxPooling3D(args);\n}\n\n// Recurrent Layers.\n\n/**\n * Gated Recurrent Unit - Cho et al. 2014.\n *\n * This is an `RNN` layer consisting of one `GRUCell`. However, unlike\n * the underlying `GRUCell`, the `apply` method of `SimpleRNN` operates\n * on a sequence of inputs. The shape of the input (not including the first,\n * batch dimension) needs to be at least 2-D, with the first dimension being\n * time steps. For example:\n *\n * ```js\n * const rnn = tf.layers.gru({units: 8, returnSequences: true});\n *\n * // Create an input with 10 time steps.\n * const input = tf.input({shape: [10, 20]});\n * const output = rnn.apply(input);\n *\n * console.log(JSON.stringify(output.shape));\n * // [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the\n * // same as the sequence length of `input`, due to `returnSequences`: `true`;\n * // 3rd dimension is the `GRUCell`'s number of units.\n *\n * @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'}\n */\nexport function gru(args: GRULayerArgs): Layer {\n  return new GRU(args);\n}\n\n/**\n * Cell class for `GRU`.\n *\n * `GRUCell` is distinct from the `RNN` subclass `GRU` in that its\n * `apply` method takes the input data of only a single time step and returns\n * the cell's output at the time step, while `GRU` takes the input data\n * over a number of time steps. For example:\n *\n * ```js\n * const cell = tf.layers.gruCell({units: 2});\n * const input = tf.input({shape: [10]});\n * const output = cell.apply(input);\n *\n * console.log(JSON.stringify(output.shape));\n * // [null, 10]: This is the cell's output at a single time step. The 1st\n * // dimension is the unknown batch size.\n * ```\n *\n * Instance(s) of `GRUCell` can be used to construct `RNN` layers. The\n * most typical use of this workflow is to combine a number of cells into a\n * stacked RNN cell (i.e., `StackedRNNCell` internally) and use it to create an\n * RNN. For example:\n *\n * ```js\n * const cells = [\n *   tf.layers.gruCell({units: 4}),\n *   tf.layers.gruCell({units: 8}),\n * ];\n * const rnn = tf.layers.rnn({cell: cells, returnSequences: true});\n *\n * // Create an input with 10 time steps and a length-20 vector at each step.\n * const input = tf.input({shape: [10, 20]});\n * const output = rnn.apply(input);\n *\n * console.log(JSON.stringify(output.shape));\n * // [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the\n * // same as the sequence length of `input`, due to `returnSequences`: `true`;\n * // 3rd dimension is the last `gruCell`'s number of units.\n * ```\n *\n * To create an `RNN` consisting of only *one* `GRUCell`, use the\n * `tf.layers.gru`.\n *\n * @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'}\n */\nexport function gruCell(args: GRUCellLayerArgs): RNNCell {\n  return new GRUCell(args);\n}\n\n/**\n * Long-Short Term Memory layer - Hochreiter 1997.\n *\n * This is an `RNN` layer consisting of one `LSTMCell`. However, unlike\n * the underlying `LSTMCell`, the `apply` method of `LSTM` operates\n * on a sequence of inputs. The shape of the input (not including the first,\n * batch dimension) needs to be at least 2-D, with the first dimension being\n * time steps. For example:\n *\n * ```js\n * const lstm = tf.layers.lstm({units: 8, returnSequences: true});\n *\n * // Create an input with 10 time steps.\n * const input = tf.input({shape: [10, 20]});\n * const output = lstm.apply(input);\n *\n * console.log(JSON.stringify(output.shape));\n * // [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the\n * // same as the sequence length of `input`, due to `returnSequences`: `true`;\n * // 3rd dimension is the `LSTMCell`'s number of units.\n *\n * @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'}\n */\nexport function lstm(args: LSTMLayerArgs): Layer {\n  return new LSTM(args);\n}\n\n/**\n * Cell class for `LSTM`.\n *\n * `LSTMCell` is distinct from the `RNN` subclass `LSTM` in that its\n * `apply` method takes the input data of only a single time step and returns\n * the cell's output at the time step, while `LSTM` takes the input data\n * over a number of time steps. For example:\n *\n * ```js\n * const cell = tf.layers.lstmCell({units: 2});\n * const input = tf.input({shape: [10]});\n * const output = cell.apply(input);\n *\n * console.log(JSON.stringify(output.shape));\n * // [null, 10]: This is the cell's output at a single time step. The 1st\n * // dimension is the unknown batch size.\n * ```\n *\n * Instance(s) of `LSTMCell` can be used to construct `RNN` layers. The\n * most typical use of this workflow is to combine a number of cells into a\n * stacked RNN cell (i.e., `StackedRNNCell` internally) and use it to create an\n * RNN. For example:\n *\n * ```js\n * const cells = [\n *   tf.layers.lstmCell({units: 4}),\n *   tf.layers.lstmCell({units: 8}),\n * ];\n * const rnn = tf.layers.rnn({cell: cells, returnSequences: true});\n *\n * // Create an input with 10 time steps and a length-20 vector at each step.\n * const input = tf.input({shape: [10, 20]});\n * const output = rnn.apply(input);\n *\n * console.log(JSON.stringify(output.shape));\n * // [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the\n * // same as the sequence length of `input`, due to `returnSequences`: `true`;\n * // 3rd dimension is the last `lstmCell`'s number of units.\n * ```\n *\n * To create an `RNN` consisting of only *one* `LSTMCell`, use the\n * `tf.layers.lstm`.\n *\n * @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'}\n */\nexport function lstmCell(args: LSTMCellLayerArgs): RNNCell {\n  return new LSTMCell(args);\n}\n\n/**\n * Fully-connected RNN where the output is to be fed back to input.\n *\n * This is an `RNN` layer consisting of one `SimpleRNNCell`. However, unlike\n * the underlying `SimpleRNNCell`, the `apply` method of `SimpleRNN` operates\n * on a sequence of inputs. The shape of the input (not including the first,\n * batch dimension) needs to be at least 2-D, with the first dimension being\n * time steps. For example:\n *\n * ```js\n * const rnn = tf.layers.simpleRNN({units: 8, returnSequences: true});\n *\n * // Create an input with 10 time steps.\n * const input = tf.input({shape: [10, 20]});\n * const output = rnn.apply(input);\n *\n * console.log(JSON.stringify(output.shape));\n * // [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the\n * // same as the sequence length of `input`, due to `returnSequences`: `true`;\n * // 3rd dimension is the `SimpleRNNCell`'s number of units.\n * ```\n *\n * @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'}\n */\nexport function simpleRNN(args: SimpleRNNLayerArgs): Layer {\n  return new SimpleRNN(args);\n}\n\n/**\n * Cell class for `SimpleRNN`.\n *\n * `SimpleRNNCell` is distinct from the `RNN` subclass `SimpleRNN` in that its\n * `apply` method takes the input data of only a single time step and returns\n * the cell's output at the time step, while `SimpleRNN` takes the input data\n * over a number of time steps. For example:\n *\n * ```js\n * const cell = tf.layers.simpleRNNCell({units: 2});\n * const input = tf.input({shape: [10]});\n * const output = cell.apply(input);\n *\n * console.log(JSON.stringify(output.shape));\n * // [null, 10]: This is the cell's output at a single time step. The 1st\n * // dimension is the unknown batch size.\n * ```\n *\n * Instance(s) of `SimpleRNNCell` can be used to construct `RNN` layers. The\n * most typical use of this workflow is to combine a number of cells into a\n * stacked RNN cell (i.e., `StackedRNNCell` internally) and use it to create an\n * RNN. For example:\n *\n * ```js\n * const cells = [\n *   tf.layers.simpleRNNCell({units: 4}),\n *   tf.layers.simpleRNNCell({units: 8}),\n * ];\n * const rnn = tf.layers.rnn({cell: cells, returnSequences: true});\n *\n * // Create an input with 10 time steps and a length-20 vector at each step.\n * const input = tf.input({shape: [10, 20]});\n * const output = rnn.apply(input);\n *\n * console.log(JSON.stringify(output.shape));\n * // [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the\n * // same as the sequence length of `input`, due to `returnSequences`: `true`;\n * // 3rd dimension is the last `SimpleRNNCell`'s number of units.\n * ```\n *\n * To create an `RNN` consisting of only *one* `SimpleRNNCell`, use the\n * `tf.layers.simpleRNN`.\n *\n * @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'}\n */\nexport function simpleRNNCell(args: SimpleRNNCellLayerArgs): RNNCell {\n  return new SimpleRNNCell(args);\n}\n\n/**\n * Convolutional LSTM layer - Xingjian Shi 2015.\n *\n * This is an `ConvRNN2D` layer consisting of one `ConvLSTM2DCell`. However,\n * unlike the underlying `ConvLSTM2DCell`, the `apply` method of `ConvLSTM2D`\n * operates on a sequence of inputs. The shape of the input (not including the\n * first, batch dimension) needs to be 4-D, with the first dimension being time\n * steps. For example:\n *\n * ```js\n * const filters = 3;\n * const kernelSize = 3;\n *\n * const batchSize = 4;\n * const sequenceLength = 2;\n * const size = 5;\n * const channels = 3;\n *\n * const inputShape = [batchSize, sequenceLength, size, size, channels];\n * const input = tf.ones(inputShape);\n *\n * const layer = tf.layers.convLstm2d({filters, kernelSize});\n *\n * const output = layer.apply(input);\n * ```\n */\n/** @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'} */\nexport function convLstm2d(args: ConvLSTM2DArgs): ConvLSTM2D {\n  return new ConvLSTM2D(args);\n}\n\n/**\n * Cell class for `ConvLSTM2D`.\n *\n * `ConvLSTM2DCell` is distinct from the `ConvRNN2D` subclass `ConvLSTM2D` in\n * that its `call` method takes the input data of only a single time step and\n * returns the cell's output at the time step, while `ConvLSTM2D` takes the\n * input data over a number of time steps. For example:\n *\n * ```js\n * const filters = 3;\n * const kernelSize = 3;\n *\n * const sequenceLength = 1;\n * const size = 5;\n * const channels = 3;\n *\n * const inputShape = [sequenceLength, size, size, channels];\n * const input = tf.ones(inputShape);\n *\n * const cell = tf.layers.convLstm2dCell({filters, kernelSize});\n *\n * cell.build(input.shape);\n *\n * const outputSize = size - kernelSize + 1;\n * const outShape = [sequenceLength, outputSize, outputSize, filters];\n *\n * const initialH = tf.zeros(outShape);\n * const initialC = tf.zeros(outShape);\n *\n * const [o, h, c] = cell.call([input, initialH, initialC], {});\n * ```\n */\n/** @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'} */\nexport function convLstm2dCell(args: ConvLSTM2DCellArgs): ConvLSTM2DCell {\n  return new ConvLSTM2DCell(args);\n}\n\n/**\n * Base class for recurrent layers.\n *\n * Input shape:\n *   3D tensor with shape `[batchSize, timeSteps, inputDim]`.\n *\n * Output shape:\n *   - if `returnState`, an Array of tensors (i.e., `tf.Tensor`s). The first\n *     tensor is the output. The remaining tensors are the states at the\n *     last time step, each with shape `[batchSize, units]`.\n *   - if `returnSequences`, the output will have shape\n *     `[batchSize, timeSteps, units]`.\n *   - else, the output will have shape `[batchSize, units]`.\n *\n * Masking:\n *   This layer supports masking for input data with a variable number\n *   of timesteps. To introduce masks to your data,\n *   use an embedding layer with the `mask_zero` parameter\n *   set to `True`.\n *\n * Notes on using statefulness in RNNs:\n *   You can set RNN layers to be 'stateful', which means that the states\n *   computed for the samples in one batch will be reused as initial states\n *   for the samples in the next batch. This assumes a one-to-one mapping\n *   between samples in different successive batches.\n *\n *   To enable statefulness:\n *     - specify `stateful: true` in the layer constructor.\n *     - specify a fixed batch size for your model, by passing\n *       if sequential model:\n *         `batchInputShape=[...]` to the first layer in your model.\n *       else for functional model with 1 or more Input layers:\n *         `batchShape=[...]` to all the first layers in your model.\n *       This is the expected shape of your inputs *including the batch size*.\n *       It should be a tuple of integers, e.g. `(32, 10, 100)`.\n *     - specify `shuffle=False` when calling fit().\n *\n *   To reset the states of your model, call `.resetStates()` on either\n *   a specific layer, or on your entire model.\n *\n * Note on specifying the initial state of RNNs\n *   You can specify the initial state of RNN layers symbolically by\n *   calling them with the option `initialState`. The value of\n *   `initialState` should be a tensor or list of tensors representing\n *   the initial state of the RNN layer.\n *\n *   You can specify the initial state of RNN layers numerically by\n *   calling `resetStates` with the keyword argument `states`. The value of\n *   `states` should be a numpy array or list of numpy arrays representing\n *   the initial state of the RNN layer.\n *\n * Note on passing external constants to RNNs\n *   You can pass \"external\" constants to the cell using the `constants`\n *   keyword argument of `RNN.call` method. This requires that the `cell.call`\n *   method accepts the same keyword argument `constants`. Such constants\n *   can be used to conditon the cell transformation on additional static inputs\n *   (not changing over time), a.k.a an attention mechanism.\n *\n * @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'}\n */\nexport function rnn(args: RNNLayerArgs): Layer {\n  return new RNN(args);\n}\n\n/**\n * Wrapper allowing a stack of RNN cells to behave as a single cell.\n *\n * Used to implement efficient stacked RNNs.\n *\n * @doc {heading: 'Layers', subheading: 'Recurrent', namespace: 'layers'}\n */\nexport function stackedRNNCells(args: StackedRNNCellsArgs): RNNCell {\n  return new StackedRNNCells(args);\n}\n\n// Wrapper Layers.\n\n/** @doc {heading: 'Layers', subheading: 'Wrapper', namespace: 'layers'} */\nexport function bidirectional(args: BidirectionalLayerArgs): Bidirectional {\n  return new Bidirectional(args);\n}\n\n/**\n * This wrapper applies a layer to every temporal slice of an input.\n *\n * The input should be at least 3D,  and the dimension of the index `1` will be\n * considered to be the temporal dimension.\n *\n * Consider a batch of 32 samples, where each sample is a sequence of 10 vectors\n * of 16 dimensions. The batch input shape of the layer is then `[32,  10,\n * 16]`, and the `inputShape`, not including the sample dimension, is\n * `[10, 16]`.\n *\n * You can then use `TimeDistributed` to apply a `Dense` layer to each of the 10\n * timesteps, independently:\n *\n * ```js\n * const model = tf.sequential();\n * model.add(tf.layers.timeDistributed({\n *   layer: tf.layers.dense({units: 8}),\n *   inputShape: [10, 16],\n * }));\n *\n * // Now model.outputShape = [null, 10, 8].\n * // The output will then have shape `[32, 10, 8]`.\n *\n * // In subsequent layers, there is no need for `inputShape`:\n * model.add(tf.layers.timeDistributed({layer: tf.layers.dense({units: 32})}));\n * console.log(JSON.stringify(model.outputs[0].shape));\n * // Now model.outputShape = [null, 10, 32].\n * ```\n *\n * The output will then have shape `[32, 10, 32]`.\n *\n * `TimeDistributed` can be used with arbitrary layers, not just `Dense`, for\n * instance a `Conv2D` layer.\n *\n * ```js\n * const model = tf.sequential();\n * model.add(tf.layers.timeDistributed({\n *   layer: tf.layers.conv2d({filters: 64, kernelSize: [3, 3]}),\n *   inputShape: [10, 299, 299, 3],\n * }));\n * console.log(JSON.stringify(model.outputs[0].shape));\n * ```\n *\n * @doc {heading: 'Layers', subheading: 'Wrapper', namespace: 'layers'}\n */\nexport function timeDistributed(args: WrapperLayerArgs): Layer {\n  return new TimeDistributed(args);\n}\n\n// Aliases for pooling.\nexport const globalMaxPool1d = globalMaxPooling1d;\nexport const globalMaxPool2d = globalMaxPooling2d;\nexport const maxPool1d = maxPooling1d;\nexport const maxPool2d = maxPooling2d;\n\nexport {Layer, RNN, RNNCell, input /* alias for tf.input */};\n\n/**\n * Apply additive zero-centered Gaussian noise.\n *\n * As it is a regularization layer, it is only active at training time.\n *\n * This is useful to mitigate overfitting\n * (you could see it as a form of random data augmentation).\n * Gaussian Noise (GS) is a natural choice as corruption process\n * for real valued inputs.\n *\n * # Arguments\n *     stddev: float, standard deviation of the noise distribution.\n *\n * # Input shape\n *         Arbitrary. Use the keyword argument `input_shape`\n *         (tuple of integers, does not include the samples axis)\n *         when using this layer as the first layer in a model.\n *\n * # Output shape\n *         Same shape as input.\n *\n * @doc {heading: 'Layers', subheading: 'Noise', namespace: 'layers'}\n */\nexport function gaussianNoise(args: GaussianNoiseArgs): GaussianNoise {\n  return new GaussianNoise(args);\n}\n\n/**\n * Apply multiplicative 1-centered Gaussian noise.\n *\n * As it is a regularization layer, it is only active at training time.\n *\n * Arguments:\n *   - `rate`: float, drop probability (as with `Dropout`).\n *     The multiplicative noise will have\n *     standard deviation `sqrt(rate / (1 - rate))`.\n *\n * Input shape:\n *   Arbitrary. Use the keyword argument `inputShape`\n *   (tuple of integers, does not include the samples axis)\n *   when using this layer as the first layer in a model.\n *\n * Output shape:\n *   Same shape as input.\n *\n * References:\n *   - [Dropout: A Simple Way to Prevent Neural Networks from Overfitting](\n *      http://www.cs.toronto.edu/~rsalakhu/papers/srivastava14a.pdf)\n *\n * @doc {heading: 'Layers', subheading: 'Noise', namespace: 'layers'}\n */\nexport function gaussianDropout(args: GaussianDropoutArgs): GaussianDropout {\n  return new GaussianDropout(args);\n}\n\n/**\n * Applies Alpha Dropout to the input.\n *\n * As it is a regularization layer, it is only active at training time.\n *\n * Alpha Dropout is a `Dropout` that keeps mean and variance of inputs\n * to their original values, in order to ensure the self-normalizing property\n * even after this dropout.\n * Alpha Dropout fits well to Scaled Exponential Linear Units\n * by randomly setting activations to the negative saturation value.\n *\n * Arguments:\n *   - `rate`: float, drop probability (as with `Dropout`).\n *     The multiplicative noise will have\n *     standard deviation `sqrt(rate / (1 - rate))`.\n *   - `noise_shape`: A 1-D `Tensor` of type `int32`, representing the\n *     shape for randomly generated keep/drop flags.\n *\n * Input shape:\n *   Arbitrary. Use the keyword argument `inputShape`\n *   (tuple of integers, does not include the samples axis)\n *   when using this layer as the first layer in a model.\n *\n * Output shape:\n *   Same shape as input.\n *\n * References:\n *   - [Self-Normalizing Neural Networks](https://arxiv.org/abs/1706.02515)\n *\n * @doc {heading: 'Layers', subheading: 'Noise', namespace: 'layers'}\n */\nexport function alphaDropout(args: AlphaDropoutArgs): AlphaDropout {\n  return new AlphaDropout(args);\n}\n\n/**\n * Masks a sequence by using a mask value to skip timesteps.\n *\n * If all features for a given sample timestep are equal to `mask_value`,\n * then the sample timestep will be masked (skipped) in all downstream layers\n * (as long as they support masking).\n *\n * If any downstream layer does not support masking yet receives such\n * an input mask, an exception will be raised.\n *\n * Arguments:\n *   - `maskValue`: Either None or mask value to skip.\n *\n * Input shape:\n *   Arbitrary. Use the keyword argument `inputShape`\n *   (tuple of integers, does not include the samples axis)\n *   when using this layer as the first layer in a model.\n *\n * Output shape:\n *   Same shape as input.\n *\n * @doc {heading: 'Layers', subheading: 'Mask', namespace: 'layers'}\n */\nexport function masking(args?: MaskingArgs): Layer {\n  return new Masking(args);\n}\n"},"lineCount":null}},"error":null,"hash":"6f684cf9d357b8d8bcd4833c0b6a7f48","cacheData":{"env":{}}}