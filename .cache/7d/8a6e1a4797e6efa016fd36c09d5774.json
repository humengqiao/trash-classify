{"id":"L16l","dependencies":[{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/package.json","includedInParent":true,"mtime":1609563696417},{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-data/package.json","includedInParent":true,"mtime":499162500000},{"name":"@tensorflow/tfjs-core","loc":{"line":18,"column":68},"parent":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-data/dist/iterators/webcam_iterator.js","resolved":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-core/dist/index.js"},{"name":"./lazy_iterator","loc":{"line":19,"column":29},"parent":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-data/dist/iterators/webcam_iterator.js","resolved":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-data/dist/iterators/lazy_iterator.js"}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.WebcamIterator=void 0;var e=require(\"@tensorflow/tfjs-core\"),i=require(\"./lazy_iterator\");class t extends i.LazyIterator{constructor(i,t){if(super(),this.webcamVideoElement=i,this.webcamConfig=t,this.isClosed=!0,this.resize=!1,this.needToResize())if(this.resize=!0,this.cropSize=[this.webcamConfig.resizeHeight,this.webcamConfig.resizeWidth],this.cropBoxInd=(0,e.tensor1d)([0],\"int32\"),this.webcamConfig.centerCrop){const i=1*this.webcamConfig.resizeWidth/this.webcamVideoElement.width,t=1*this.webcamConfig.resizeHeight/this.webcamVideoElement.height,r=(1-i)/2,s=(1-t)/2,o=r+i,n=t+s;this.cropBox=(0,e.tensor2d)([s,r,n,o],[1,4])}else this.cropBox=(0,e.tensor2d)([0,0,1,1],[1,4])}summary(){return\"webcam\"}static async create(i,r={}){if((0,e.env)().get(\"IS_NODE\"))throw new Error(\"tf.data.webcam is only supported in browser environment.\");if(!i){if(i=document.createElement(\"video\"),!r.resizeWidth||!r.resizeHeight)throw new Error(\"Please provide webcam video element, or resizeWidth and resizeHeight to create a hidden video element.\");i.width=r.resizeWidth,i.height=r.resizeHeight}const s=new t(i,r);return await s.start(),s}async start(){this.webcamConfig.facingMode&&e.util.assert(\"user\"===this.webcamConfig.facingMode||\"environment\"===this.webcamConfig.facingMode,()=>`Invalid webcam facing mode: ${this.webcamConfig.facingMode}. `+\"Please provide 'user' or 'environment'\");try{this.stream=await navigator.mediaDevices.getUserMedia({video:{deviceId:this.webcamConfig.deviceId,facingMode:this.webcamConfig.facingMode?this.webcamConfig.facingMode:\"user\",width:this.webcamVideoElement.width,height:this.webcamVideoElement.height}})}catch(i){throw i.message=`Error thrown while initializing video stream: ${i.message}`,i}if(!this.stream)throw new Error(\"Could not obtain video from webcam.\");try{this.webcamVideoElement.srcObject=this.stream}catch(t){console.log(t),this.webcamVideoElement.src=window.URL.createObjectURL(this.stream)}return this.webcamVideoElement.play(),this.isClosed=!1,new Promise(e=>{this.webcamVideoElement.onloadedmetadata=(()=>{e()})})}async next(){if(this.isClosed)return{value:null,done:!0};let i;try{i=e.browser.fromPixels(this.webcamVideoElement)}catch(t){throw new Error(`Error thrown converting video to pixels: ${JSON.stringify(t)}`)}if(!this.resize)return{value:i,done:!1};try{return{value:this.cropAndResizeFrame(i),done:!1}}catch(t){throw new Error(`Error thrown cropping the video: ${t.message}`)}finally{i.dispose()}}needToResize(){return!(!this.webcamConfig.resizeWidth||!this.webcamConfig.resizeHeight||this.webcamVideoElement.width===this.webcamConfig.resizeWidth&&this.webcamVideoElement.height===this.webcamConfig.resizeHeight)}cropAndResizeFrame(i){return(0,e.tidy)(()=>{const t=i.toFloat().expandDims(0);let r;const s=(r=e.image.cropAndResize(t,this.cropBox,this.cropBoxInd,this.cropSize,\"bilinear\")).shape;return r.reshape(s.slice(1))})}async capture(){return(await this.next()).value}stop(){this.stream.getTracks().forEach(e=>e.stop());try{this.webcamVideoElement.srcObject=null}catch(e){console.log(e),this.webcamVideoElement.src=null}this.isClosed=!0}toArray(){throw new Error(\"Can not convert infinite video stream to array.\")}}exports.WebcamIterator=t;"},"sourceMaps":null,"error":null,"hash":"01a55f3628e2a99b286044bbf56a691c","cacheData":{"env":{}}}