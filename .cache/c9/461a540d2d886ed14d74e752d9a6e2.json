{"id":"zFW7","dependencies":[{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/package.json","includedInParent":true,"mtime":1609564004117},{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-core/package.json","includedInParent":true,"mtime":499162500000},{"name":"../flags","loc":{"line":21,"column":7},"parent":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-core/dist/io/browser_files.js","resolved":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-core/dist/flags.js"},{"name":"../environment","loc":{"line":22,"column":20},"parent":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-core/dist/io/browser_files.js","resolved":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-core/dist/environment.js"},{"name":"./io_utils","loc":{"line":23,"column":80},"parent":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-core/dist/io/browser_files.js","resolved":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-core/dist/io/io_utils.js"},{"name":"./router_registry","loc":{"line":24,"column":33},"parent":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-core/dist/io/browser_files.js","resolved":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-core/dist/io/router_registry.js"}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.browserDownloads=h,exports.browserFiles=c,exports.browserDownloadsRouter=exports.BrowserDownloads=void 0,require(\"../flags\");var e=require(\"../environment\"),t=require(\"./io_utils\"),o=require(\"./router_registry\");const r=\"model\",n=\".json\",s=\".weights.bin\";function i(e){return new Promise(e=>setTimeout(e)).then(e)}class a{constructor(t){if(!(0,e.env)().getBool(\"IS_BROWSER\"))throw new Error(\"browserDownloads() cannot proceed because the current environment is not a browser.\");t.startsWith(a.URL_SCHEME)&&(t=t.slice(a.URL_SCHEME.length)),null!=t&&0!==t.length||(t=r),this.modelTopologyFileName=t+n,this.weightDataFileName=t+s}async save(e){if(\"undefined\"==typeof document)throw new Error(\"Browser downloads are not supported in this environment since `document` is not present\");const o=window.URL.createObjectURL(new Blob([e.weightData],{type:\"application/octet-stream\"}));if(e.modelTopology instanceof ArrayBuffer)throw new Error(\"BrowserDownloads.save() does not support saving model topology in binary formats yet.\");{const r=[{paths:[\"./\"+this.weightDataFileName],weights:e.weightSpecs}],n={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:r},s=window.URL.createObjectURL(new Blob([JSON.stringify(n)],{type:\"application/json\"})),a=null==this.jsonAnchor?document.createElement(\"a\"):this.jsonAnchor;if(a.download=this.modelTopologyFileName,a.href=s,await i(()=>a.dispatchEvent(new MouseEvent(\"click\"))),null!=e.weightData){const e=null==this.weightDataAnchor?document.createElement(\"a\"):this.weightDataAnchor;e.download=this.weightDataFileName,e.href=o,await i(()=>e.dispatchEvent(new MouseEvent(\"click\")))}return{modelArtifactsInfo:(0,t.getModelArtifactsInfoForJSON)(e)}}}}exports.BrowserDownloads=a,a.URL_SCHEME=\"downloads://\";class l{constructor(e){if(null==e||e.length<1)throw new Error(\"When calling browserFiles, at least 1 file is required, \"+`but received ${e}`);this.files=e}async load(){const e=this.files[0],o=this.files.slice(1);return new Promise((r,n)=>{const s=new FileReader;s.onload=(s=>{const i=JSON.parse(s.target.result),a=i.modelTopology;if(null==a)return void n(new Error(`modelTopology field is missing from file ${e.name}`));0===o.length&&r({modelTopology:a});const l=i.weightsManifest;if(null==l)return void n(new Error(`weightManifest field is missing from file ${e.name}`));let d;try{d=this.checkManifestAndWeightFiles(l,o)}catch(w){return void n(w)}const h=[],c=[],f=[];l.forEach(e=>{e.paths.forEach(e=>{c.push(e),f.push(null)}),h.push(...e.weights)}),l.forEach(e=>{e.paths.forEach(e=>{const o=new FileReader;o.onload=(o=>{const n=o.target.result,s=c.indexOf(e);f[s]=n,-1===f.indexOf(null)&&r({modelTopology:a,weightSpecs:h,weightData:(0,t.concatenateArrayBuffers)(f),format:i.format,generatedBy:i.generatedBy,convertedBy:i.convertedBy,userDefinedMetadata:i.userDefinedMetadata})}),o.onerror=(t=>n(`Failed to weights data from file of path '${e}'.`)),o.readAsArrayBuffer(d[e])})})}),s.onerror=(t=>n(\"Failed to read model topology and weights manifest JSON \"+`from file '${e.name}'. BrowserFiles supports loading `+\"Keras-style tf.Model artifacts only.\")),s.readAsText(e)})}checkManifestAndWeightFiles(e,o){const r=[],n=o.map(e=>(0,t.basename)(e.name)),s={};for(const i of e)i.paths.forEach(e=>{const i=(0,t.basename)(e);if(-1!==r.indexOf(i))throw new Error(\"Duplicate file basename found in weights manifest: \"+`'${i}'`);if(r.push(i),-1===n.indexOf(i))throw new Error(`Weight file with basename '${i}' is not provided.`);s[e]=o[n.indexOf(i)]});if(r.length!==o.length)throw new Error(\"Mismatch in the number of files in weights manifest \"+`(${r.length}) and the number of weight files provided `+`(${o.length}).`);return s}}const d=t=>(0,e.env)().getBool(\"IS_BROWSER\")&&!Array.isArray(t)&&t.startsWith(a.URL_SCHEME)?h(t.slice(a.URL_SCHEME.length)):null;function h(e=\"model\"){return new a(e)}function c(e){return new l(e)}exports.browserDownloadsRouter=d,o.IORouterRegistry.registerSaveRouter(d);"},"sourceMaps":null,"error":null,"hash":"40afdbc636c304309a39a727211d25e7","cacheData":{"env":{}}}