{"id":"lCs9","dependencies":[{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/package.json","includedInParent":true,"mtime":1609563696417},{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-backend-cpu/package.json","includedInParent":true,"mtime":499162500000},{"name":"@tensorflow/tfjs-core","loc":{"line":17,"column":44},"parent":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/MaxPool.js","resolved":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-core/dist/index.js"},{"name":"../cpu_util","loc":{"line":18,"column":33},"parent":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/MaxPool.js","resolved":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-backend-cpu/dist/cpu_util.js"},{"name":"../utils/pool_utils","loc":{"line":19,"column":21},"parent":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/MaxPool.js","resolved":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/pool_utils.js"},{"name":"./Identity","loc":{"line":20,"column":25},"parent":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/MaxPool.js","resolved":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Identity.js"}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.maxPool=r,exports.maxPoolConfig=void 0;var e=require(\"@tensorflow/tfjs-core\"),t=require(\"../cpu_util\"),o=require(\"../utils/pool_utils\"),i=require(\"./Identity\");function r(r){const{inputs:s,backend:a,attrs:n}=r,{x:l}=s;(0,t.assertNotComplex)(l,\"maxPool\");const{filterSize:u,strides:d,pad:p,dimRoundingMode:c}=n;e.util.assert(e.backend_util.eitherStridesOrDilationsAreOne(d,1),()=>\"Error in maxPool: Either strides or dilations must be 1. \"+`Got strides ${d} and dilations '1'`);const m=e.backend_util.computePool2DInfo(l.shape,u,d,1,p,c);let x;if(1===m.filterWidth&&1===m.filterHeight&&e.util.arraysEqual(m.inShape,m.outShape))x=(0,i.identity)({inputs:{x:l},backend:a});else{const t=a.data.get(l.dataId).values,i=e.util.computeStrides(l.shape),r=(0,o.pool)(t,l.shape,l.dtype,i,m,\"max\");x=a.makeTensorInfo(m.outShape,l.dtype,r.values)}return x}const s={kernelName:e.MaxPool,backendName:\"cpu\",kernelFunc:r};exports.maxPoolConfig=s;"},"sourceMaps":null,"error":null,"hash":"02c72e20c08b07f764092f06452818a6","cacheData":{"env":{}}}