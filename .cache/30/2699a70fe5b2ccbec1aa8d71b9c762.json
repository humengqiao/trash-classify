{"id":"xlhc","dependencies":[{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/package.json","includedInParent":true,"mtime":1609564004117},{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-backend-cpu/package.json","includedInParent":true,"mtime":499162500000},{"name":"@tensorflow/tfjs-core","loc":{"line":17,"column":42},"parent":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/BatchMatMul.js","resolved":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-core/dist/index.js"},{"name":"../cpu_util","loc":{"line":18,"column":33},"parent":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/BatchMatMul.js","resolved":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-backend-cpu/dist/cpu_util.js"},{"name":"./Reshape","loc":{"line":19,"column":24},"parent":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/BatchMatMul.js","resolved":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Reshape.js"}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.batchMatMul=a,exports.batchMatMulConfig=void 0;var e=require(\"@tensorflow/tfjs-core\"),t=require(\"../cpu_util\"),s=require(\"./Reshape\");function a(a){const{inputs:n,backend:r,attrs:o}=a,{a:p,b:h}=n,{transposeA:i,transposeB:u}=o;(0,t.assertNotComplex)([p,h],\"matMul\");const l=p.shape.length,c=h.shape.length,d=i?p.shape[l-2]:p.shape[l-1],m=u?h.shape[c-1]:h.shape[c-2],f=i?p.shape[l-1]:p.shape[l-2],M=u?h.shape[c-2]:h.shape[c-1],b=p.shape.slice(0,-2),k=h.shape.slice(0,-2),x=e.util.sizeFromShape(b),$=e.util.sizeFromShape(k),v=x===$||1===x||1===$;e.util.assert(l>=2&&c>=2&&v,()=>\"Error in matMul: the input batch dimensions must either be the same or at least one input batch dimension must be 1. Got input \"+`batch dimensions of (${b}) and (${k}).`);const I=(x>$?p.shape.slice(0,-2):h.shape.slice(0,-2)).concat([f,M]);e.util.assert(d===m,()=>`Error in matMul: inner shapes (${d}) and (`+`${m}) of Tensors with shapes ${p.shape} and `+`${h.shape} and transposeA=${i}`+` and transposeB=${u} must match.`);const g=i?[x,d,f]:[x,f,d],S=u?[$,M,m]:[$,m,M],T=(0,s.reshape)({inputs:{x:p},backend:r,attrs:{shape:g}}),q=(0,s.reshape)({inputs:{x:h},backend:r,attrs:{shape:S}}),y=i?T.shape[1]:T.shape[2],z=i?T.shape[2]:T.shape[1],B=u?q.shape[1]:q.shape[2],C=Math.max(x,$),F=r.data.get(T.dataId).values,N=r.data.get(q.dataId).values,_=e.util.computeStrides(T.shape),j=e.util.computeStrides(q.shape),[w,A,E]=i?[_[0],1,_[1]]:[_[0],_[1],1],[G,O,P]=u?[1,j[1],j[0]]:[j[1],1,j[0]],R=z*B,D=(0,e.buffer)([C,z,B],T.dtype),H=D.values,J=r.blockSize;for(let e=0;e<C;e++)for(let t=0;t<z;t+=J)for(let s=0;s<B;s+=J)for(let a=0;a<y;a+=J){const n=Math.min(t+J,z),r=Math.min(s+J,B),o=Math.min(a+J,y);for(let p=t;p<n;p++)for(let t=s;t<r;t++){let s=0;for(let n=a;n<o;n++){const a=Math.min(e,x-1)*w,r=Math.min(e,$-1)*P;s+=F[a+p*A+n*E]*N[n*G+t*O+r]}H[e*R+(p*B+t)]+=s}}return r.disposeIntermediateTensorInfo(T),r.disposeIntermediateTensorInfo(q),r.makeTensorInfo(I,D.dtype,D.values)}const n={kernelName:e.BatchMatMul,backendName:\"cpu\",kernelFunc:a};exports.batchMatMulConfig=n;"},"sourceMaps":null,"error":null,"hash":"d795dd66b3f7de386f7eb2065662b060","cacheData":{"env":{}}}