{"id":"TJbF","dependencies":[{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/package.json","includedInParent":true,"mtime":1609565653941},{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-backend-webgl/package.json","includedInParent":true,"mtime":499162500000}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.ResizeNearestNeighborProgram=void 0;class e{constructor(e,t,o,n){this.variableNames=[\"A\"],this.outputShape=[];const[r,s,c,i]=e;this.outputShape=[r,t,o,i];const u=[n&&t>1?s-1:s,n&&o>1?c-1:c],a=[n&&t>1?t-1:t,n&&o>1?o-1:o],p=n?\"0.5\":\"0.0\";this.userCode=`\\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\\n          ${u[0]/a[0]},\\n          ${u[1]/a[1]});\\n      const vec2 inputShapeRC = vec2(${s}.0, ${c}.0);\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int d = coords[3];\\n        ivec2 yRC = coords.yz;\\n\\n        // Fractional source index.\\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\\n\\n        // Compute the coordinators of nearest neighbor point.\\n        ivec2 sourceNearestRC = ivec2(\\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${p})));\\n\\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\\n\\n        setOutput(newValue);\\n      }\\n    `}}exports.ResizeNearestNeighborProgram=e;"},"sourceMaps":null,"error":null,"hash":"d8d60d5e506cd43cf0f2698766758943","cacheData":{"env":{}}}