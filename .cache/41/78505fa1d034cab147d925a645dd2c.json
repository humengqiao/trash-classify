{"id":"PGAU","dependencies":[{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/package.json","includedInParent":true,"mtime":1609565653941},{"name":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-core/package.json","includedInParent":true,"mtime":499162500000},{"name":"../tensor_util_env","loc":{"line":1,"column":32},"parent":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm4d.js","resolved":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js"},{"name":"../util","loc":{"line":2,"column":22},"parent":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm4d.js","resolved":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-core/dist/util.js"},{"name":"./batchnorm","loc":{"line":3,"column":26},"parent":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm4d.js","resolved":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js"},{"name":"./operation","loc":{"line":4,"column":19},"parent":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm4d.js","resolved":"/Users/humengqiao/Desktop/node-project/trash-classify/node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.batchNorm4d=void 0;var r=require(\"../tensor_util_env\"),t=a(require(\"../util\")),e=require(\"./batchnorm\"),n=require(\"./operation\");function o(){if(\"function\"!=typeof WeakMap)return null;var r=new WeakMap;return o=function(){return r},r}function a(r){if(r&&r.__esModule)return r;if(null===r||\"object\"!=typeof r&&\"function\"!=typeof r)return{default:r};var t=o();if(t&&t.has(r))return t.get(r);var e={},n=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var a in r)if(Object.prototype.hasOwnProperty.call(r,a)){var c=n?Object.getOwnPropertyDescriptor(r,a):null;c&&(c.get||c.set)?Object.defineProperty(e,a,c):e[a]=r[a]}return e.default=r,t&&t.set(r,e),e}function c(n,o,a,c,u,s){const i=(0,r.convertToTensor)(n,\"x\",\"batchNorm\"),b=(0,r.convertToTensor)(o,\"mean\",\"batchNorm\"),k=(0,r.convertToTensor)(a,\"variance\",\"batchNorm\");let l,f;return null!=u&&(l=(0,r.convertToTensor)(u,\"scale\",\"batchNorm\")),null!=c&&(f=(0,r.convertToTensor)(c,\"offset\",\"batchNorm\")),t.assert(4===i.rank,()=>\"Error in batchNorm4D: x must be rank 4 but got rank \"+`${i.rank}.`),t.assert(4===b.rank||1===b.rank,()=>\"Error in batchNorm4D: mean must be rank 4 or rank 1 but \"+`got rank ${b.rank}.`),t.assert(4===k.rank||1===k.rank,()=>\"Error in batchNorm4D: variance must be rank 4 or rank 1 \"+`but got rank ${k.rank}.`),null!=l&&t.assert(4===l.rank||1===l.rank,()=>\"Error in batchNorm4D: scale must be rank 4 or rank 1 \"+`but got rank ${l.rank}.`),null!=f&&t.assert(4===f.rank||1===f.rank,()=>\"Error in batchNorm4D: offset must be rank 4 or rank 1 \"+`but got rank ${f.rank}.`),(0,e.batchNorm)(i,b,k,f,l,s)}const u=(0,n.op)({batchNorm4d_:c});exports.batchNorm4d=u;"},"sourceMaps":null,"error":null,"hash":"e39bd0ce8b2600457569e0fb9d79be3e","cacheData":{"env":{}}}